<?xml version="1.0" encoding="UTF-8" ?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domaicrn Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <service verb="check" noun="Company">
        <in-parameters><parameter name="partyId" required="true"/></in-parameters>
        <out-parameters><parameter name="ok"/></out-parameters>
        <actions>
            <entity-find entity-name="growerp.mobile.CompanyPersonAndLoginGroup"
                    list="parties">
                <econdition field-name="companyPartyId" from="partyId"/>
            </entity-find>
            <if condition="parties">
                <set field="ok" value="ok"/></if>
        </actions>
    </service>

    <service verb="get" noun="Companies">
        <in-parameters>
            <parameter name="partyClassificationId"/>
            <parameter name="start" type="Integer" default-value="0"/>
            <parameter name="limit" type="Integer" default-value="20"/>
        </in-parameters>
        <out-parameters>
            <parameter name="companies"/>
        </out-parameters>
        <actions>
            <entity-find  list="parties" offset="start" limit="limit"
                entity-name="growerp.mobile.party.CompanyPreferenceAndClassification">
                <econdition field-name="partyClassificationId" ignore-if-empty="true"/>
                <econditions combine="or">
                    <econdition field-name="disabled" operator="not-equals" value="Y"/>
                    <econdition field-name="disabled" operator="is-null"/>
                </econditions>
            </entity-find>
            <set field="companies" from="[]" />
            <iterate list="parties" entry="party">
                <set field="company"
                    from="[partyId: party.partyId, name: party.organizationName,
                                currencyId: party.baseCurrencyUomId]"/>
                <script>companies.add(company)</script>
            </iterate>
        </actions>
    </service>

    <service verb="get" noun="Company">
        <in-parameters>
            <parameter name="companyPartyId"/>
            <parameter name="contentTypeId" default-value="PcntImageMedium"/>
        </in-parameters>
        <out-parameters>
            <parameter name="company" type="Map"/>
        </out-parameters>
        <actions>
            <if condition="!companyPartyId &amp;&amp; ec.user &amp;&amp; ec.user.userAccount?.partyId">
                <service-call name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" out-map="context"/>
            </if>
            <if condition="!companyPartyId"><return/></if><!-- return null if no company found -->
            <entity-find-one entity-name="growerp.mobile.party.CompanyPreferenceAndClassification" value-field="org">
                <field-map field-name="partyId" from="companyPartyId"/></entity-find-one>
            <if condition="!org"><return error="true" message="Company ${companyPartyId} not found!"/></if>
            <service-call name="mantle.party.ContactServices.get#PrimaryEmailAddress"
                in-map="[partyId: companyPartyId]" out-map="context"/>
            <entity-find entity-name="mantle.party.PartyContent" list="contents">
                <econdition field-name="partyId" from="companyPartyId"/>
                <econdition field-name="partyContentTypeEnumId" from="contentTypeId"/>
            </entity-find>
            <if condition="contents">
                <service-call name="growerp.100.ImageServices100.download#Image"
                    in-map="[contentLocation: contents[0].contentLocation]" out-map="context"/>
            </if>
            <!-- itemtypes for orderItem and invoiceItem -->
            <set field="itemTypes" from="[:]"/>
            <set field="itemTypes['sales']" from="[]"/>
            <entity-find entity-name="moqui.basic.EnumAndGroup" list="salesItemTypes">
                <econdition field-name="enumGroupEnumId" value="EngItemsSales"/>
                <order-by field-name="description"/></entity-find>
            <iterate list="salesItemTypes" entry="itemType">
                <script>itemTypes['sales'].add([itemTypeId: itemType.enumId, description: itemType.description])</script>
            </iterate>
            <set field="itemTypes['purchase']" from="[]"/>
            <entity-find entity-name="moqui.basic.EnumAndGroup" list="purchaseItemTypes">
                <econdition field-name="enumGroupEnumId" operator="in" value="EngItemsPurchase,EngItemsProduct"/>
                <order-by field-name="description"/></entity-find>
            <iterate list="purchaseItemTypes" entry="itemType">
                <script>itemTypes['purchase'].add([itemTypeId: itemType.enumId, description: itemType.description])</script>
            </iterate>
            <!-- postal address -->
            <entity-find list="addresses"
                entity-name="mantle.party.contact.PartyContactMechPostalAddressOnly">
                <econdition field-name="partyId" from="companyPartyId"/>
                <econdition field-name="contactMechPurposeId" value="PostalPrimary"/>
            </entity-find>
            <if condition="addresses">
                <set field="address" from="[
                address1: addresses.address1,
                address2: addresses.address2,
                city: addresses.city,
                postalCode: addresses.postalCode,
                province: addresses.stateProvince,
                country: addresses.country,
                ]"/>
            </if>
            <entity-find-one entity-name="mantle.party.Party" value-field="party">
                <field-map field-name="partyId" from="companyPartyId"/>
            </entity-find-one>
            <set field="company" from="[
                partyId: companyPartyId,
                name: org.organizationName,
                classificationId: org.partyClassificationId,
                classificationDescr: org.description,
                email: emailAddress,
                currencyId: org.baseCurrencyUomId,
                image: imageFile,
                itemTypes: itemTypes,
                address: address,
                vatPerc: party?.vatPerc.toString(),
                salesPerc: party?.salesPerc.toString(),
                ]"/>
        </actions>
    </service>

    <service verb="update" noun="Company">
        <description>
            update company information
        </description>
        <in-parameters>
            <parameter name="company"/>
        </in-parameters>
        <out-parameters>
            <parameter name="company" type="Map"/>
        </out-parameters>
        <actions>
            <script> // convert JSON data
                Object compIn = new groovy.json.JsonSlurper().parseText(company).company
            </script>
            <!-- check access user belongs to this company override companyPartyId-->
            <service-call out-map="context" 
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"/>
            <set field="compIn.partyId" from="ownerPartyId"/>
            <!-- get old values -->
            <service-call name="growerp.100.PartyServices100.get#Company" out-map="oldValue"/>
            <!-- update name -->
            <if condition="compIn.name &amp;&amp; oldValue.company.name !=  compIn.name">
                <service-call name="update#mantle.party.Organization"
                    in-map="[partyId: oldValue.company.partyId, organizationName: compIn.name]"/>
            </if>
            <!-- update email -->
            <if condition="compIn.email &amp;&amp; compIn.email != oldValue.company.email">
                <entity-find entity-name="mantle.party.contact.PartyContactMech" for-update="true" list="partyContactMechs" >
                    <econdition field-name="partyId" from="oldValue.company.partyId"/>
                    <econdition field-name="contactMechPurposeId" value="EmailPrimary"/><date-filter/></entity-find>
                <if condition="partyContactMechs">
                    <set field="partyContactMechs[0].thruDate" from="ec.user.nowTimestamp"/>
                    <entity-update value-field="partyContactMechs[0]"/> </if>
                <service-call name="mantle.party.ContactServices.create#EmailAddress"
                    in-map="[partyId: oldValue.company.partyId, contactMechPurposeId: 'EmailPrimary', emailAddress: compIn.email]"/>
            </if>
            <!-- update currency -->
            <entity-find-one entity-name="mantle.ledger.config.PartyAcctgPreference" value-field="pref" for-update="true">
                <field-map field-name="organizationPartyId" from="compIn.partyId"/>
            </entity-find-one>
            <if condition="pref.baseCurrencyUomId != compIn.currencyId">
                <set field="pref.baseCurrencyUomId" from="compIn.currencyId"/>
                <entity-update value-field="pref" />
            </if>
            <!-- update image -->
            <if condition="compIn.image">
                <service-call name="growerp.100.ImageServices100.upload#Image"
                    in-map="[type: 'company', id: compIn.partyId,
                        base64: compIn.image]"/>
            </if>
            <!-- postal address -->
            <if condition="compIn.address?.country">
                <entity-find entity-name="moqui.basic.Geo" list="countries">
                    <econdition field-name="geoName" from="compIn.address.country"/>
                    <econdition field-name="geoTypeEnumId" value="GEOT_COUNTRY"/>
                </entity-find>
                <if condition="compIn.address.addressId">
                    <entity-find list="addr"
                        entity-name="mantle.party.contact.PartyContactMechPostalAddress">
                        <econdition field-name="partyId" from="compIn.partyId"/>
                        <econdition field-name="contactMechId" from="compIn.address.addressId"/>
                    </entity-find>
                    <if condition="
                        compIn.address.address1 != addr[0].address1 ||
                        compIn.address.address2 != addr[0].address2 ||
                        compIn.address.city != addr[0].city ||
                        compIn.address.postalCode != addr[0].postalCode ||
                        compIn.address.stateProvince != addr[0].province ||
                        compIn.address.countryGeoId != countries[0].geoId
                        ">
                        <entity-find-one for-update="true"
                            entity-name="mantle.party.contact.ContactMech" value-field="cm">
                            <field-map field-name="contactMechId" from="compIn.address.addressId"/>
                        </entity-find-one>
                        <script>
                            cm.address1 = compIn.address.address1;
                            cm.address2 = compIn.address.address2;
                            cm.city = compIn.address.city;
                            cm.potalCode = compIn.address.postalCode;
                            cm.provinceState = compIn.address.province;
                            cm.countryGeoId = countries[0].geoId;
                        </script>
                        <entity-update value-field="cm"/>
                    </if>
                    <else>
                        <service-call
                            name="mantle.party.ContactServices.findOrCreate#PartyPostalAddress"
                            in-map="[
                                contactMechPurposeId: 'PostalPrimary',
                                partyId: compIn.partyId,
                                address1: compIn.address.address1,
                                address2: compIn.address.address2,
                                city: compIn.address.city,
                                country: compIn.address.country,
                                postalCode: compIn.address.postalCode,
                                stateProvince: compIn.address.province,
                            ]"/>
                    </else>
                </if>    
            </if>
            <!-- sales/vat tax percentage -->
            <if condition="compIn.salesPerc || compIn.vatPerc">
                <entity-find-one
                    entity-name="mantle.party.Party" value-field="party" for-update="true">
                    <field-map field-name="partyId" from="compIn.partyId"/>
                </entity-find-one>
                <if condition="compIn.vatPerc != null"> 
                    <set field="party.vatPerc" from="Integer.parseInt(compIn.vatPerc)"/>
                    <else>
                        <set field="party.vatPerc" from="null"/>
                    </else>
                </if>
                <if condition="compIn.salesPerc != null"> 
                    <set field="party.salesPerc" from="Integer.parseInt(compIn.salesPerc)"/>
                    <else>
                        <set field="party.salesPerc" from="null"/>
                    </else>
                </if>
                <entity-update value-field="party"/>
            </if>
            <!-- return updated company -->
            <service-call
                name="growerp.100.PartyServices100.get#Company" out-map="context"/>
        </actions>
    </service>

    <service verb="get" noun="User">
        <description>
            Get all users of the company or usergroup they belong to(with partyId just a single party with PartyId)
        </description>
        <in-parameters>
            <parameter name="userPartyId"/><!-- if present select a single user, else a list -->
            <parameter name="userGroupId"/><!-- if present select user from particular groups-->
            <parameter name="start" type="Integer" default-value="0"/>
            <parameter name="limit" type="Integer" default-value="20"/>
            <parameter name="filter"/>
            <parameter name="search"/>
        </in-parameters>
        <out-parameters>
            <parameter name="users" type="List"/>
            <parameter name="user" type="Map"/>
        </out-parameters>
        <actions>
            <if condition="filter">
                <set field="filter" value="%${filter}%"/>
            </if>
            <if condition="search">
                <set field="search" value="%${search}%"/></if>
            <service-call out-map="relatedLogin"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"/>
            <entity-find offset="start" limit="limit" list="userInfos"
                entity-name="growerp.mobile.CompanyPersonAndLoginGroup">
                <econdition field-name="ownerPartyId" from="relatedLogin.ownerPartyId"/>
                <econdition field-name="userPartyId" ignore-if-empty="true"/>
                <econditions combine="or">
                    <econdition field-name="userPartyId" operator="like"
                        from="filter" ignore-if-empty="true"/>
                    <econdition field-name="lastName" operator="like"
                        from="filter" ignore-if-empty="true"/>
                    <econdition field-name="firstName" operator="like"
                        from="filter" ignore-if-empty="true"/>
                    <econdition field-name="companyName" operator="like"
                        from="filter" ignore-if-empty="true"/>
                </econditions>
                <econditions combine="or">
                    <econdition field-name="userPartyId"
                        operator="like" from="search" ignore-if-empty="true"/>
                    <econdition field-name="userFullName"
                        operator="like" from="search" ignore-if-empty="true"/>
                    <econdition field-name="emailAddress"
                        operator="like" from="search" ignore-if-empty="true"/>
                </econditions>
                <econdition field-name="userGroupId" ignore-if-empty="true"/>
                <order-by field-name="lastName"/><order-by field-name="firstName"/>
            </entity-find>
            <if condition="!userPartyId"><set field="users" from="[]"/></if>
            <iterate entry="userInfo" list="userInfos">
                <if condition="filter">
                    <script>
                        users.add([
                            partyId: userInfo?.userPartyId,
                            firstName: userInfo?.firstName,
                            lastName: userInfo?.lastName,
                            companyPartyId: userInfo.companyPartyId,
                            companyName: userInfo.companyName         
                            ])
                    </script>
                    <continue/>
                </if>
                <entity-find entity-name="mantle.party.PartyContent" list="contents">
                    <econdition field-name="partyId" from="userInfo.userPartyId"/>
                    <econdition field-name="partyContentTypeEnumId" 
                        from="userPartyId? 'PcntImageMedium' : 'PcntImageSmall'" />
                </entity-find>
                <if condition="contents">    
                    <service-call name="growerp.100.ImageServices100.download#Image"
                        in-map="[contentLocation: contents[0].contentLocation]" out-map="context"/></if>
                <!-- postal address -->
                <entity-find list="addresses"
                    entity-name="mantle.party.contact.PartyContactMechPostalAddressOnly">
                    <econdition field-name="partyId" from="userPartyId"/>
                    <econdition field-name="contactMechPurposeId" value="PostalPrimary"/>
                </entity-find>
                <if condition="addresses">
                    <entity-find entity-name="moqui.basic.Geo" list="countries">
                        <econdition field-name="geoId" from="addresses[0].countryGeoId"/>
                        <econdition field-name="geoTypeEnumId" value="GEOT_COUNTRY"/>
                    </entity-find>
                    <set field="address" from="[
                        addressId: addresses[0].contactMechId,
                        address1: addresses[0].address1,
                        address2: addresses[0].address2,
                        city: addresses[0].city,
                        postalCode: addresses[0].postalCode,
                        province: addresses[0].stateProvince,
                        country: countries[0].geoName,
                        ]"/>
                </if>
                <set field="userOut" from="[
                    partyId: userInfo?.userPartyId,
                    email: userInfo?.emailAddress,
                    name: userInfo?.username,
                    firstName: userInfo?.firstName,
                    lastName: userInfo?.lastName,
                    userGroupId: userInfo.userGroupId,
                    groupDescription: userInfo?.description,
                    language: userInfo?.locale.toString(),
                    companyPartyId: userInfo.companyPartyId,
                    companyName: userInfo.companyName,
                    image: imageFile,
                    userId: userInfo?.userId,
                    locale: userInfo?.locale,
                    externalId: userInfo?.externalId,
                    address: address]"/>

                <if condition="!userPartyId">
                    <script>users.add(userOut)</script>
                    <else>
                        <set field="user" from="userOut"/>
                    </else>
                </if>
            </iterate>
            <!--if condition="users &amp;&amp; !userPartyId">
                <log message="====getusers=result: ${users.size()}"/>
                <log message="====first party: ${users[0]}"/>
                <script>users.sort{a, b -> 
                    a.lastName.compareToIgnoreCase(b.lastName) } </script>
                </if>
            <if condition="userPartyId">
                <log message="====single party: $user"/>
            </if-->
        </actions>
    </service>

    <service verb="create" noun="User">
        <description>
            add a new user on an existing owner company
        </description>
        <in-parameters>
            <parameter name="user"/>
        </in-parameters>
        <out-parameters>
            <parameter name="user"/>
        </out-parameters>
        <actions>
            <script> // convert JSON data
                Object userIn = new groovy.json.JsonSlurper().parseText(user).user
            </script>
            <if condition="userIn.userGroupId == 'GROWERP_M_EMPLOYEE' ||
                    userIn.userGroupId == 'GROWERP_M_ADMIN'">
                <set field="roleTypeId" value="Employee"/></if>
            <if condition="userIn.userGroupId == 'GROWERP_M_LEAD' ||
                    userIn.userGroupId == 'GROWERP_M_CUSTOMER'">
                <set field="roleTypeId" value="Customer"/></if>
            <if condition="userIn.userGroupId == 'GROWERP_M_SUPPLIER'">
                <set field="roleTypeId" value="Supplier"/></if>

            <service-call out-map="relComp"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"/>
            <service-call name="mantle.party.PartyServices.create#Account" 
                in-map="context + [roleTypeId: 'Employee', loginAfterCreate: false,
                        firstName: userIn.firstName, lastName: userIn.lastName,
                        emailAddress: userIn.email, disabled: 'N']"
                out-map="userAccount" />
            <set field="userPartyId" from="userAccount.partyId"/>
            <!-- update owner on userPartyId -->
            <entity-find-one entity-name="mantle.party.Party"
                    value-field="party" for-update="true">
                <field-map field-name="partyId" from="userPartyId"/>
            </entity-find-one>
            <set field="party.ownerPartyId" from="relComp.ownerPartyId"/>
            <entity-update value-field="party"/>
            <!-- no need to create company for employee and admin -->
            <if condition="userIn.userGroupId != 'GROWERP_M_ADMIN' &amp;&amp; 
                            userIn.userGroupId != 'GROWERP_M_EMPLOYEE'">
                <if condition="!userIn.companyName">
                    <return error="true"
                        message="Company name required for new lead, customer or supplier"/>
                </if>
                <service-call out-map="comp"
                    name="mantle.party.PartyServices.create#Organization"
                    in-map="[organizationName: userIn.companyName,
                            ownerPartyId: relComp.ownerPartyId, roleTypeId: roleTypeId,
                            disabled: 'N']"/>
                <set field="companyPartyId" from="comp.partyId"/>
                <else>
                    <set field="companyPartyId" from="relComp.ownerPartyId"/>
                </else>
            </if>
            <service-call name="create#mantle.party.PartyRelationship"
                in-map="[fromPartyId: userPartyId, fromRoleTypeId: 'Employee',
                    relationshipTypeEnumId: 'PrtEmployee', fromDate: ec.user.nowTimestamp,
                    toPartyId: companyPartyId, toRoleTypeId: roleTypeId]" />
            <service-call name="create#moqui.security.UserGroupMember"
                in-map="[userGroupId: userIn.userGroupId, userId: userAccount.userId]" />
            <!-- add image -->
            <if condition="userIn.image">
                <service-call name="growerp.100.ImageServices100.upload#Image"
                    in-map="[type: 'user', id: userIn.partyId,
                        base64: userIn.image]"/>
            </if>
            <if condition="userIn.address">
                <entity-find entity-name="moqui.basic.Geo" list="countries">
                    <econdition field-name="geoName" from="userIn.address.country"/>
                    <econdition field-name="geoTypeEnumId" value="GEOT_COUNTRY"/>
                </entity-find>
                <service-call
                    name="mantle.party.ContactServices.create#PostalAddress"
                    out-map="context"
                    in-map="[
                        address1: userIn.address.address1,
                        address2: userIn.address.address2,
                        city: userIn.address.city,
                        postalCode: userIn.address.postalCode,
                        stateProvince: userIn.address.province,
                        countryGeoId: countries[0].geoId,
                        contactMechPurposeId: 'PostalPrimary',
                        partyId: userPartyId
                        ]"/>
            </if>
            <service-call name="growerp.100.PartyServices100.get#User"
                in-map="[userPartyId: userPartyId]" out-map="context"/>
        </actions>
    </service>

    <service verb="update" noun="User">
        <description>
            update user information
        </description>
        <in-parameters>
            <parameter name="user"/>
        </in-parameters>
        <out-parameters>
            <parameter name="user"/>
        </out-parameters>
        <actions>
            <script> // convert JSON data
                Object userIn = new groovy.json.JsonSlurper().parseText(user).user
            </script>
            <service-call name="growerp.100.PartyServices100.get#User"
                in-map="[userPartyId: userIn.partyId]" out-map="oldValue"/>
            <service-call name="update#mantle.party.Person" 
                in-map="[   partyId: userIn.partyId, 
                            firstName: userIn.firstName ? userIn.firstName : oldValue.user.firstName, 
                            lastName: userIn.lastName ? userIn.lastName : oldValue.user.lastName]"/>
            <service-call name="mantle.party.PartyServices.update#PartyUserAccount"
                in-map="[   partyId: userIn.partyId, 
                            emailAddress: userIn.email ? userIn.email : oldValue.user.email,
                            username: userIn.name? userIn.name : oldValue.user.name,
                            locale: language
                        ]"/>
            <!--update user group -->
            <if condition="!userIn.userGroupId">
                <return error="true" message="userGroupId not supplied to update user"/></if>
            <if condition="userIn.userGroupId != oldValue.user.userGroupId">
                <if condition="oldValue.user.userGroupId == 'GROWERP_M_ADMIN'">
                    <!-- check if only a single admin: cannot change -->
                    <service-call name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" 
                        in-map="[userPartyId: userIn.partyId]" out-map="company"/>
                    <entity-find entity-name="growerp.mobile.CompanyPersonAndLoginGroup" list="admins">
                        <econdition field-name="userGroupId" value="GROWERP_M_ADMIN"/>
                        <econdition field-name="companyPartyId" from="company.companyPartyId" />
                        <date-filter/></entity-find>
                    <if condition="admins.size() == 1">
                        <return error="true" message="You need at least a single Admin in your company: cannot remove this one!"/></if>
                </if>
                <entity-find entity-name="moqui.security.UserGroupMember" list="groupMembers" for-update="true">
                    <econdition field-name="userGroupId" from="oldValue.user.userGroupId"/>
                    <econdition field-name="userId" from="oldValue.user.userId"/>
                </entity-find>
                <set field="groupMembers[0].thruDate" from="ec.user.nowTimestamp"/>
                <entity-update value-field="groupMembers[0]"/>
                <service-call name="create#moqui.security.UserGroupMember"
                    in-map="[userGroupId: userIn.userGroupId, userId: oldValue.user.userId, fromDate: ec.user.nowTimestamp]"/>
            </if>    
            <!-- update external id for customer indentification -->
            <entity-find-one value-field="party" entity-name="mantle.party.Party" for-update="true">
                <field-map field-name="partyId" from="userIn.partyId"/></entity-find-one>
            <if condition="userIn.externalId != party.externalId">
                <set field="party.externalId" from="userIn.externalId"/>
                <entity-update value-field="party"/></if>
            <!-- update image -->
            <if condition="userIn.image">
                <service-call name="growerp.100.ImageServices100.upload#Image"
                    in-map="[type: 'user', id: userIn.partyId,
                        base64: userIn.image]"/>
            </if>
            <!-- update company name for customer, lead supplier -->
            <if condition="userIn.companyName != oldValue.companyName">
                <entity-find-one value-field="companyParty" entity-name="mantle.party.Organization"
                        for-update="true">
                    <field-map field-name="partyId" from="userIn.companyPartyId"/>
                </entity-find-one>
                <set field="companyParty.organizationName" from="userIn.companyName"/>
                <entity-update value-field="companyParty"/>
            </if>
            <!-- update postal address -->
            <if condition="userIn.address">
                <entity-find entity-name="moqui.basic.Geo" list="countries">
                    <econdition field-name="geoName" from="userIn.address.country"/>
                    <econdition field-name="geoTypeEnumId" value="GEOT_COUNTRY"/>
                </entity-find>
                <if condition="userIn.address.addressId">
                    <entity-find list="addr"
                        entity-name="mantle.party.contact.PartyContactMechPostalAddress">
                        <econdition field-name="partyId" from="userIn.partyId"/>
                        <econdition field-name="contactMechId" from="userIn.address.addressId"/>
                    </entity-find>
                    <if condition="
                        userIn.address.address1 != addr[0].address1 ||
                        userIn.address.address2 != addr[0].address2 ||
                        userIn.address.city != addr[0].city ||
                        userIn.address.postalCode != addr[0].postalCode ||
                        userIn.address.stateProvince != addr[0].province ||
                        userIn.address.country != countries[0].geoName
                        ">
                        <entity-find-one for-update="true"
                            entity-name="mantle.party.contact.ContactMech" value-field="cm">
                            <field-map field-name="contactMechId" from="userIn.address.addressId"/>
                        </entity-find-one>
                        <script>
                            cm.address1 = userIn.address.address1;
                            cm.address2 = userIn.address.address2;
                            cm.city = userIn.address.city;
                            cm.potalCode = userIn.address.postalCode;
                            cm.provinceState = userIn.address.province;
                            cm.countryGeoId = countries[0].geoId;
                        </script>
                        <entity-update value-field="cm"/>
                    </if>
                <else>
                    <!-- create new postal address -->
                    <service-call
                        name="mantle.party.ContactServices.findOrCreate#PartyPostalAddress"
                        in-map="[
                            contactMechPurposeId: 'PostalPrimary',
                            partyId: userIn.partyId,
                            address1: userIn.address.address1,
                            address2: userIn.address.address2,
                            city: userIn.address.city,
                            countryGeoId: countries[0].geoId,
                            postalCode: userIn.address.postalCode,
                            stateProvince: userIn.address.province,
                        ]"/>
                </else>
            </if></if>    
            <!-- return updated user -->
            <service-call name="growerp.100.PartyServices100.get#User"
                in-map="[userPartyId: userIn.partyId]" out-map="context"/>
        </actions>
    </service>

    <service verb="delete" noun="User">
        <in-parameters>
            <parameter name="partyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="partyId"/>
        </out-parameters>
        <actions>
            <!-- check if this user has an admin account -->
            <service-call name="growerp.100.PartyServices100.get#User"
                in-map="[userPartyId: partyId]" out-map="oldValue"/>
            <if condition="oldValue.user.userGroupId == 'GROWERP_M_ADMIN'">
                <!-- check if only a single admin: cannot change -->
                <service-call name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" 
                    in-map="[userPartyId: partyId]" out-map="company"/>
                <entity-find entity-name="growerp.mobile.CompanyPersonAndLoginGroup" list="admins">
                    <econdition field-name="userGroupId" value="GROWERP_M_ADMIN"/>
                    <econdition field-name="companyPartyId" from="company.companyPartyId" />
                    <date-filter/></entity-find>
                <if condition="admins.size() == 1">
                    <return error="true" message="You need at least a single Admin in your company: cannot delete this one!"/></if>
            </if>
            <service-call name="update#mantle.party.Party" in-map="[partyId: partyId, disabled: 'Y']"/>
        </actions>
    </service>

    <service verb="register" noun="UserAndCompany" authenticate="anonymous-all">
        <description>Register a new accounting/ownercompany with an admin user</description>
        <in-parameters>
            <!-- user information -->
            <parameter name="firstName" required="true" />
            <parameter name="middleName" />
            <parameter name="lastName" required="true" />
            <parameter name="emailAddress" required="true">
                <text-email />
            </parameter>
            <parameter name="username" default="emailAddress"/>
            <parameter name="newPassword" default="org.moqui.util.StringUtilities.getRandomString(6) + '9!'" />
            <parameter name="newPasswordVerify" default="newPassword" />
            <parameter name="locale" />
            <!-- company information -->
            <parameter name="companyName"/><!-- can be empty with new user existing company -->
            <parameter name="companyEmailAddress"/>
            <parameter name="currencyId"/>
            <parameter name="classificationId" required="true"/> <!-- allocate company to application name -->
            <!-- default setup -->
            <parameter name="environment"/>
        </in-parameters>
        <out-parameters>
            <parameter name="user" />
            <parameter name="company" />
        </out-parameters>
        <actions>
            <service-call name="mantle.party.PartyServices.create#Account" 
                in-map="context + [roleTypeId: 'Employee',
                        loginAfterCreate: false, disabled: 'N']"
                out-map="userAccount" />
            <set field="userPartyId" from="userAccount.partyId"/>
            <set field="fromDate" from="ec.user.nowTimestamp"/>
            <if condition="userAccount.partyId != null">
                <!-- add the user as admin -->
                <service-call name="create#moqui.security.UserGroupMember"
                    in-map="[userGroupId: 'GROWERP_M_ADMIN', userId: userAccount.userId]"/>
                <!-- create company -->
                <service-call name="mantle.party.PartyServices.create#Organization"
                    in-map="[roleTypeId: 'OrgInternal',organizationName: companyName,
                            disabled: 'N']" out-map="company" />
                <set field="companyPartyId" from="company.partyId" />
                <!-- company email address -->
                <service-call name="mantle.party.ContactServices.create#EmailAddress" 
                    in-map="[emailAddress: companyEmailAddress, partyId: companyPartyId,
                        contactMechPurposeId:'EmailPrimary']" out-map="emailOut"/>
                <!-- initialize accounting with defaults -->
                <service-call name="mantle.ledger.LedgerServices.init#PartyAccountingConfiguration"
                    in-map="[sourcePartyId: 'DefaultSettings',
                            organizationPartyId: companyPartyId, baseCurrencyUomId: currencyId]" />
                <!-- set classification: admin hotel, ecommerce etc -->
                <service-call name="create#mantle.party.PartyClassificationAppl"
                    in-map="[partyId: companyPartyId, partyClassificationId: classificationId]"
                    out-map="context" />
                <!-- create productStore every claasification/appname have their own store, login should check -->
                <service-call  name="growerp.100.PartyServices100.verifyAndGet#ProductStore"
                    in-map="[companyPartyId: companyPartyId, classificationId: classificationId]"/>
                <!-- set company in as ACTIVE_ORGANIZATION UserPreference -->
                <service-call name="create#moqui.security.UserPreference"
                    in-map="[userId: userAccount.userId, preferenceKey: 'ACTIVE_ORGANIZATION',
                     preferenceValue: companyPartyId]" />
                <!--send email -->
                <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" async="true">
                    <field-map field-name="emailTemplateId" value="WELCOME" />
                    <field-map field-name="toAddresses" from="emailAddress" />
                    <field-map field-name="bodyParameters" 
                        from="[classification: classificationId.substring(3),
                            newPassword:newPassword]" />
                </service-call>
                <!-- attach the user as an employee to the organization-->
                <service-call name="create#mantle.party.PartyRelationship"
                    in-map="[fromPartyId: userPartyId, fromRoleTypeId: 'Employee',
                        relationshipTypeEnumId: 'PrtEmployee', fromDate: fromDate,
                        toPartyId: companyPartyId, toRoleTypeId: 'OrgInternal']" />
                <!-- set party ownership -->
                <entity-find-one entity-name="mantle.party.Party" value-field="userParty"
                        for-update="true">
                    <field-map field-name="partyId" from="userPartyId"/></entity-find-one>
                <set field="userParty.ownerPartyId" from="companyPartyId"/>
                <entity-update value-field="userParty"/>
                <!-- set company ownership (Own itself)-->
                <entity-find-one entity-name="mantle.party.Party"
                        value-field="companyParty" for-update="true">
                    <field-map field-name="partyId" from="companyPartyId"/></entity-find-one>
                <set field="companyParty.ownerPartyId" from="companyPartyId"/>
                <entity-update value-field="companyParty"/>
                <!-- load demo data -->
                <script>ec.user.loginUser(username, newPassword)</script>
                <service-call name="growerp.100.PartyServices100.load#DefaultData"
                    include-user-login="true"  async="true"
                    in-map="[companyPartyId: companyPartyId,
                             currencyId: currencyId,
                             classificationId: classificationId,
                             userPartyId: userAccount.partyId]"/>
                <!-- return company Data -->
                <service-call name="growerp.100.PartyServices100.get#Company"
                    out-map="context"/>
                <!-- return user data -->
                <service-call name="growerp.100.PartyServices100.get#User"
                    in-map="userPartyId: userPartyId" out-map="context"/>
                </if>
        </actions>
    </service>
    <service verb="verifyAndGet" noun="ProductStore">
        <in-parameters>
            <parameter name="companyPartyId" required="true"/>
            <parameter name="classificationId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="productStore"/>
        </out-parameters>
        <actions>
            <!-- get productStore with classification(appname) -->
            <entity-find entity-name="mantle.product.store.ProductStore" list="stores">
                <econdition field-name="organizationPartyId" from="companyPartyId"/>
                <econdition field-name="storeName" from="classificationId"/>
            </entity-find>
            <if condition="stores">
                <set field="productStore" from="stores[0]"/>
                <return/>
            </if>
            <!-- create inventory facility if not there yet-->
            <entity-find entity-name="mantle.facility.Facility" list="facilities">
                <econdition field-name="ownerPartyId" from="companyPartyId"/>
            </entity-find>
            <if condition="facilities">
                <set field="facilityId" from="facilities[0].facilityId"/>
                <else>
                    <service-call name="create#mantle.facility.Facility"
                    in-map="[ownerPartyId: companyPartyId, facilityTypeEnumId: 'FcTpWarehouse',
                        facilityName: 'Inventory', assetAllowOtherOwner: 'N']"
                    out-map="context"/>
                </else>
            </if>
            <!-- create map for productStore -->
            <set field="inMap" from="[
                organizationPartyId: companyPartyId,
                storeName: classificationId,
                inventoryFacilityId: facilityId,
                ]"/>
            <if condition="classificationId == 'AppAdmin'">
                <set field="inMap" from="inMap + [
                requireInventory: 'N',
                reservationOrderEnumId:'AsResOrdNoRes',
                ]"/>
            </if>
            <if condition="classificationId == 'AppHotel'">
                <set field="inMap" from="inMap + [
                requireInventory: 'N',
                reservationOrderEnumId:'AsResOrdNoRes',
                ]"/>
            </if>
            <!-- create productStore -->
            <service-call name="create#mantle.product.store.ProductStore"
                out-map="context" in-map="inMap" />
            <!-- create root category if required -->
            <entity-find list="catgs"
                entity-name="mantle.product.category.ProductCategory">
                <econdition field-name="ownerPartyId" from="companyPartyId"/>
                <econdition field-name="productCategoryTypeEnumId" value="PctRoot"/>
            </entity-find>
            <if condition="catgs">
                <set field="productCategoryId" from="catgs[0].productCategoryId"/>
                <else>
                    <service-call name="create#mantle.product.category.ProductCategory" out-map="context" 
                        in-map="[ownerPartyId: companyPartyId, productCategoryTypeEnumId: 'PctRoot',
                            categoryName: 'Root category for: ' + classificationId]" />
                </else>
            </if>
            <!-- connect to productstore -->
            <service-call name="create#mantle.product.store.ProductStoreCategory" 
                in-map="[productCategoryId: productCategoryId,
                    storeCategoryTypeEnumId: 'PsctBrowseRoot',
                    productStoreId: productStoreId,
                    fromDate: fromDate]" />
            <entity-find entity-name="mantle.product.store.ProductStore" list="stores">
                <econdition field-name="organizationPartyId" from="companyPartyId"/>
                <econdition field-name="storeName" from="classificationId"/>
            </entity-find>
            <set field="productStore" from="stores[0]"/>
        </actions>
    </service>

    <!--internal service used in register to run async-->
    <service verb="load" noun="DefaultData" authenticate="anonymous-all" transaction-timeout="3600">
        <!-- not reachable outside -->
        <in-parameters>
            <parameter name="companyPartyId" required="true"/>
            <parameter name="userPartyId" required="true"/>
            <parameter name="currencyId"/>
            <parameter name="classificationId"/>
            <parameter name="counterMax" default="1" type="Integer"/>
        </in-parameters>
        <actions>
            <script>sleep(3000)</script><!-- wait for registration above to commit -->
            <entity-find entity-name="mantle.product.category.ProductCategory" list="rootList">
                <econdition field-name="productCategoryTypeEnumId" value="PctRoot"/>
                <econdition field-name="ownerPartyId" from="companyPartyId"/></entity-find>
            <if condition="!rootList">
                <return error="true" message="Root category not found for companyId: $companyPartyId"/></if>
            <set field="rootProductCategoryId" from="rootList[0].productCategoryId"/>

            <set field="companyCount" from="companyPartyId.substring(3,6)"/>
           
            <set field="users" from= "[
                [ firstName: 'James-a', lastName: 'Smith', emailAddress: 'james@example.com',
                    locale: 'EN', username: 'james', userGroupId: 'GROWERP_M_ADMIN' ,
                    image: 'demoFaces/1_m.jpg'],
                [ firstName: 'John-e', lastName: 'Williams', emailAddress: 'john@example.com',
                    locale: 'EN', username: 'john', userGroupId: 'GROWERP_M_EMPLOYEE',
                    image: 'demoFaces/2_m.jpg' ],
                [ firstName: 'Robert-c', lastName: 'Johnson', emailAddress: 'robert@example.com',
                    locale: 'EN', username: 'robert', userGroupId: 'GROWERP_M_CUSTOMER',
                    image: 'demoFaces/3_m.jpg', companyName: 'Trust Fund-c'],
                [ firstName: 'Michael-l', lastName: 'Brown', emailAddress: 'michael@example.com',
                    locale: 'EN', username: 'michael', userGroupId: 'GROWERP_M_LEAD',
                    image: 'demoFaces/4_m.jpg', companyName: 'Academic Advantage-l'],
                [ firstName: 'William-s', lastName: 'Jones', emailAddress: 'william@example.com',
                    locale: 'EN', username: 'william', userGroupId: 'GROWERP_M_SUPPLIER',
                    image: 'demoFaces/5_m.jpg', companyName: 'Gables Tutoring And Test Prep-s'],

                [ firstName: 'David-a', lastName: 'Miller', emailAddress: 'david@example.com',
                    locale: 'EN', username: 'david', userGroupId: 'GROWERP_M_ADMIN',
                    image: 'demoFaces/6_m.jpg'],
                [ firstName: 'Mary-e', lastName: 'Davis', emailAddress: 'Mary@example.com',
                    locale: 'EN', username: 'mary', userGroupId: 'GROWERP_M_EMPLOYEE',
                    image: 'demoFaces/1_f.jpg' ],
                [ firstName: 'Linda-c', lastName: 'Garcia', emailAddress: 'linda@example.com',
                    locale: 'EN', username: 'linda', userGroupId: 'GROWERP_M_CUSTOMER',
                    image: 'demoFaces/2_f.jpg', companyName: 'Miami Learning Center-c'],
                [ firstName: 'Barbara-l', lastName: 'Rodriguez', emailAddress: 'Barbara@example.com',
                    locale: 'EN', username: 'Barbara', userGroupId: 'GROWERP_M_LEAD',
                    image: 'demoFaces/3_f.jpg', companyName: 'TestMasters-l'],
                [ firstName: 'Maria-s', lastName: 'Wilson', emailAddress: 'maria@example.com',
                    locale: 'EN', username: 'maria', userGroupId: 'GROWERP_M_SUPPLIER',
                    image: 'demoFaces/4_f.jpg', companyName: 'Wavelength Suppliers-s'],
            ]"/>

            <set field="opportunities" from="[
                [ opportunityName: 'The best opportunity', description: 'the best oppr description',
                    nextStep: 'not sure yet', estAmount: 1000, estProbability: 33,
                    opportunityStageId: 'Prospecting'],
                [ opportunityName: 'The second best opportunity', description: 'the secondbest oppr description',
                    nextStep: 'not sure yet', estAmount: 5000, estProbability: 66,
                    opportunityStageId: 'Proposal']
            ]"/>

            <set field="nowDate" from="ec.user.nowTimestamp"/>
            <set field="counter" value="0" type="Integer"/>
            <while condition="counter++ &lt; counterMax">

                <!-- products and categories -->
                <!-- products  -->
                <set field="productsAdmin" from="[
                    [ productName: 'cola', description:'The traditional american drink', price: 1.4, image: 'cola', categoryName: 'drinks'],
                    [ productName: 'wiskey', description:'Yes, from Scotland', price: 5.21, image: 'wiskey', categoryName: 'drinks'],
                    [ productName: 'macaroni', description:'yes from Italy', price: 8.40, image: 'macaroni', categoryName: 'Food'],
                    [ productName: 'hamburger', description:'Another US special', price: 6.50, image: 'hamburger', categoryName: 'Food']
                ]"/>    

                <set field="productsHotel" from="[
                    [ productName: 'Single Room', description:'The Single bed room',
                        productTypeId: 'PtAssetUse', assetClassId: 'AsClsRoom', assetTypeId: 'AstTpFixed',
                        price: 50, image: 'demoRooms/room1', categoryName: 'rooms'],
                    [ productName: 'Standard Room', description:'The Standard room',
                        productTypeId: 'PtAssetUse', assetClassId: 'AsClsRoom', assetTypeId: 'AstTpFixed',
                        price: 80, image: 'demoRooms/room2', categoryName: 'rooms'],
                    [ productName: 'Deluxe Room', description:'The Deluxe room offering',
                        productTypeId: 'PtAssetUse', assetClassId: 'AsClsRoom', assetTypeId: 'AstTpFixed',
                        price: 170, image: 'demoRooms/room3', categoryName: 'rooms'],
                    [ productName: 'Suite', description:'The Suite',
                        productTypeId: 'PtAssetUse', assetClassId: 'AsClsRoom', assetTypeId: 'AstTpFixed',
                        price: 360, image: 'demoRooms/room4', categoryName: 'rooms'],
                    [ productName: 'Appartment', description:'The living,  two bedroom appartment',
                        productTypeId: 'PtAssetUse', assetClassId: 'AsClsRoom', assetTypeId: 'AstTpFixed',
                        price: 460, image: 'demoRooms/room5', categoryName: 'rooms'],
                ]"/>  
                <if condition="classificationId == 'AppAdmin'"><set field="productsIn" from="productsAdmin"/></if>
                <if condition="classificationId == 'AppHotel'"><set field="productsIn" from="productsHotel"/></if>
                <!-- for hotel just create a one count list -->
                <if condition="classificationId == 'AppAdmin' || (classificationId == 'AppHotel' &amp;&amp; counter == 1)">
                    <iterate list="productsIn" entry="el">
                        <entity-find entity-name="mantle.product.category.ProductCategory" list="categories">
                            <econdition field-name="categoryName" from="el.categoryName + counter"/>
                            <econdition field-name="ownerPartyId" from="companyPartyId"/>
                        </entity-find>
                        <if condition="categories">
                            <set field="productCategoryId" from="categories[0].productCategoryId"/>
                            <else>
                                <service-call name="create#mantle.product.category.ProductCategory"
                                    in-map="[categoryName: el.categoryName + (classificationId != 'AppHotel'? counter : ''),
                                        description: el.categoryName,
                                        productCategoryTypeEnumId: 'PctCatalog',
                                        ownerPartyId: companyPartyId]"
                                    out-map="context"/>
                                <service-call 
                                    name="create#mantle.product.category.ProductCategoryRollup"
                                    in-map="[parentProductCategoryId: rootProductCategoryId,
                                            productCategoryId: productCategoryId]"/>
                                <service-call name="create#ProductCategoryContent" in-map="[
                                    productCategoryId: productCategoryId,
                                    categoryContentTypeEnumId: 'PcctImageThumbNail',
                                    contentLocation: 'dbresource://GrowERP/images/' +
                                        el.image + 'Small.png']" />
                                <service-call name="create#ProductCategoryContent" in-map="[
                                    productCategoryId: productCategoryId,
                                    categoryContentTypeEnumId: 'PcctImageMedium',
                                    contentLocation: 'dbresource://GrowERP/images/' +
                                        el.image + 'Medium.png']" />
                            </else>
                        </if>
                        <service-call name="create#mantle.product.Product" in-map="[
                            productTypeEnumId: el.productTypeId,
                            assetClassEnumId: el.assetClassId,
                            assetTypeEnumId: el.assetTypeId,
                            productName: el.productName + (classificationId != 'AppHotel'? counter : ''),
                            description: el.description,
                            ownerPartyId: companyPartyId,
                            ]" out-map="context" />
                        <service-call
                            name="create#mantle.product.category.ProductCategoryMember"
                            in-map="[productId: productId, productCategoryId: productCategoryId, fromDate: fromDate]"/>
                        <service-call name="create#mantle.product.ProductPrice"
                            in-map="[productId: productId, priceTypeEnumId: 'PptList',
                            priceUomId: currencyId, price: el.price,
                            fromDate: ec.user.nowTimestamp,
                            pricePurposeEnumId: 'PppPurchase']"/>
                        <service-call name="create#ProductContent" in-map="[
                            productId: productId,
                            productContentTypeEnumId: 'PcntImageSmall',
                            contentLocation: 'dbresource://GrowERP/images/' +
                                el.image + 'Small.png']" />
                        <service-call name="create#ProductContent" in-map="[
                            productId: productId,
                            productContentTypeEnumId: 'PcntImageMedium',
                            contentLocation: 'dbresource://GrowERP/images/' +
                                el.image + 'Medium.png']" />
                    </iterate>

                    <!-- assets -->
                    <entity-find entity-name="mantle.product.store.ProductStore" list="stores">
                        <econdition field-name="organizationPartyId" from="companyPartyId"/>
                        <econdition field-name="storeName" from="classificationId"/>
                    </entity-find>
                    <set field="assetsHotel" from="[
                        [ assetName: '01', productName: 'Single Room'],
                        [ assetName: '02', productName: 'Single Room'],
                        [ assetName: '03', productName: 'Single Room'],
                        [ assetName: '04', productName: 'Standard Room'],                
                        [ assetName: '05', productName: 'Standard Room'],                
                        [ assetName: '06', productName: 'Standard Room'],                
                        [ assetName: '07', productName: 'Deluxe Room'],                
                        [ assetName: '08', productName: 'Deluxe Room'],                
                        [ assetName: '09', productName: 'Suite'],                
                        [ assetName: '10', productName: 'Suite'],                
                        [ assetName: '11', productName: 'Appartment'],                
                        ]"/>
                    <if condition="classificationId == 'AppHotel'"><set field="assetsIn" from="assetsHotel"/></if>

                    <iterate list="assetsIn" entry="asset">
                        <entity-find entity-name="mantle.product.Product" list="products">
                            <econdition field-name="ownerPartyId" from="companyPartyId"/>
                            <econdition field-name="productName" from="asset.productName"/>
                        </entity-find>
                        <if condition="products">
                            <set field="product" from="products[0]"/>
                            <else>
                                <return error="false"
                                    message="Could not find product: ${asset.productName} on asset: ${asset.assetName}"/>
                            </else>
                        </if>
                        <!-- do not put fixed asset in inventory so normal reserve process does not work -->
                        <service-call name="create#mantle.product.asset.Asset" in-map="
                            productId: product.productId,
                            classEnumId: product.assetClassEnumId,
                            assetTypeEnumId: product.assetTypeEnumId,
                            assetName: asset.assetName,
                            ownerPartyId: companyPartyId,
                            statusId: 'AstAvailable',
                            "/>
                    </iterate>
                </if>

                <!-- users -->
                <iterate list="users" entry="us">
                    <set field="userIn" from="groovy.json.JsonOutput.toJson([user:[
                        firstName: us.firstName,
                        lastName: us.lastName + counter,
                        email: us.emailAddress.substring(0,us.emailAddress.indexOf('@')) + counter + companyCount + us.emailAddress.substring(us.emailAddress.indexOf('@')),
                        locale: 'EN',
                        username: us.username + counter + companyCount,
                        userGroupId: us.userGroupId, companyName: us.companyName
                    ]])"/>
                    <service-call name="growerp.100.PartyServices100.create#User"
                            in-map="[user: userIn]" out-map="context"/>
                </iterate>

                <!-- opportunities -->
                <set field="index" value="0" type="Integer"/>
                <iterate list="opportunities" entry="opp">
                    <set field="oppIn" from="groovy.json.JsonOutput.toJson([opportunity:[
                        opportunityName: opp.opportunityName,
                        description: opp.description,
                        nextStep: opp.nextStep,
                        estAmount: opp.estAmount,
                        estProbability: opp.estProbability,
                        opportunityStageId: opp.opportunityStageId,
                        ownerPartyId: companyPartyId,
                        accountPartyId: index%2 == 0? userPartyId: employeeUser1,
                        leadPartyId: index%2 == 0 ? leadUser1 : leadUser2
                    ]])"/>
                    <service-call name="growerp.100.CrmServices100.create#Opportunity"
                                    in-map="[opportunity: oppIn]" out-map="context"/>
                    <set field="index" from="index + 1"/>
                </iterate>

                <!-- orders -->
                <set field="ordersAdmin" from="[
                    [ quantity: 5, price: 22.1, orderName: 'first generated order', productName: 'cola'],
                    [ quantity: 2, price: 20.1, orderName: 'first generated order', productName: 'wiskey'],
                    [ quantity: 4, price: 29.11, orderName: 'first generated order', productName: 'macaroni'],
                    [ quantity: 3, price: 12.1, orderName: 'second generated order', productName: 'hamburger'],
                    [ quantity: 4, price: 10.1, orderName: 'second generated order', productName: 'macaroni'],
                    [ quantity: 5, price: 19.11, orderName: 'second generated order', productName: 'wiskey']
                    ]"/>
                <!-- set time at mid day noon -->
                <set field="nowDate" from="ec.user.nowTimestamp"/>
                <set field="nowDate" from="ec.l10n.parseTimestamp(ec.l10n.format(nowDate, 'yyyy-MM-dd') + ' 12:00:00.000', 'yyyy-MM-dd HH:mm:ss.SSS')"/>
                <set field="ordersHotel" from="[
                    [ productName: 'Single Room', quantity: 1,
                        rentalFromDate: nowDate.plus(5), 
                        rentalThruDate: nowDate.plus(8), 
                        price: 90, orderName: 'first generated Hotel order'],
                    [ productName: 'Single Room', quantity: 2,
                        rentalFromDate: nowDate.plus(15),
                        rentalThruDate: nowDate.plus(19), 
                        orderName: 'second generated Hotel order'],                    
                    [ productName: 'Single Room', quantity: 1,
                        rentalFromDate: nowDate.plus(17), quantity: 1,
                        rentalThruDate: nowDate.plus(18), 
                        price: 110, orderName: 'third generated Hotel order'],
                    [ productName: 'Deluxe Room', quantity: 1,
                        rentalFromDate: nowDate.plus(20), quantity: 1,
                        rentalThruDate: nowDate.plus(21), 
                        price: 77, orderName: 'fourth generated Hotel order'],
                    [ productName: 'Deluxe Room', quantity: 1, 
                        rentalFromDate: nowDate.plus(17), quantity: 1,
                        rentalThruDate: nowDate.plus(18), 
                            orderName: 'fifth generated Hotel order'],
                    [ productName: 'Suite', quantity: 1,
                        rentalFromDate: nowDate.plus(28), quantity: 1,
                        rentalThruDate: nowDate.plus(31), 
                        orderName: 'fifth generated Hotel order']
                    ]"/>
    
                <if condition="classificationId == 'AppAdmin'"><set field="ordersIn" from="ordersAdmin"/></if>
                <if condition="classificationId == 'AppHotel'"><set field="ordersIn" from="ordersHotel"/></if>
                <entity-find entity-name="mantle.party.PartyDetailAndRole" list="customers">
                    <econdition field-name="ownerPartyId" from="companyPartyId"/>
                    <econdition field-name="roleTypeId" value="Customer"/>
                </entity-find>
                <entity-find entity-name="mantle.party.PartyDetailAndRole" list="suppliers">
                    <econdition field-name="ownerPartyId" from="companyPartyId"/>
                    <econdition field-name="roleTypeId" value="Supplier"/>
                </entity-find>
                <entity-find-one entity-name="mantle.ledger.config.PartyAcctgPreference"
                        value-field="aPref">
                    <field-map field-name="organizationPartyId" from="companyPartyId"/>
                </entity-find-one>
                <set field="index" type="Integer" value="0"/>
                <iterate list="ordersIn" entry="order">
                    <entity-find entity-name="mantle.order.OrderHeader" list="orders">
                        <econdition field-name="orderName" from="order.orderName"/>
                    </entity-find>
                    <if condition="orders">
                        <set field="orderId" from="orders.orderId"/>
                        <else>
                            <service-call name="mantle.order.OrderServices.create#Order"
                            in-map="[
                                statusId: 'OrderOpen',
                                currencyUomId: aPref.baseCurrencyUomId,
                                productStoreId: stores[0].productStoreId,
                                placedDate: ec.user.nowTimestamp,
                                customerPartyId: customers[index%2].partyId,
                                vendorPartyId: companyPartyId,
                            ]" out-map="context"/>
                        </else>
                    </if>
                    <log message="====looking for productname: ${order.productName}"/>
                    <entity-find entity-name="growerp.mobile.product.ProductAndPriceAndProductCategory" list="products">
                        <econdition field-name="ownerPartyId" from="companyPartyId"/>
                        <econdition field-name="productName" operator="like" value="${order.productName}%"/>
                    </entity-find>
                    <if condition="products">
                        <log message="=====adding productId: ${products[0].productId} ${products[0].productName}"/>
                        <else>
                            <log message="====could not find product: ${order.productName}"/>
                        </else>
                    </if>
                    <service-call
                        name="mantle.order.OrderServices.add#OrderProductQuantity"
                        in-map="context + [productId: products[0].productId,
                                            itemTypeEnumId: 'ItemRental',
                                            description: order.productName,
                                            unitAmount: order.price ?: products[0].price,
                                            requiredByDate: order.reservationDate,
                                            quantity: order.quantity]"
                        out-map="context"/>
                    <while condition="order.quantity--">
                        <service-call name="create#growerp.product.AssetRental"
                            in-map="[ productId: products[0].productId,
                            orderId: orderId, orderItemSeqId: orderItemSeqId,
                            rentalFromDate: order.rentalFromDate, rentalThruDate: order.rentalThruDate
                            ]"
                        />
                    </while>
                    <set field="index" from="index + 1"/>
                </iterate>

            </while>
            <!--if condition="environment != 'production'"-->
        </actions>
    </service>

</services>