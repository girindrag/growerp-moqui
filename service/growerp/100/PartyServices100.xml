<?xml version="1.0" encoding="UTF-8" ?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domaicrn Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <service verb="check" noun="Company">
        <in-parameters><parameter name="partyId" required="true"/></in-parameters>
        <out-parameters><parameter name="ok"/></out-parameters>
        <actions>
            <entity-find entity-name="growerp.mobile.CompanyPersonAndLoginGroup"
                    list="parties">
                <econdition field-name="companyPartyId" from="partyId"/>
            </entity-find>
            <if condition="parties">
                <set field="ok" value="ok"/></if>
        </actions>
    </service>

    <service verb="get" noun="Companies">
        <in-parameters>
            <parameter name="partyClassificationId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="companies"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="growerp.mobile.party.CompanyPreferenceAndClassification" list="parties">
                <econdition field-name="partyClassificationId" ignore-if-empty="true"/>
                <econditions combine="or">
                    <econdition field-name="disabled" operator="not-equals" value="Y"/>
                    <econdition field-name="disabled" operator="is-null"/>
                </econditions>
            </entity-find>
            <set field="companies" from="[]" />
            <iterate list="parties" entry="party">
                <service-call name="growerp.100.PartyServices100.get#Company" out-map="context"
                    in-map="[companyPartyId: party.partyId, contentTypeId: 'PcntImageSmall']"/>
                <script>companies.add(company)</script>
            </iterate>
        </actions>
    </service>

    <service verb="get" noun="Company">
        <in-parameters>
            <parameter name="companyPartyId"/>
            <parameter name="contentTypeId" default-value="PcntImageMedium"/>
        </in-parameters>
        <out-parameters>
            <parameter name="company" type="Map"/>
        </out-parameters>
        <actions>
            <if condition="!companyPartyId &amp;&amp; ec.user &amp;&amp; ec.user.userAccount?.partyId">
                <service-call name="growerp.100.GeneralServices100.get#RelatedCompanyPartyId" out-map="context"/>
                <set field="companyPartyId" from="ownerPartyId"/>
            </if>
            <if condition="!companyPartyId"><return/></if><!-- return null if no company found -->
            <entity-find-one entity-name="growerp.mobile.party.CompanyPreferenceAndClassification" value-field="org">
                <field-map field-name="partyId" from="companyPartyId"/></entity-find-one>
            <if condition="!org"><return error="true" message="Company ${companyPartyId} not found!"/></if>
            <service-call name="mantle.party.ContactServices.get#PrimaryEmailAddress"
                in-map="[partyId: companyPartyId]" out-map="context"/>
            <entity-find entity-name="mantle.party.PartyContent" list="contents">
                <econdition field-name="partyId" from="companyPartyId"/>
                <econdition field-name="partyContentTypeEnumId" from="contentTypeId"/>
            </entity-find>
            <if condition="contents">
                <service-call name="growerp.100.ImageServices100.download#Image"
                    in-map="[contentLocation: contents[0].contentLocation]" out-map="context"/>
            </if>
            <set field="company" from="[
                partyId: companyPartyId,
                name: org.organizationName,
                classificationId: org.partyClassificationId,
                classificationDescr: org.description,
                email: emailAddress,
                currencyId: org.baseCurrencyUomId,
                image: imageFile
                ]"/>
        </actions>
    </service>

    <service verb="update" noun="Company">
        <description>
            update company information
        </description>
        <in-parameters>
            <parameter name="company"/>
            <parameter name="base64"/>
        </in-parameters>
        <out-parameters>
            <parameter name="company" type="Map"/>
        </out-parameters>
        <actions>
            <script> // convert JSON data
                import groovy.json.JsonSlurper
                JsonSlurper slurper = new JsonSlurper()
                Object compIn = new JsonSlurper().parseText(company).company
            </script>
            <!-- check access user belongs to this company override companyPartyId-->
            <service-call name="growerp.100.GeneralServices100.get#RelatedCompanyPartyId"
                out-map="context"/>
            <set field="compIn.partyId" from="ownerPartyId"/>
            <!-- get old values -->
            <service-call name="growerp.100.PartyServices100.get#Company" out-map="oldValue"/>
            <!-- update name -->
            <if condition="compIn.name &amp;&amp; oldValue.company.name !=  compIn.name">
                <service-call name="update#mantle.party.Organization"
                    in-map="[partyId: oldValue.company.partyId, organizationName: compIn.name]"/>
            </if>
            <!-- update email -->
            <if condition="compIn.email &amp;&amp; compIn.email != oldValue.company.email">
                <entity-find entity-name="mantle.party.contact.PartyContactMech" for-update="true" list="partyContactMechs" >
                    <econdition field-name="partyId" from="oldValue.company.partyId"/>
                    <econdition field-name="contactMechPurposeId" value="EmailPrimary"/><date-filter/></entity-find>
                <if condition="partyContactMechs">
                    <set field="partyContactMechs[0].thruDate" from="ec.user.nowTimestamp"/>
                    <entity-update value-field="partyContactMechs[0]"/> </if>
                <service-call name="mantle.party.ContactServices.create#EmailAddress"
                    in-map="[partyId: oldValue.company.partyId, contactMechPurposeId: 'EmailPrimary', emailAddress: compIn.email]"/>
            </if>
            <!-- update currency -->
            <entity-find-one entity-name="mantle.ledger.config.PartyAcctgPreference" value-field="pref" for-update="true">
                <field-map field-name="organizationPartyId" from="compIn.partyId"/>
            </entity-find-one>
            <if condition="pref.baseCurrencyUomId != compIn.currencyId">
                <set field="pref.baseCurrencyUomId" from="compIn.currencyId"/>
                <entity-update value-field="pref" />
            </if>
            <!-- update image -->
            <if condition="base64">
                <service-call name="growerp.100.ImageServices100.upload#Image"
                    in-map="[type: 'user', id: compIn.partyId, base64: base64]"/>
            </if>
            <service-call name="growerp.100.PartyServices100.get#Company" out-map="context"/>
        </actions>
    </service>

    <service verb="get" noun="User">
        <description>
            Get all users of the company or usergroup they belong to(with partyId just a single party with PartyId)
        </description>
        <in-parameters>
            <parameter name="userPartyId"/><!-- if present select a single user, else a list -->
            <parameter name="userGroupId"/><!-- if present select user from particular groups-->
            <parameter name="start" type="Integer" default-value="0"/>
            <parameter name="limit" type="Integer" default-value="20"/>
        </in-parameters>
        <out-parameters>
            <parameter name="users" type="List"/>
            <parameter name="user" type="Map"/>
        </out-parameters>
        <actions>
            <log message="====getusers groupId: $userGroupId start: $start limit: $limit"/>
            <service-call name="growerp.100.GeneralServices100.get#RelatedCompanyPartyId" 
                    out-map="company"/>
            <entity-find entity-name="growerp.mobile.CompanyPersonAndLoginGroup"  list="userInfos"
                    offset="start" limit="limit" >
                <econdition field-name="ownerPartyId" from="company.partyId"/>
                <econdition field-name="userPartyId" from="userPartyId" ignore-if-empty="true"/>
                <econdition field-name="userGroupId" from="userGroupId" ignore-if-empty="true"/>
                <order-by field-name="lastName"/><order-by field-name="firstName"/>
            </entity-find>
            <if condition="!userPartyId"><set field="users" from="[]"/></if>
            <iterate entry="userInfo" list="userInfos">
                <entity-find entity-name="mantle.party.PartyContent" list="contents">
                    <econdition field-name="partyId" from="userInfo.userPartyId"/>
                    <econdition field-name="partyContentTypeEnumId" 
                        from="userPartyId? 'PcntImageMedium' : 'PcntImageSmall'" />
                </entity-find>
                <if condition="contents">    
                    <service-call name="growerp.100.ImageServices100.download#Image"
                        in-map="[contentLocation: contents[0].contentLocation]" out-map="context"/></if>
                <set field="userOut" from="[
                    partyId: userInfo?.userPartyId,
                    email: userInfo?.emailAddress,
                    name: userInfo?.username,
                    firstName: userInfo?.firstName,
                    lastName: userInfo?.lastName,
                    userGroupId: userInfo.userGroupId,
                    groupDescription: userInfo?.description,
                    language: userInfo?.locale.toString(),
                    image: imageFile]"/>

                <if condition="!userPartyId">
                    <script>users.add(userOut)</script>
                    <else>
                        <set field="user1" from="[
                            userId: userInfo?.userId,
                            userGroupId: userInfo?.userGroupId,
                            locale: userInfo?.locale,
                            externalId: userInfo?.externalId]"/>
                        <set field="user" from="userOut"/>
                        <script>user.putAll(user1)</script>
                    </else>
                </if>
            </iterate>
            <if condition="users &amp;&amp; !userPartyId">
                <log message="====getusers=result: ${users.size()}"/>
                <script>users.sort{a, b -> 
                    a.lastName.compareToIgnoreCase(b.lastName) } </script>
            </if>
        </actions>
    </service>

    <service verb="create" noun="User">
        <description>
            add a new user on the same company as the logged in user
        </description>
        <in-parameters>
            <parameter name="user"/>
        </in-parameters>
        <out-parameters>
            <parameter name="user"/>
        </out-parameters>
        <actions>
            <script> // convert JSON data
                Object userIn = new groovy.json.JsonSlurper().parseText(user).user
            </script>
            <service-call name="growerp.100.PartyServices100.get#Company" out-map="compOut"/>
            <service-call name="growerp.100.PartyServices100.register#UserAndCompany"
                out-map="regOut"
                in-map="[
                    firstName: userIn.firstName,
                    lastName: userIn.lastName,
                    emailAddress: userIn.email,
                    locale: userIn.locale,
                    username: userIn.name,
                    externalId: userIn.externalid,
                    userGroupId: userIn.userGroupId,
                    companyPartyId: compOut.company.partyId]"/>
            <service-call name="growerp.100.PartyServices100.get#User"
                in-map="[userPartyId: regOut.user.partyId]"
                out-map="context"/>
        </actions>
    </service>

    <service verb="update" noun="User">
        <description>
            update user information
        </description>
        <in-parameters>
            <parameter name="user"/>
            <parameter name="base64"/>
        </in-parameters>
        <out-parameters>
            <parameter name="user"/>
        </out-parameters>
        <actions>
            <script> // convert JSON data
                Object userIn = new groovy.json.JsonSlurper().parseText(user).user
            </script>
            <service-call name="growerp.100.PartyServices100.get#User"
                in-map="[userPartyId: userIn.partyId]" out-map="oldValue"/>
            <service-call name="update#mantle.party.Person" 
                in-map="[   partyId: userIn.partyId, 
                            firstName: userIn.firstName ? userIn.firstName : oldValue.user.firstName, 
                            lastName: userIn.lastName ? userIn.lastName : oldValue.user.lastName]"/>
            <service-call name="mantle.party.PartyServices.update#PartyUserAccount"
                in-map="[   partyId: userIn.partyId, 
                            emailAddress: userIn.email ? userIn.email : oldValue.user.email,
                            username: userIn.name? userIn.name : oldValue.user.name,
                            locale: language
                        ]"/>
            <!--update user group -->
            <if condition="!userIn.userGroupId">
                <return error="true" message="userGroupId not supplied to update user"/></if>
            <if condition="userIn.userGroupId != oldValue.user.userGroupId">
                <if condition="oldValue.user.userGroupid == 'GROWERP_M_ADMIN'">
                    <!-- check if only a single admin: cannot change -->
                    <service-call name="growerp.100.GeneralServices100.get#RelatedCompanyPartyId" 
                        in-map="[userPartyId: userIn.partyId]" out-map="company"/>
                    <entity-find entity-name="growerp.mobile.CompanyPersonAndLoginGroup" list="admins">
                        <econdition field-name="userGroupId" value="GROWERP_M_ADMIN"/>
                        <econdition field-name="companyPartyId" from="company.partyId" />
                        <date-filter/></entity-find>
                    <if condition="admins.size() == 1">
                        <return error="true" message="You need at least a single Admin in your company: cannot remove this one!"/></if>
                </if>
                <entity-find entity-name="moqui.security.UserGroupMember" list="groupMembers" for-update="true">
                    <econdition field-name="userGroupId" from="oldValue.user.userGroupId"/>
                    <econdition field-name="userId" from="oldValue.user.userId"/>
                </entity-find>
                <set field="groupMembers[0].thruDate" from="ec.user.nowTimestamp"/>
                <entity-update value-field="groupMembers[0]"/>
                <service-call name="create#moqui.security.UserGroupMember"
                    in-map="[userGroupId: userIn.userGroupId, userId: oldValue.user.userId, fromDate: ec.user.nowTimestamp]"/>
            </if>    
            <!-- update external id for customer indentification -->
            <entity-find-one value-field="party" entity-name="mantle.party.Party" for-update="true">
                <field-map field-name="partyId" from="userIn.partyId"/></entity-find-one>
            <if condition="userIn.externalId != party.externalId">
                <set field="party.externalId" from="userIn.externalId"/>
                <entity-update value-field="party"/></if>
            <!-- update image -->
            <if condition="base64">
                <service-call name="growerp.100.ImageServices100.upload#Image"
                    in-map="[type: 'user', id: userIn.partyId, base64: base64]"/>
            </if>
            <!-- return updated user -->
            <service-call name="growerp.100.PartyServices100.get#User" in-map="[userPartyId: userIn.partyId]" out-map="context"/>
        </actions>
    </service>

    <service verb="delete" noun="User">
        <in-parameters>
            <parameter name="partyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="partyId"/>
        </out-parameters>
        <actions>
            <!-- check if this user has an admin account -->
            <service-call name="growerp.100.PartyServices100.get#User"
                in-map="[userPartyId: partyId]" out-map="oldValue"/>
            <if condition="oldValue.user.userGroupid == 'GROWERP_M_ADMIN'">
                <!-- check if only a single admin: cannot change -->
                <service-call name="growerp.100.GeneralServices100.get#RelatedCompanyPartyId" 
                    in-map="[userPartyId: partyId]" out-map="company"/>
                <entity-find entity-name="growerp.mobile.CompanyPersonAndLoginGroup" list="admins">
                    <econdition field-name="userGroupId" value="GROWERP_M_ADMIN"/>
                    <econdition field-name="companyPartyId" from="company.partyId" />
                    <date-filter/></entity-find>
                <if condition="admins.size() == 1">
                    <return error="true" message="You need at least a single Admin in your company: cannot delete this one!"/></if>
            </if>
            <service-call name="update#mantle.party.Party" in-map="[partyId: partyId, disabled: 'Y']"/>
        </actions>
    </service>

    <service verb="register" noun="UserAndCompany" authenticate="anonymous-all">
        <description>
            registers with a minimal setup for a user with a given group to an existing company or when not provided
            will create an accounting organization with the provided name and currency
        </description>
        <in-parameters>
            <!-- user information -->
            <parameter name="firstName" required="true" />
            <parameter name="middleName" />
            <parameter name="lastName" required="true" />
            <parameter name="emailAddress" required="true">
                <text-email />
            </parameter>
            <parameter name="username" default="emailAddress"/>
            <parameter name="newPassword" default="org.moqui.util.StringUtilities.getRandomString(6) + '9!'" />
            <parameter name="newPasswordVerify" default="newPassword" />
            <parameter name="userGroupId" default-value="GROWERP_M_CUSTOMER"/> <!--securitygroup required for non admin users-->
            <parameter name="locale" />
            <!-- company information -->
            <parameter name="companyPartyId" /> <!-- add users for existing company -->
            <parameter name="companyName"/><!-- can be empty with new user existing company -->
            <parameter name="companyEmailAddress"/>
            <parameter name="currencyId"/>
            <parameter name="classificationId"/> <!-- allocate company to application name -->
            <!-- default setup -->
            <parameter name="environment"/>
            <parameter name="defaultData"/>
        </in-parameters>
        <out-parameters>
            <parameter name="user" />
            <parameter name="company" />
        </out-parameters>
        <actions>
            <service-call name="mantle.party.PartyServices.create#Account" 
                in-map="context + [roleTypeId: 'Employee', loginAfterCreate: false]"
                out-map="userAccount" />
            <set field="fromDate" from="ec.user.nowTimestamp"/>
            <if condition="userAccount.partyId != null">
                <if condition="companyPartyId == null">
                    <service-call name="mantle.party.PartyServices.create#Organization"
                        in-map="context + [roleTypeId: 'OrgInternal',organizationName: companyName]"
                        out-map="company" />
                    <set field="companyPartyId" from="company.partyId" />
                    <service-call name="mantle.party.ContactServices.create#EmailAddress" 
                        in-map="[emailAddress: companyEmailAddress, partyId: companyPartyId,
                            contactMechPurposeId:'EmailPrimary']" out-map="emailOut"/>
                    <service-call name="mantle.ledger.LedgerServices.init#PartyAccountingConfiguration"
                        in-map="[sourcePartyId: 'DefaultSettings',
                                organizationPartyId: companyPartyId, baseCurrencyUomId: currencyId]" />
                    <if condition="!classificationId">
                        <return error="true" message="When creating a new company classificationId is required" /></if>
                    <service-call name="create#mantle.party.PartyClassificationAppl"
                        in-map="[partyId: companyPartyId, partyClassificationId: classificationId]" />
                    <!-- create productStore -->
                    <service-call name="create#mantle.product.store.ProductStore"
                        out-map="context" in-map="[organizationPartyId: companyPartyId,
                            requireInventory: 'N',
                            reservationOrderEnumId:'AsResOrdNoRes',
                            defaultCurrencyUomId: currencyId]" />
                    <entity-find-one entity-name="mantle.party.PartyClassification"
                            value-field="partyClassification">
                        <field-map field-name="partyClassificationId" from="classificationId"/>
                    </entity-find-one>
                    <!-- create root category -->
                    <service-call name="create#mantle.product.category.ProductCategory" out-map="rootCat" 
                        in-map="[ownerPartyId: companyPartyId, productCategoryTypeEnumId: 'PctRoot',
                            categoryName: 'Root category for: ' + partyClassification.description]" />
                    <service-call name="create#mantle.product.store.ProductStoreCategory" 
                        in-map="[productCategoryId: rootCat.productCategoryId,
                            storeCategoryTypeEnumId: 'PsctBrowseRoot',
                            productStoreId: context.productStoreId, fromDate: fromDate]" />
                </if>
                <!-- set company in as ACTIVE_ORGANIZATION UserPreference to be sure only this company can be looked at-->
                <service-call name="create#moqui.security.UserPreference"
                    in-map="[userId: userAccount.userId, preferenceKey: 'ACTIVE_ORGANIZATION',
                     preferenceValue: companyPartyId]" />
                <!-- setup the organization -->
                <!--service-call name="mantle.party.PartyServices.setup#UserOrganizationInfo" /-->
                <entity-find-one entity-name="mantle.party.PartyClassificationAppl"
                         value-field="partyClassificationAppl">
                    <field-map field-name="partyId" from="companyPartyId" />
                </entity-find-one>
                <!--service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" async="true">
                    <field-map field-name="emailTemplateId" value="WELCOME" />
                    <field-map field-name="toAddresses" from="emailAddress" />
                    <field-map field-name="bodyParameters" 
                        from="[classification: partyClassificationAppl.partyClassificationId.substring(3),
                            newPassword:newPassword]" />
                </service-call-->
                <if condition="company">
                    <!-- initial company/user needs login for loading default data (create#user calls this service)-->
                    <!-- add the user as admin -->
                    <script>ec.user.loginUser(username, newPassword)</script>
                    <set field="userGroupId" value="GROWERP_M_ADMIN"/>
                    <service-call name="create#moqui.security.UserGroupMember"
                        in-map="[userGroupId: userGroupId, userId: userAccount.userId]" />
                    <!-- attach the user as an employee to the organization. only when new company-->
                    <service-call name="create#mantle.party.PartyRelationship"
                        in-map="[fromPartyId: userAccount.partyId, fromRoleTypeId: 'Employee',
                            relationshipTypeEnumId: 'PrtEmployee', fromDate: fromDate,
                            toPartyId: companyPartyId, toRoleTypeId: 'OrgInternal']" />
                    <service-call name="growerp.100.PartyServices100.load#DefaultData" in-map="context"/>
                    <service-call name="growerp.100.PartyServices100.get#User"
                        in-map="[userPartyId: userAccount.partyId]"
                        out-map="context"/>
                    <else><!--company already exist add additional users -->
                        <if condition="userGroupId == 'GROWERP_M_EMPLOYEE' || userGroupId == 'GROWERP_M_ADMIN'">
                            <set field="relationshipTypeEnumId" value="PrtEmployee"/>
                            <set field="fromRoleTypeId" value="Employee"/>
                            <else-if condition="userGroupId == 'GROWERP_M_CUSTOMER'">
                                <set field="relationshipTypeEnumId" value="PrtEmployee"/>
                                <set field="fromRoleTypeId" value="Customer"/>
                            </else-if>
                            <else-if condition="userGroupId == 'GROWERP_M_LEAD'">
                                <set field="relationshipTypeEnumId" value="PrtEmployee"/>
                                <set field="fromRoleTypeId" value="Customer"/>
                            </else-if>
                            <else-if condition="userGroupId == 'GROWERP_M_SUPPLIER'">
                                <set field="relationshipTypeEnumId" value="PrtEmployee"/>
                                <set field="fromRoleTypeId" value="Supplier"/>
                            </else-if>
                        </if>
                        <service-call name="create#mantle.party.PartyRelationship"
                                in-map="[fromPartyId: userAccount.partyId, fromRoleTypeId: fromRoleTypeId,
                                    relationshipTypeEnumId: relationshipTypeEnumId, fromDate: fromDate,
                                    toPartyId: companyPartyId, toRoleTypeId: 'OrgInternal']" />
                        <service-call name="create#moqui.security.UserGroupMember"
                            in-map="[userGroupId: userGroupId, userId: userAccount.userId]" />
                    </else>
                </if>
                <!-- set party ownership -->
                <entity-find-one entity-name="mantle.party.Party" value-field="ownerParty">
                    <field-map field-name="partyId" from="userAccount.partyId"/>
                </entity-find-one>
                <set field="ownerParty.ownerPartyId" from="companyPartyId"/>
                <entity-update value-field="ownerParty"/>
                <service-call name="growerp.100.PartyServices100.get#Company"
                    in-map="[companyPartyId: companyPartyId]" out-map="context"/>
                <!-- get#user cannot be used, needs login other data will be supplied by the add/update#user-->
                <entity-find-one entity-name="moqui.security.UserGroup" value-field="userGroup"/>
                <set field="user" from='[partyId: userAccount.partyId, firstName: firstName,
                    lastName: lastName, email: emailAddress, name: username,
                    userId: userAccount.userId, userGroupId: userGroupId,
                    groupDescription: userGroup.description,
                    language: "null"]'/>
            </if>
        </actions>
    </service>
    <!--internal service used in register -->
    <service verb="load" noun="DefaultData" authenticate="anonymous-all" transaction-timeout="3600">
        <!-- not reachable outside -->
        <in-parameters>
            <parameter name="companyPartyId" required="true"/>
            <parameter name="currencyId"/>
            <parameter name="classificationId" />
            <parameter name="environment"/>
            <parameter name="defaultData"/>
        </in-parameters>
        <actions>
            <!--if condition="!defaultData"><return/></if-->
            <!--script> // convert JSON data
                Map data = new groovy.json.JsonSlurper().parseText(defaultData)</script-->

            <log message="loading default data with classificationId $classificationId"/>
            <entity-find entity-name="mantle.product.category.ProductCategory" list="rootList">
                <econdition field-name="productCategoryTypeEnumId" value="PctRoot"/>
                <econdition field-name="ownerPartyId" from="companyPartyId"/></entity-find>
            <if condition="!rootList">
                <return error="true" message="Root cat not found for companyId: $companyId"/></if>
            <set field="rootProductCategoryId" from="rootList[0].productCategoryId"/>

            <!-- structure of data, image should be in dbresource://GrowERP/images/...Medium.jpg-->
            <!-- format of the data should be in the catalog format: 
                https://github.com/growerp/growerp/blob/packages/models/lib/catalog.dart -->
                <set field="product1" from="[ productName: 'cola', description:'description', price: 34, image: 'cola']"/>    
                <set field="product2" from="[ productName: 'wiskey', description:'description', price: 31, image: 'wiskey']"/>    
                <set field="products1" from="[ product1, product2]"/>
                <set field="category1" from="[categoryName: 'drinks', image: 'drinks', image: 'drinks', 
                                            products: products1]"/>    
                <set field="product3" from="[ productName: 'macaroni', description:'description',
                                            price: 12, image: 'macaroni']"/>    
                <set field="product4" from="[ productName: 'hamburger', description:'description', price: 33, image: 'hamburger']"/>    
                <set field="products2" from="[ product3, product4]"/>
                <set field="category2" from="[categoryName: 'food', image: 'drinks', image: 'food',
                                            products: products2]"/>    
                <set field="categories" from="[category1, category2]"/>    

                <set field="users" from="
                [
                    [ firstName: 'Jan', lastName: 'Admin', emailAddress: 'jan1@example.com',
                    locale: 'EN', username: 'jan1', externalId: 'ext',
                    userGroupId: 'GROWERP_M_ADMIN' ],
                    [ firstName: 'Jan', lastName: 'Employee', emailAddress: 'jan2@example.com',
                    locale: 'EN', username: 'jan2', externalId: 'ext',
                    userGroupId: 'GROWERP_M_EMPLOYEE' ],
                    [ firstName: 'Jan', lastName: 'Customer', emailAddress: 'jan3@example.com',
                    locale: 'EN', username: 'jan3', externalId: 'ext',
                    userGroupId: 'GROWERP_M_CUSTOMER' ],
                    [ firstName: 'Jan', lastName: 'lead', emailAddress: 'jan4@example.com',
                    locale: 'EN', username: 'jan4', externalId: 'ext',
                    userGroupId: 'GROWERP_M_LEAD' ],
                    [ firstName: 'Jan', lastName: 'Supplier', emailAddress: 'jan5@example.com',
                    locale: 'EN', username: 'jan5', externalId: 'ext',
                    userGroupId: 'GROWERP_M_SUPPLIER' ]
                ]"/>

                <set field="opportunities" from="
                [
                    [ opportunityName: 'The best opportunity', description: 'the best oppr description',
                        nextStep: 'not sure yet', estimatedAmount: 1000, estimatedProbability: 33,
                        ownerPartyId: companyPartyId, opportunityStageId: 'Prospecting' ],
                    [ opportunityName: 'The second best opportunity', description: 'the secondbest oppr description',
                        nextStep: 'not sure yet', estimatedAmount: 5000, estimatedProbability: 66,
                        ownerPartyId: companyPartyId, opportunityStageId: 'Proposal' ]
                ]"/>
            <set field="nowDate" from="ec.user.nowTimestamp"/>
            <set field="counter" value="1" type="Integer"/>
            <while condition="counter--">
            <iterate list="categories" entry="el">
                <service-call name="create#mantle.product.category.ProductCategory"
                    in-map="[categoryName: counter.toString() + el.categoryName,
                            description: el.description,
                            productCategoryTypeEnumId: 'PctCatalog',
                            ownerPartyId: companyPartyId]"
                    out-map="context"/>
                <log message="===== catId: $productCategoryId created"/>
                <service-call 
                    name="create#mantle.product.category.ProductCategoryRollup"
                    in-map="[parentProductCategoryId: rootProductCategoryId,
                             productCategoryId: productCategoryId]"/>
                <service-call name="create#ProductCategoryContent" in-map="[
                    productCategoryId: productCategoryId,
                    categoryContentTypeEnumId: 'PcctImageThumbNail',
                    contentLocation: 'dbresource://GrowERP/images/' +
                        el.image + 'Small.png']" />
                <service-call name="create#ProductCategoryContent" in-map="[
                    productCategoryId: productCategoryId,
                    categoryContentTypeEnumId: 'PcctImageMedium',
                    contentLocation: 'dbresource://GrowERP/images/' +
                        el.image + 'Medium.png']" />
                <iterate list="el.products" entry="product">
                    <service-call name="create#mantle.product.Product" in-map="[
                        productName: counter.toString() + product.productName,
                        description: product.description,
                        ownerPartyId: companyPartyId,
                        productTypeEnumId: 'PtAsset',
                        assetTypeEnumId: 'AstTpInventory',
                        assetClassEnumId: 'AsClsInventoryFin']" out-map="context" />
                    <log message="===== productId: $productId created"/>
                    <service-call
                        name="create#mantle.product.category.ProductCategoryMember"
                        in-map="[productId: productId, productCategoryId: productCategoryId, fromDate: fromDate]"/>
                    <log message="===== productmember created"/>
                    <service-call name="create#mantle.product.ProductPrice"
                        in-map="[productId: productId, priceTypeEnumId: 'PptList',
                        priceUomId: currencyId, price: product.price,
                        fromDate: ec.user.nowTimestamp,
                        pricePurposeEnumId: 'PppPurchase']"/>
                    <service-call name="create#ProductContent" in-map="[
                        productId: productId,
                        productContentTypeEnumId: 'PcntImageSmall',
                        contentLocation: 'dbresource://GrowERP/images/' +
                            product.image + 'Small.png']" />
                    <service-call name="create#ProductContent" in-map="[
                        productId: productId,
                        productContentTypeEnumId: 'PcntImageMedium',
                        contentLocation: 'dbresource://GrowERP/images/' +
                        product.image + 'Medium.png']" />
                </iterate>
            </iterate>
            <iterate list="users" entry="user">
                <service-call name="growerp.100.PartyServices100.register#UserAndCompany"
                    in-map="[
                    companyPartyId: companyPartyId,
                    firstName: user.firstName,
                    lastName: counter.toString() + user.lastName,
                    emailAddress: companyPartyId + counter.toString() + user.emailAddress,
                    locale: user.locale,
                    username: companyPartyId + counter.toString() + user.username,
                    externalId: user.externalid,
                    userGroupId: user.userGroupId,
                ]" out-map="out"/>
            </iterate>
            <iterate list="opportunities" entry="opp">
                <service-call name="create#mantle.sales.opportunity.SalesOpportunity"
                in-map="[
                    opportunityName: opp.opportunityName,
                    description: opp.description,
                    nextStep: opp.nextStep,
                    estimatedAmount: opp.estimatedAmount,
                    estimatedProbability: opp.estimatedProbability,
                    opportunityStageId: opp.opportunityStageId,
                    ownerPartyId: companyPartyId
                ]"/>
            </iterate>
            </while>
            <!--if condition="environment != 'production'"-->
        </actions>
    </service>

</services>