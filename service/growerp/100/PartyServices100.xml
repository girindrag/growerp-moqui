<?xml version="1.0" encoding="UTF-8" ?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domaicrn Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <service verb="check" noun="Company">
        <description>Check if a particular company (irrespective of owner) exists</description>
        <in-parameters>
            <parameter name="partyId" required="true"/>
        </in-parameters>
        <out-parameters><parameter name="ok"/></out-parameters>
        <actions>
            <entity-find entity-name="growerp.mobile.CompanyPersonAndLoginGroup"
                    list="parties" limit="1">
                <econdition field-name="companyPartyId" from="partyId"/>
            </entity-find>
            <if condition="parties">
                <set field="ok" value="ok"/></if>
        </actions>
    </service>

    <service verb="get" noun="Companies">
        <in-parameters>
            <parameter name="mainCompanies" type="Boolean" default="true"/>
            <parameter name="start" type="Integer" default-value="0"/>
            <parameter name="limit" type="Integer" default-value="20"/>
            <parameter name="filter" default="null"/>
        </in-parameters>
        <out-parameters>
            <parameter name="companies" type="List"/>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"/>
            <if condition="mainCompanies">
                <set field="roleTypeId" value="OrgInternal"/>
                <else>
                    <set field="notRoleTypeId" value="OrgInternal"/>
                </else>
            </if>
            <if condition="filter != null"><!-- only used when logged in -->
                <set field="filter" value="%${filter}%"/>
                <set field="ownerPartyId" from="null"/>
            </if>
            <entity-find  list="parties" offset="start" limit="limit"
                entity-name="growerp.party.CompanyPreferenceAndRole">
                <econdition field-name="ownerPartyId" ignore-if-empty="true"/>
                <econdition field-name="organizationName" operator="like"
                        from="filter" ignore-if-empty="true" ignore-case="true"/>
                <econdition field-name="roleTypeId" from="roleTypeId"
                        ignore-if-empty="true"/>
                <econdition field-name="roleTypeId" from="notRoleTypeId"
                       operator="not-equals" ignore-if-empty="true"/>
                <order-by field-name="organizationName"/>
            </entity-find>
            <set field="companies" from="[]" />
            <iterate list="parties" entry="party">
                <set field="company"
                    from="[partyId: party.partyId, name: party.organizationName,
                                currency: party.baseCurrencyUomId == null
                                ? null : [currencyId: party.baseCurrencyUomId,
                                        description: party.uomDescription],
                                vatPerc: party.vatPerc ? party.vatPerc.toString() : null,
                                salesPerc: party.salesPerc ? party.salesPerc.toString() : null]"/>
                <script>companies.add(company)</script>
            </iterate>
        </actions>
    </service>

    <service verb="get" noun="Company">
        <in-parameters>
            <parameter name="companyPartyId"/>
            <parameter name="contentTypeId" default-value="PcntImageMedium"/>
        </in-parameters>
        <out-parameters>
            <parameter name="company" type="Map"/>
        </out-parameters>
        <actions>
            <if condition="!companyPartyId &amp;&amp; ec.user &amp;&amp; ec.user.userAccount?.partyId">
                <service-call name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" out-map="context"/>
            </if>
            <if condition="!companyPartyId"><return/></if><!-- return null if no company found -->
            <entity-find-one entity-name="growerp.party.CompanyPreferenceAndRole" value-field="org">
                <field-map field-name="partyId" from="companyPartyId"/></entity-find-one>
            <if condition="!org"><return error="true" message="Company ${companyPartyId} not found!"/></if>
            <!-- get primary email address -->
            <entity-find entity-name="mantle.party.contact.PartyContactMechInfo"
                     list="emails" limit="1">
                <econdition field-name="partyId" from="companyPartyId"/>
                <econdition field-name="contactMechPurposeId" value="EmailPrimary"/>
                <date-filter/></entity-find>
            <!-- get image or logo -->
            <entity-find entity-name="mantle.party.PartyContent" list="contents">
                <econdition field-name="partyId" from="companyPartyId"/>
                <econditions combine="or">
                    <econdition field-name="partyContentTypeEnumId" from="contentTypeId"/>
                    <econdition field-name="partyContentTypeEnumId" value="PcntLogoImage"/>
                </econditions>
            </entity-find>
            <if condition="contents">
                <service-call name="growerp.100.ImageServices100.download#Image"
                    in-map="[contentLocation: contents[0].contentLocation]" out-map="context"/>
            </if>
            <!-- postal address -->
            <entity-find list="addresses" limit="1"
                entity-name="growerp.party.contact.PartyContactMechPostalAddressGeo">
                <econdition field-name="partyId" from="companyPartyId"/>
                <econdition field-name="contactMechPurposeId" value="PostalPrimary"/>
                <date-filter/>
            </entity-find>
            <!-- if stateProvince not filled in get it from the geoId version -->
            <if condition="addresses">
                <set field="address" from="[
                addressId: addresses[0].contactMechId,
                address1: addresses[0].address1,
                address2: addresses[0].address2,
                city: addresses[0].city,
                postalCode: addresses[0].postalCode,
                province: addresses[0].province,
                provinceId: addresses[0].provinceId,
                country: addresses[0].countryName,
                countryId: addresses[0].countryId,
                ]"/>
            </if>
            <!-- payment method: credit card -->
            <entity-find entity-name="mantle.account.method.PaymentMethod" list="paymentMethods">
                <econdition field-name="ownerPartyId" from="companyPartyId"/>
                <econdition field-name="paymentMethodTypeEnumId" value="PmtCreditCard"/>
                <date-filter/>
            </entity-find>
            <if condition="paymentMethods">
                <entity-find entity-name="mantle.account.method.CreditCard" list="cCards">
                    <econdition field-name="paymentMethodId" from="paymentMethods[0].paymentMethodId"/>
                </entity-find>
                <set field="cardType" from="ec.entity.find('moqui.basic.Enumeration')
                        .condition('enumId', cCards[0].creditCardTypeEnumId).one().description"/>
                <set field="nrLength" from="cCards[0].cardNumber.length()"/>
                <set field="cardNumberHidden" value="${cardType}**********${cCards[0].cardNumber.substring(nrLength-4,nrLength)} ${cCards[0].expireDate}"/>
                <set field="paymentMethod" from="[ccDescription: cardNumberHidden]"/>
            </if>
            <!-- telephone -->
            <entity-find entity-name="mantle.party.contact.PartyContactMechTelecomNumber" list="telNos">
                <econdition field-name="partyId" from="companyPartyId"/>
                <date-filter/>
            </entity-find>
            <set field="company" from="[
                partyId: companyPartyId,
                name: org.organizationName,
                email: emails[0].infoString,
                currency: org.baseCurrencyUomId == null ? null :
                    [currencyId: org.baseCurrencyUomId,description: org.uomDescription],
                image: imageFile,
                address: address,
                vatPerc: org.vatPerc ? org.vatPerc.toString() : null,
                salesPerc: org.salesPerc ? org.salesPerc.toString() : null,
                paymentMethod: paymentMethod,
                telephoneNr: telNos ? telNos[0].contactNumber : null,
                ]"/>
        </actions>
    </service>

    <service verb="create" noun="Company">
        <description>
            create company information
        </description>
        <in-parameters>
            <parameter name="company"/>
        </in-parameters>
        <out-parameters>
            <parameter name="company" type="Map"/>
        </out-parameters>
        <actions>
            <log message="===========not implemented yet, required? now implemented with create user"/>
        </actions>
    </service>

    <service verb="update" noun="Company">
        <description>
            update company information
        </description>
        <in-parameters>
            <parameter name="company"/>
        </in-parameters>
        <out-parameters>
            <parameter name="company" type="Map"/>
        </out-parameters>
        <actions>
            <script> // convert JSON data
                Object compIn = new groovy.json.JsonSlurper().parseText(company)
            </script>
            <service-call out-map="context" 
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"/>
            <set field="compIn.partyId" from="ownerPartyId"/>
            <!-- get old values -->
            <service-call name="growerp.100.PartyServices100.get#Company" out-map="oldValue"/>
            <!-- update name -->
            <if condition="compIn.name &amp;&amp; oldValue.company.name !=  compIn.name">
                <service-call name="update#mantle.party.Organization"
                    in-map="[partyId: oldValue.company.partyId, organizationName: compIn.name]"/>
            </if>
            <!-- update email -->
            <if condition="compIn.email &amp;&amp; compIn.email != oldValue.company.email">
                <entity-find entity-name="mantle.party.contact.PartyContactMech"
                        for-update="true" list="partyContactMechs" >
                    <econdition field-name="partyId" from="oldValue.company.partyId"/>
                    <econdition field-name="contactMechPurposeId" value="EmailPrimary"/>
                    <econdition field-name="thruDate" operator="is-null"/>
                </entity-find>
                <!-- delete all duplicate mail addresses -->
                <iterate list="partyContactMechs" entry="contMech">    
                    <set field="contMech.thruDate" from="ec.user.nowTimestamp"/>
                    <entity-update value-field="contMech"/>
                </iterate>
                <service-call name="mantle.party.ContactServices.create#EmailAddress"
                    in-map="[partyId: oldValue.company.partyId, 
                    contactMechPurposeId: 'EmailPrimary', emailAddress: compIn.email]"/>
            </if>
            <!-- update currency -->
            <entity-find-one entity-name="mantle.ledger.config.PartyAcctgPreference"
                    value-field="pref" for-update="true">
                <field-map field-name="organizationPartyId" from="compIn.partyId"/>
            </entity-find-one>
            <if condition="pref.baseCurrencyUomId != compIn.currency.currencyId">
                <set field="pref.baseCurrencyUomId" from="compIn.currency.currencyId"/>
                <entity-update value-field="pref" />
            </if>
            <!-- update image -->
            <if condition="compIn.image">
                <service-call name="growerp.100.ImageServices100.upload#Image"
                    in-map="[type: 'company', id: compIn.partyId,
                        base64: compIn.image]"/>
            </if>
            <!-- postal address -->
            <!-- get geoId of country and province-->
            <if condition="compIn.address">
                <if condition="compIn.address.country">
                    <entity-find entity-name="moqui.basic.Geo" list="countries">
                        <econdition field-name="geoName" from="compIn.address.country"/>
                        <econdition field-name="geoTypeEnumId" value="GEOT_COUNTRY"/>
                    </entity-find>
                    <if condition="countries">
                        <set field="countryGeoId" from="countries[0].geoId"/>
                    </if>
                </if>
                <if condition="compIn.address.province">
                    <entity-find entity-name="moqui.basic.Geo" list="provinces">
                        <econdition field-name="geoName" from="compIn.address.province"/>
                        <econdition field-name="geoTypeEnumId" value="GEOT_STATE"/>
                    </entity-find>
                    <if condition="provinces">
                        <set field="stateProvinceGeoId" from="provinces[0].geoId"/>
                    </if>
                </if>
                <if condition="
                        compIn.address.address1 != oldValue.address1 ||
                        compIn.address.address2 != oldValue.address2 ||
                        compIn.address.city != oldValue.city ||
                        compIn.address.postalCode != oldValue.postalCode ||
                        compIn.address.stateProvince != oldValue.province ||
                        compIn.address.country != oldValue.country
                        ">
                    <!-- delete (set thruDate) all duplicates -->
                    <entity-find entity-name="mantle.party.contact.PartyContactMech"
                            for-update="true" list="partyContactMechs" >
                        <econdition field-name="partyId" from="oldValue.company.partyId"/>
                        <econdition field-name="contactMechPurposeId" value="PostalPrimary"/>
                        <econdition field-name="thruDate" operator="is-null"/>
                    </entity-find>
                    <iterate list="partyContactMechs" entry="contMech">    
                        <set field="contMech.thruDate" from="ec.user.nowTimestamp"/>
                        <entity-update value-field="contMech"/>
                    </iterate>
                    <!-- if possible find stateProvince geoId -->
                    <!-- create new postall address -->
                    <service-call name="mantle.party.ContactServices.create#PostalAddress"
                        in-map="[partyId: oldValue.company.partyId, contactMechPurposeId: 'PostalPrimary', 
                                address1: compIn.address.address1,
                                address2: compIn.address.address2,
                                city: compIn.address.city,
                                postalCode: compIn.address.postalCode,
                                stateProvince: compIn.address.province,
                                stateProvinceGeoId: stateProvinceGeoId, 
                                countryGeoId: countryGeoId]"
                        out-map="result"/>
                </if>
            </if>
            <!-- telephone -->
            <if condition="compIn.telephoneNr">
                <entity-find entity-name="mantle.party.contact.PartyContactMechTelecomNumber" list="telNos">
                    <econdition field-name="partyId" from="oldValue.company.partyId"/>
                    <date-filter/>
                </entity-find>
                <if condition="telNos">
                    <if condition="telNos[0].contactNumber != compIn.telephoneNr">
                        <service-call name="update#mantle.party.contact.TelecomNumber"
                            in-map="[contactMechId: telNos[0].contactMechId,
                                    contactNumber: compIn.telephoneNr]"/>
                    </if>
                    <else>
                        <service-call name="mantle.party.ContactServices.create#TelecomNumber"
                            in-map="[
                                contactMechPurposeId: 'PhonePrimary',
                                contactNumber: compIn.telephoneNr,
                                partyId: companyPartyId]"/>
                    </else>
                </if>
            </if>
            <!-- payment methods -->
            <if condition="compIn.paymentMethod">
                <!-- credit card -->
                <if condition="compIn.paymentMethod.creditCardType">
                    <set field="expireDate" value="${compIn.paymentMethod.expireMonth}/${compIn.paymentMethod.expireYear}"/>
                    <entity-find entity-name="mantle.party.contact.PartyContactMech"
                            list="partyContactMechs" >
                        <econdition field-name="partyId" from="oldValue.company.partyId"/>
                        <econdition field-name="contactMechPurposeId" value="PostalPrimary"/>
                        <date-filter/>
                    </entity-find>
                    <if condition="!partyContactMechs">
                        <return error="true" message="Need postal address for creditcard"/>
                    </if>
                    <set field="inMap" from="[
                        ownerPartyId: oldValue.company.partyId,
                        cardNumber: compIn.paymentMethod.creditCardNumber,
                        creditCardTypeEnumId: ec.entity.find('moqui.basic.Enumeration')
                            .condition('description', compIn.paymentMethod.creditCardType).one().enumId,
                        expireDate: expireDate,
                        postalContactMechId: partyContactMechs[0].contactMechId,
                        firstNameOnAccount: 'company',
                        lastNameOnAccount: compIn.name,
                        paymentGatewayConfigId: 'StripeDemo',
                        ]"/>
                    <entity-find entity-name="mantle.account.method.PaymentMethod" list="paymentMethods">
                        <econdition field-name="ownerPartyId" from="oldValue.company.partyId"/>
                        <econdition field-name="paymentMethodTypeEnumId" value="PmtCreditCard"/>
                        <date-filter/>
                    </entity-find>
                    <if condition="!paymentMethods">
                        <service-call
                            name="mantle.account.PaymentMethodServices.create#CreditCard"
                            in-map="inMap"/>
                        <else>
                            <entity-find-one entity-name="mantle.account.method.CreditCard" value-field="cc">
                                <field-map field-name="paymentMethodId" from="paymentMethods[0].paymentMethodId"/>
                            </entity-find-one>
                            <if condition="inMap.cardNumber != cc.cardNumber ||
                                            inMap.expireDate != cc.expireDate">
                                <set field="inMap.paymentMethodId" from="paymentMethods[0].paymentMethodId"/>
                                <service-call
                                    name="mantle.account.PaymentMethodServices.update#CreditCard"
                                    in-map="inMap"/>
                            </if>
                        </else>
                    </if>
                </if>
            </if>
            <!-- sales/vat tax percentage -->
            <if condition="compIn.salesPerc || compIn.vatPerc">
                <entity-find-one
                    entity-name="mantle.party.Party" value-field="party" for-update="true">
                    <field-map field-name="partyId" from="compIn.partyId"/>
                </entity-find-one>
                <if condition="compIn.vatPerc != null"> 
                    <set field="party.vatPerc" from="Integer.parseInt(compIn.vatPerc)"/>
                    <else>
                        <set field="party.vatPerc" from="null"/>
                    </else>
                </if>
                <if condition="compIn.salesPerc != null"> 
                    <set field="party.salesPerc" from="Integer.parseInt(compIn.salesPerc)"/>
                    <else>
                        <set field="party.salesPerc" from="null"/>
                    </else>
                </if>
                <entity-update value-field="party"/>
            </if>
            <!-- return updated company -->
            <service-call
                name="growerp.100.PartyServices100.get#Company" out-map="context"/>
        </actions>
    </service>

    <service verb="get" noun="User">
        <description>
            Get all users of the company or usergroup they belong to(with partyId just a single party with PartyId)
        </description>
        <in-parameters>
            <parameter name="userPartyId"/><!-- if present select a single user, else a list -->
            <parameter name="userGroupIds" type="List"/><!-- if present select user from particular groups-->
            <parameter name="ownerPartyId"/><!-- required when registering company customers-->
            <parameter name="start" type="Integer" default-value="0"/>
            <parameter name="limit" type="Integer" default-value="20"/>
            <parameter name="filter" default="null"/>
            <parameter name="search" default="null"/>
        </in-parameters>
        <out-parameters>
            <parameter name="users" type="List" default="[]"/>
            <parameter name="user" type="Map" default="[:]"/>
        </out-parameters>
        <actions>
            <if condition="filter != null">
                <set field="filter" value="%${filter}%"/></if>
            <if condition="search != null">
                <set field="search" value="%${search}%"/></if>
            <if condition="!ownerPartyId">
                <service-call out-map="relatedLogin"
                    name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"/>
                <set field="ownerPartyId" from="relatedLogin.ownerPartyId"/></if>
            <if condition="!userPartyId &amp;&amp; !search">
                <set field="users" from="[]"/>
                <set field="disabled" value="N"/></if>
            <entity-find offset="start" limit="limit" list="userInfos"
                    entity-name="growerp.mobile.CompanyPersonAndLoginGroup">
                <econdition field-name="companyOwnerPartyId" from="ownerPartyId"
                        ignore-if-empty="true"/>
                <econdition field-name="ownerPartyId" from="ownerPartyId"
                        ignore-if-empty="true"/>
                <econdition field-name="userPartyId" ignore-if-empty="true"/>
                <econditions combine="or">
                    <econdition field-name="userPartyId" operator="like"
                        from="filter" ignore-if-empty="true" ignore-case="true"/>
                    <econdition field-name="lastName" operator="like"
                        from="filter" ignore-if-empty="true" ignore-case="true"/>
                    <econdition field-name="firstName" operator="like"
                        from="filter" ignore-if-empty="true" ignore-case="true"/>
                    <econdition field-name="companyName" operator="like"
                        from="filter" ignore-if-empty="true" ignore-case="true"/>
                </econditions>
                <econditions combine="or">
                    <econdition field-name="userPartyId" ignore-case="true"
                        operator="like" from="search" ignore-if-empty="true"/>
                    <econdition field-name="userFullName" ignore-case="true"
                        operator="like" from="search" ignore-if-empty="true"/>
                    <econdition field-name="emailAddress" ignore-case="true"
                        operator="like" from="search" ignore-if-empty="true"/>
                </econditions>
                <econdition field-name="userGroupId" operator="in"
                        from="userGroupIds" ignore-if-empty="true"/>
                <econdition field-name="companyDisabled" operator="equals"
                        from="disabled" or-null="true" ignore-if-empty="true"/>
                <econdition field-name="userDisabled" operator="equals"
                        from="disabled" or-null="true" ignore-if-empty="true"/>
                <order-by field-name="lastName^,firstName^"/>
            </entity-find>
            <iterate entry="userInfo" list="userInfos">
                <!-- payment methods -->
                <entity-find entity-name="mantle.account.method.PaymentMethod" list="paymentMethods">
                    <econdition field-name="ownerPartyId" from="userInfo.companyPartyId"/>
                    <econdition field-name="paymentMethodTypeEnumId" value="PmtCreditCard"/>
                    <date-filter/>
                </entity-find>
                <set field="paymentMethod" from="null"/>
                <iterate list="paymentMethods" entry="paymentMethod">
                    <if condition="paymentMethod.paymentMethodTypeEnumId == 'PmtCreditCard'">
                        <entity-find entity-name="mantle.account.method.CreditCard" list="cCards">
                            <econdition field-name="paymentMethodId" from="paymentMethods[0].paymentMethodId"/>
                        </entity-find>
                        <set field="cardType" from="ec.entity.find('moqui.basic.Enumeration')
                                .condition('enumId', cCards[0].creditCardTypeEnumId).one().description"/>
                        <set field="nrLength" from="cCards[0].cardNumber.length()"/>
                        <set field="cardNumberHidden" value="${cardType}**********${cCards[0].cardNumber.substring(nrLength-4,nrLength)} ${cCards[0].expireDate}"/>
                        <set field="paymentMethod"
                            from="[ccPaymentMethodId: paymentMethod.paymentMethodId,
                                                      ccDescription: cardNumberHidden]"/>
                    </if>
                </iterate>
                <if condition="filter != null">
                    <script>
                        users.add([
                            partyId: userInfo?.userPartyId,
                            firstName: userInfo?.firstName,
                            lastName: userInfo?.lastName,
                            companyPartyId: userInfo.companyPartyId,
                            companyName: userInfo.companyName,
                            companyPaymentMethod: paymentMethod        
                            ])
                    </script>
                    <continue/>
                </if>
                <entity-find entity-name="mantle.party.PartyContent" list="contents">
                    <econdition field-name="partyId" from="userInfo.userPartyId"/>
                    <econdition field-name="partyContentTypeEnumId" 
                        from="userPartyId? 'PcntImageMedium' : 'PcntImageSmall'" />
                </entity-find>
                <if condition="contents">    
                    <service-call name="growerp.100.ImageServices100.download#Image"
                        in-map="[contentLocation: contents[0].contentLocation]" out-map="context"/></if>
                <!-- postal address -->
                <if condition="userInfo.contactMechId">
                    <set field="address" from="[
                        addressId: userInfo.contactMechId,
                        address1: userInfo.address1,
                        address2: userInfo.address2,
                        city: userInfo.city,
                        postalCode: userInfo.postalCode,
                        province: userInfo.stateProvince ? userInfo.stateProvince : userInfo.stateProvinceGeoId ? userInfo.stateProvinceGeoId.substring(4):'',
                        country: userInfo.country,
                        ]"/>
                        <else>
                            <set field="address" from="null"/>
                        </else>
                </if>
                <!-- telephone -->
                <entity-find entity-name="mantle.party.contact.PartyContactMechTelecomNumber" list="telNos">
                    <econdition field-name="partyId" from="userInfo.userPartyId"/>
                    <date-filter/>
                </entity-find>
                <set field="userOut" from="[
                    partyId: userInfo?.userPartyId,
                    email: userInfo?.emailAddress,
                    firstName: userInfo?.firstName,
                    lastName: userInfo?.lastName,
                    loginDisabled: userInfo?.loginDisabled == 'Y'? true : false,
                    loginName: userInfo?.username,
                    userGroupId: userInfo.userGroupId,
                    groupDescription: userInfo?.description,
                    language: userInfo?.locale ? userInfo?.locale .toString() : '',
                    companyPartyId: userInfo.companyPartyId,
                    companyName: userInfo.companyName,
                    image: imageFile,
                    userId: userInfo?.userId,
                    locale: userInfo?.locale,
                    telephoneNr: telNos ? telNos[0].contactNumber : null,
                    companyAddress: address,
                    companyPaymentMethod: paymentMethod]"/>
                <if condition="!userPartyId">
                    <script>users.add(userOut)</script>
                    <else>
                        <set field="user" from="userOut"/>
                    </else>
                </if>
            </iterate>
        </actions>
    </service>

    <service verb="register" noun="User"  authenticate="anonymous-all" >
        <description>registration on the e-commerce webapp for a specific company just for non-employees</description>
        <in-parameters>
            <parameter name="ownerPartyId"/>
            <parameter name="classificationId"/>
            <parameter name="user" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="user" type="Map"/>
        </out-parameters>
        <actions>
            <script> // convert JSON data
                Object userIn = new groovy.json.JsonSlurper().parseText(user);
                user = null;
            </script>
            <!-- check input parameters because anonymous access -->
            <entity-find-one entity-name="mantle.party.Party" value-field="party">
                <field-map field-name="partyId" from="ownerPartyId"/>
            </entity-find-one>
            <if condition="!party"><return message="Not a valid ownerId"/></if>
            <entity-find-one entity-name="mantle.party.PartyClassification"
                    value-field="classification">
                <field-map field-name="partyClassificationId" from="classificationId"/>
            </entity-find-one>
            <if condition="!classification">
                <return message="Not a valid classificationId: ${classificationId}"/></if>
            <!-- roles -->
            <if condition="userIn.userGroupId == 'GROWERP_M_LEAD' ||
                    userIn.userGroupId == 'GROWERP_M_CUSTOMER'">
                <set field="roleTypeId" value="Customer"/>
            <else-if condition="userIn.userGroupId == 'GROWERP_M_SUPPLIER'">
                <set field="roleTypeId" value="Supplier"/></else-if>
            <else><return message="Not a valid userGroupId: ${userIn.userGroupId}"/></else></if>
            <!-- create account, not active when no login provided -->
            <set field="disabled" value="N"/>
            <if condition="!userIn.loginName"><set field="disabled" value="Y"/></if>
            <set field="newPassword" from="org.moqui.util.StringUtilities.getRandomString(6) + '9!'"/>
            <set field="newPasswordVerify" from="newPassword"/>
            <service-call name="mantle.party.PartyServices.create#Account" 
                in-map="context + [roleTypeId: roleTypeId, loginAfterCreate: false,
                        firstName: userIn.firstName, lastName: userIn.lastName,
                        username: userIn.loginName,
                        emailAddress: userIn.email, disabled: disabled]"
                out-map="userAccount" />
            <set field="userPartyId" from="userAccount.partyId"/>
            <!-- update owner on userPartyId -->
            <entity-find-one entity-name="mantle.party.Party"
                    value-field="party" for-update="true">
                <field-map field-name="partyId" from="userPartyId"/>
            </entity-find-one>
            <set field="party.ownerPartyId" from="ownerPartyId"/>
            <entity-update value-field="party"/>
            <if condition="!userIn.companyName &amp;&amp; !userIn.companyPartyId">
                <return error="true"
                    message="Company name required for new lead, customer or supplier"/>
            </if>
            <!-- company -->
            <if condition="userIn.companyPartyId">
                <!-- existing company -->
                <entity-find-one entity-name="mantle.party.Party" value-field="checkParty">
                    <field-map field-name="partyId" from="userIn.companyPartyId"/>
                    <field-map field-name="ownerPartyId" from="ownerPartyId"/>
                </entity-find-one>
                <if condition="!checkParty">
                    <return error="true" message="could not find company ${userIn.companyPartyId} under owner $ownerPartyId!"/>
                </if>
                <set field="companyPartyId" from="userIn.companyPartyId"/>
                <else>
                    <!-- new company -->
                    <service-call out-map="comp"
                        name="mantle.party.PartyServices.create#Organization"
                        in-map="[organizationName: userIn.companyName,
                                ownerPartyId: ownerPartyId, roleTypeId: roleTypeId,
                                disabled: 'N']"/>
                        <set field="companyPartyId" from="comp.partyId"/>
                </else>
            </if>
            <!-- company party relationship -->
            <service-call name="create#mantle.party.PartyRelationship"
                in-map="[fromPartyId: userPartyId, fromRoleTypeId: 'Employee',
                    relationshipTypeEnumId: 'PrtEmployee', fromDate: ec.user.nowTimestamp,
                    toPartyId: companyPartyId, toRoleTypeId: roleTypeId]" />
            <!-- provide security -->
            <service-call name="create#moqui.security.UserGroupMember"
                in-map="[userGroupId: userIn.userGroupId, userId: userAccount.userId]" />
            <!-- only send email when login name provided -->
            <if condition="userIn.loginName">
                <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" async="true">
                    <field-map field-name="emailTemplateId" value="WELCOME" />
                    <field-map field-name="toAddresses" from="userIn.email" />
                    <field-map field-name="bodyParameters" 
                        from="[classification: classificationId.substring(3),
                            newPassword:newPassword]" />
                </service-call>
            </if>
            <!-- return all user info -->
            <service-call name="growerp.100.PartyServices100.get#User"
                in-map="[ownerPartyId: ownerPartyId,userPartyId: userPartyId]" out-map="context"/>
        </actions>
    </service>

    <service verb="create" noun="User">
        <description>
            add a new user on an existing owner company
        </description>
        <in-parameters>
            <parameter name="user" required="true"/>
            <parameter name="password"/><!-- empty for system generated -->
        </in-parameters>
        <out-parameters>
            <parameter name="user" type="Map"/>
        </out-parameters>
        <actions>
            <script> // convert JSON data
                Object userIn = new groovy.json.JsonSlurper().parseText(user)
            </script>
            <if condition="userIn.userGroupId == 'GROWERP_M_EMPLOYEE' ||
                    userIn.userGroupId == 'GROWERP_M_ADMIN'">
                <set field="roleTypeId" value="Employee"/></if>
            <if condition="userIn.userGroupId == 'GROWERP_M_LEAD' ||
                    userIn.userGroupId == 'GROWERP_M_CUSTOMER'">
                <set field="roleTypeId" value="Customer"/></if>
            <if condition="userIn.userGroupId == 'GROWERP_M_SUPPLIER'">
                <set field="roleTypeId" value="Supplier"/></if>

            <service-call
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"
                out-map="relComp"/>
            <service-call name="mantle.party.PartyServices.create#Account" 
                in-map="[roleTypeId: roleTypeId, loginAfterCreate: false,
                        firstName: userIn.firstName, lastName: userIn.lastName,
                        emailAddress: userIn.email, disabled: 'N',
                        username: userIn.loginName, newPassword: password,
                        newPasswordVerify: password, ownerPartyId: relComp.ownerPartyId]"
                out-map="userAccount" />
            <set field="userPartyId" from="userAccount.partyId"/>
            <!-- create company for NOT employee and admin -->
            <if condition="userIn.userGroupId != 'GROWERP_M_ADMIN' &amp;&amp; 
                            userIn.userGroupId != 'GROWERP_M_EMPLOYEE'">
                <if condition="!userIn.companyName &amp;&amp; !userIn.companyPartyId">
                    <return error="true"
                        message="Existing or new company name required for new lead, customer or supplier"/>
                </if>
                <if condition="!userIn.companyPartyId &amp;&amp; userIn.companyName">
                    <service-call 
                        name="mantle.party.PartyServices.create#Organization"
                        out-map="comp"
                        in-map="[organizationName: userIn.companyName,
                                ownerPartyId: relComp.ownerPartyId, roleTypeId: roleTypeId,
                                disabled: 'N']"/>
                    <set field="companyPartyId" from="comp.partyId"/>
                    <else>
                        <set field="companyPartyId" from="userIn.companyPartyId"/>
                    </else>
                </if>
                <else>
                    <set field="companyPartyId" from="relComp.ownerPartyId"/>
                </else>
            </if>
            <!-- company party relationship -->
            <service-call name="create#mantle.party.PartyRelationship"
                in-map="[fromPartyId: userPartyId, fromRoleTypeId: 'Employee',
                    relationshipTypeEnumId: 'PrtEmployee', fromDate: ec.user.nowTimestamp,
                    toPartyId: companyPartyId, toRoleTypeId: roleTypeId]" />
            <service-call name="create#moqui.security.UserGroupMember"
                in-map="[userGroupId: userIn.userGroupId, userId: userAccount.userId]" />
            <!-- add image -->
            <if condition="userIn.image">
                <service-call name="growerp.100.ImageServices100.upload#Image"
                    in-map="[type: 'user', id: userPartyId,
                        base64: userIn.image]"/>
            </if>
            <!-- address  and payment period only after creation -->
            <!-- telephone -->
            <if condition="userIn.telephoneNr">
                <service-call
                    name="mantle.party.ContactServices.create#TelecomNumber"
                    in-map="[
                        contactNumber: userIn.telephoneNr,
                        contactMechPurposeId: 'PhonePrimary',
                        partyId: userPartyId,
                            ]"/>
            </if>
            <service-call name="growerp.100.PartyServices100.get#User"
                in-map="[userPartyId: userPartyId]" out-map="context"/>
        </actions>
    </service>

    <service verb="update" noun="User">
        <description>
            update user information
        </description>
        <in-parameters>
            <parameter name="user"/>
        </in-parameters>
        <out-parameters>
            <parameter name="user"/>
        </out-parameters>
        <actions>
            <script> // convert JSON data
                Object userIn = new groovy.json.JsonSlurper().parseText(user)
            </script>
            <!-- get old values -->
            <service-call name="growerp.100.PartyServices100.get#User"
                in-map="[userPartyId: userIn.partyId]" out-map="oldValue"/>
            <service-call name="update#mantle.party.Person" 
                in-map="[   partyId: userIn.partyId, 
                            firstName: userIn.firstName ? userIn.firstName : oldValue.user.firstName, 
                            lastName: userIn.lastName ? userIn.lastName : oldValue.user.lastName]"/>
            <service-call name="mantle.party.PartyServices.update#PartyUserAccount"
                in-map="[   partyId: userIn.partyId, 
                            emailAddress: userIn.email ? userIn.email : oldValue.user.email,
                            username: userIn.loginName ? userIn.loginName : oldValue.user.loginName,
                            locale: language
                        ]"/>
            <!--update user group -->
            <service-call name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" 
                in-map="[userPartyId: userIn.partyId]" out-map="company"/>
            <if condition="!userIn.userGroupId">
                <return error="true" message="userGroupId not supplied to update user"/></if>
            <if condition="userIn.userGroupId != oldValue.user.userGroupId">
                <if condition="oldValue.user.userGroupId == 'GROWERP_M_ADMIN'">
                    <!-- check if only a single admin: cannot change -->
                    <entity-find entity-name="growerp.mobile.CompanyPersonAndLoginGroup" list="admins">
                        <econdition field-name="userGroupId" value="GROWERP_M_ADMIN"/>
                        <econdition field-name="companyPartyId" from="company.companyPartyId" />
                        <date-filter/></entity-find>
                    <if condition="admins.size() == 1">
                        <return error="true" message="You need at least a single Admin in your company: cannot remove this one!"/></if>
                </if>
                <entity-find entity-name="moqui.security.UserGroupMember" list="groupMembers" for-update="true">
                    <econdition field-name="userGroupId" from="oldValue.user.userGroupId"/>
                    <econdition field-name="userId" from="oldValue.user.userId"/>
                </entity-find>
                <set field="groupMembers[0].thruDate" from="ec.user.nowTimestamp"/>
                <entity-update value-field="groupMembers[0]"/>
                <service-call name="create#moqui.security.UserGroupMember"
                    in-map="[userGroupId: userIn.userGroupId, userId: oldValue.user.userId, fromDate: ec.user.nowTimestamp]"/>
            </if>    
            <!-- update image -->
            <if condition="userIn.image">
                <service-call name="growerp.100.ImageServices100.upload#Image"
                    in-map="[type: 'user', id: userIn.partyId,
                        base64: userIn.image]"/>
            </if>
            <!-- create roleTypeId -->
            <if condition="userIn.userGroupId == 'GROWERP_M_EMPLOYEE' ||
                    userIn.userGroupId == 'GROWERP_M_ADMIN'">
                <set field="roleTypeId" value="Employee"/></if>
            <if condition="userIn.userGroupId == 'GROWERP_M_LEAD' ||
                    userIn.userGroupId == 'GROWERP_M_CUSTOMER'">
                <set field="roleTypeId" value="Customer"/></if>
            <if condition="userIn.userGroupId == 'GROWERP_M_SUPPLIER'">
                <set field="roleTypeId" value="Supplier"/></if>

            <!-- company partyId is empty, name provided: means new company-->
            <if condition="!userIn.companyPartyId">
                <if condition="!userIn.companyName">
                    <return error="true" message="Companyname required when companyPartyId is null in update user"/>
                </if>
                <service-call out-map="comp"
                    name="mantle.party.PartyServices.create#Organization"
                    in-map="[organizationName: userIn.companyName,
                            ownerPartyId: company.ownerPartyId, roleTypeId: roleTypeId,
                            disabled: 'N']"/>
                <set field="companyPartyId" from="comp.partyId"/>
                <set field="userIn.companyAddress" from="null"/><!-- new address -->
                <set field="userIn.companyPaymentMethod" from="null"/><!-- new paymentMethod -->
                <else>
                    <set field="companyPartyId" from="userIn.companyPartyId"/>
                </else>
            </if>
            <!-- if no userIn.companyPartyId or companyPartyId different: remove relationship-->
            <if condition="!userIn.companyPartyId &amp;&amp; userIn.companyName ||
                    userIn.companyPartyId != oldValue.user.companyPartyId">
                <entity-find entity-name="mantle.party.PartyRelationship" 
                        list="oldRel" limit="1">
                    <econdition field-name="fromPartyId" from="userIn.partyId"/>
                    <econdition field-name="fromRoleTypeId" value="Employee"/>
                    <econdition field-name="toPartyId" from="oldValue.user.companyPartyId"/>
                </entity-find>
                <if condition="oldRel">
                    <set field="oldRel[0].thruDate" from="ec.user.nowTimestamp"/>
                    <entity-update value-field="oldRel[0]"/>
                    <else>
                        <return error="true" message="Could not find relationship of employee ${userIn.partyId} and company: ${oldValue.user.companyPartyId}"/>
                    </else>
                </if>
                <!-- create new relationship -->
                <service-call name="create#mantle.party.PartyRelationship"
                    in-map="[fromPartyId: userIn.partyId, fromRoleTypeId: 'Employee',
                        relationshipTypeEnumId: 'PrtEmployee', fromDate: ec.user.nowTimestamp,
                        toPartyId: companyPartyId, toRoleTypeId: roleTypeId]" />
            </if>
            <!-- update postal address -->
            <if condition="userIn.companyAddress">
                <if condition="userIn.companyAddress.country">
                    <entity-find entity-name="moqui.basic.Geo" list="countries">
                        <econdition field-name="geoName" from="userIn.companyAddress.country"/>
                        <econdition field-name="geoTypeEnumId" value="GEOT_COUNTRY"/>
                    </entity-find>
                    <if condition="countries">
                        <set field="countryGeoId" from="countries[0].geoId"/>
                    </if>
                </if>
                <if condition="userIn.companyAddress.province">
                    <entity-find entity-name="moqui.basic.Geo" list="provinces">
                        <econdition field-name="geoName" from="userIn.companyAddress.province"/>
                        <econdition field-name="geoTypeEnumId" value="GEOT_STATE"/>
                    </entity-find>
                    <if condition="provinces">
                        <set field="stateProvinceGeoId" from="provinces[0].geoId"/>
                    </if>
                </if>
                <if condition="
                        userIn.companyAddress.address1 != oldValue.address1 ||
                        userIn.companyAddress.address2 != oldValue.address2 ||
                        userIn.companyAddress.city != oldValue.city ||
                        userIn.companyAddress.postalCode != oldValue.postalCode ||
                        userIn.companyAddress.stateProvince != oldValue.province ||
                        userIn.companyAddress.country != oldValue.country
                        ">
                    <!-- delete (set thruDate) all duplicates -->
                    <entity-find entity-name="mantle.party.contact.PartyContactMech"
                            for-update="true" list="partyContactMechs" >
                        <econdition field-name="partyId" from="oldValue.user.companyPartyId"/>
                        <econdition field-name="contactMechPurposeId" value="PostalPrimary"/>
                        <econdition field-name="thruDate" operator="is-null"/>
                    </entity-find>
                    <iterate list="partyContactMechs" entry="contMech">    
                        <set field="contMech.thruDate" from="ec.user.nowTimestamp"/>
                        <entity-update value-field="contMech"/>
                    </iterate>
                    <!-- if possible find stateProvince geoId -->
                    <!-- create new postall address -->
                    <service-call name="mantle.party.ContactServices.create#PostalAddress"
                        in-map="[partyId: oldValue.user.companyPartyId, contactMechPurposeId: 'PostalPrimary', 
                                address1: userIn.companyAddress.address1,
                                address2: userIn.companyAddress.address2,
                                city: userIn.companyAddress.city,
                                postalCode: userIn.companyAddress.postalCode,
                                stateProvince: userIn.companyAddress.province,
                                stateProvinceGeoId: stateProvinceGeoId, 
                                countryGeoId: countryGeoId]"
                        out-map="result"/>
                </if>
            </if>
            <!-- telephone -->
            <if condition="userIn.telephoneNr">
                <entity-find entity-name="mantle.party.contact.PartyContactMechTelecomNumber" list="telNos">
                    <econdition field-name="partyId" from="userIn.partyId"/>
                    <date-filter/>
                </entity-find>
                <if condition="telNos">
                    <if condition="telNos[0].contactNumber != userIn.telephoneNr">
                        <service-call name="update#mantle.party.contact.TelecomNumber"
                            in-map="[contactMechId: telNos[0].contactMechId,
                                    contactNumber: userIn.telephoneNr]"/>
                    </if>
                    <else>
                        <service-call name="mantle.party.ContactServices.create#TelecomNumber"
                            in-map="[
                                contactMechPurposeId: 'PhonePrimary',
                                contactNumber: userIn.telephoneNr,
                                partyId: userIn.partyId]"/>
                    </else>
                </if>
            </if>
            <!-- payment methods -->
            <if condition="userIn.companyPaymentMethod">
                <!-- credit card -->
                <set field="expireDate" value="${userIn.companyPaymentMethod.expireMonth}/${userIn.companyPaymentMethod.expireYear}"/>
                    <if condition="userIn.companyPaymentMethod.creditCardType">
                        <entity-find entity-name="mantle.party.contact.PartyContactMech"
                            list="partyContactMechs" >
                        <econdition field-name="partyId" from="userIn.companyPartyId"/>
                        <econdition field-name="contactMechPurposeId" value="PostalPrimary"/>
                        <date-filter/>
                    </entity-find>
                    <if condition="!partyContactMechs"><return error="true" message="Need postal address for creditcard"/></if>
                    <set field="inMap" from="[
                        ownerPartyId: userIn.companyPartyId,
                        cardNumber: userIn.companyPaymentMethod.creditCardNumber,
                        creditCardTypeEnumId: ec.entity.find('moqui.basic.Enumeration')
                            .condition('description', userIn.companyPaymentMethod.creditCardType).one().enumId,
                        expireDate: expireDate,
                        postalContactMechId: partyContactMechs[0].contactMechId,
                        firstNameOnAccount: userIn.firstName,
                        lastNameOnAccount: userIn.lastName,
                        paymentGatewayConfigId: 'StripeDemo',
                        ]"/>
                    <entity-find entity-name="mantle.account.method.PaymentMethod" list="paymentMethods">
                        <econdition field-name="ownerPartyId" from="userIn.companyPartyId"/>
                        <econdition field-name="paymentMethodTypeEnumId" value="PmtCreditCard"/>
                        <date-filter/>
                    </entity-find>
                    <if condition="!paymentMethods">
                        <service-call
                            name="mantle.account.PaymentMethodServices.create#CreditCard"
                            in-map="inMap"/>
                        <else>
                            <entity-find-one entity-name="mantle.account.method.CreditCard" value-field="cc">
                                <field-map field-name="paymentMethodId" from="paymentMethods[0].paymentMethodId"/>
                            </entity-find-one>
                            <if condition="inMap.cardNumber != cc.cardNumber ||
                                            inMap.expireDate != cc.expireDate">
                                <set field="inMap.paymentMethodId" from="paymentMethods[0].paymentMethodId"/>
                                <service-call
                                    name="mantle.account.PaymentMethodServices.update#CreditCard"
                                    in-map="inMap"/>
                            </if>
                        </else>
                    </if>
                </if>
            </if>
            <!-- return updated user -->
            <service-call name="growerp.100.PartyServices100.get#User"
                in-map="[userPartyId: userIn.partyId]" out-map="context"/>
        </actions>
    </service>

    <service verb="delete" noun="User">
        <in-parameters>
            <parameter name="partyId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="user" format="Map"/>
        </out-parameters>
        <actions>
            <!-- check if this user has an admin account -->
            <service-call name="growerp.100.PartyServices100.get#User"
                in-map="[userPartyId: partyId]" out-map="oldValue"/>
            <if condition="oldValue.user.userGroupId == 'GROWERP_M_ADMIN'">
                <!-- check if only a single admin: cannot change -->
                <service-call name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner" 
                    in-map="[userPartyId: partyId]" out-map="company"/>
                <entity-find entity-name="growerp.mobile.CompanyPersonAndLoginGroup" list="admins">
                    <econdition field-name="userGroupId" value="GROWERP_M_ADMIN"/>
                    <econdition field-name="companyPartyId" from="company.companyPartyId" />
                    <date-filter/></entity-find>
                <if condition="admins.size() == 1">
                    <return error="true" message="You need at least a single Admin in your company: cannot delete this one!"/></if>
            </if>
            <service-call name="update#mantle.party.Party" in-map="[partyId: partyId, disabled: 'Y']"/>
            <service-call name="growerp.100.PartyServices100.get#User"
                in-map="[userPartyId: partyId]" out-map="context"/>
        </actions>
    </service>

    <service verb="register" noun="UserAndCompany" authenticate="anonymous-all">
        <description>Register a new accounting/ownercompany with an admin user</description>
        <in-parameters>
            <!-- user information -->
            <parameter name="firstName" required="true" />
            <parameter name="middleName" />
            <parameter name="lastName" required="true" />
            <parameter name="emailAddress" required="true">
                <text-email />
            </parameter>
            <parameter name="username" default="emailAddress"/>
            <parameter name="newPassword" default="org.moqui.util.StringUtilities.getRandomString(6) + '9!'" />
            <parameter name="newPasswordVerify" default="newPassword" />
            <parameter name="locale" />
            <!-- company information -->
            <parameter name="companyEmailAddress" required="true"/>
            <parameter name="companyName" required="true"/>
            <parameter name="currencyId" required="true"/>
            <parameter name="classificationId" required="true"/> <!-- allocate company to application name -->
            <!-- default setup -->
            <parameter name="productionEnvironment" default-value="false"/><!-- string bolean -->
            <parameter name="demoData" default-value="true"/><!-- string bolean -->
        </in-parameters>
        <out-parameters>
            <parameter name="authenticate"/>
        </out-parameters>
        <actions>
            <service-call name="mantle.party.PartyServices.create#Account" 
                in-map="context + [roleTypeId: 'Employee',
                        loginAfterCreate: false, disabled: 'N']"
                out-map="userAccount" />
            <set field="userPartyId" from="userAccount.partyId"/>
            <set field="fromDate" from="ec.user.nowTimestamp"/>
            <if condition="userAccount.partyId != null">
                <!-- add the user as admin -->
                <service-call name="create#moqui.security.UserGroupMember"
                    in-map="[userGroupId: 'GROWERP_M_ADMIN', userId: userAccount.userId]"/>
                <!-- create company -->
                <service-call name="mantle.party.PartyServices.create#Organization"
                    in-map="[roleTypeId: 'OrgInternal',organizationName: companyName,
                            disabled: 'N']" out-map="company" />
                <set field="companyPartyId" from="company.partyId" />
                <!-- company email address -->
                <service-call name="mantle.party.ContactServices.create#EmailAddress" 
                    in-map="[emailAddress: companyEmailAddress, partyId: companyPartyId,
                        contactMechPurposeId:'EmailPrimary']" out-map="emailOut"/>
                <!-- initialize accounting with defaults -->
                <service-call name="mantle.ledger.LedgerServices.init#PartyAccountingConfiguration"
                    in-map="[sourcePartyId: 'DefaultSettings',
                            organizationPartyId: companyPartyId, baseCurrencyUomId: currencyId]" />
                <!-- create productStore every claasification/appname have their own store, login should check too-->
                <service-call  name="growerp.100.PartyServices100.verifyAndGet#ProductStore"
                    in-map="[companyPartyId: companyPartyId, classificationId: classificationId]"/>
                <!-- set company in as ACTIVE_ORGANIZATION UserPreference -->
                <service-call name="create#moqui.security.UserPreference"
                    in-map="[userId: userAccount.userId, preferenceKey: 'ACTIVE_ORGANIZATION',
                     preferenceValue: companyPartyId]" />
                <!--send email -->
                <service-call name="org.moqui.impl.EmailServices.send#EmailTemplate" async="true">
                    <field-map field-name="emailTemplateId" value="WELCOME" />
                    <field-map field-name="toAddresses" from="emailAddress" />
                    <field-map field-name="bodyParameters" 
                        from="[classification: classificationId.substring(3),
                            newPassword:newPassword]" />
                </service-call>
                <!-- attach the user as an employee to the organization-->
                <service-call name="create#mantle.party.PartyRelationship"
                    in-map="[fromPartyId: userPartyId, fromRoleTypeId: 'Employee',
                        relationshipTypeEnumId: 'PrtEmployee', fromDate: fromDate,
                        toPartyId: companyPartyId, toRoleTypeId: 'OrgInternal']" />
                <!-- set party ownership -->
                <entity-find-one entity-name="mantle.party.Party" value-field="userParty"
                        for-update="true">
                    <field-map field-name="partyId" from="userPartyId"/></entity-find-one>
                <set field="userParty.ownerPartyId" from="companyPartyId"/>
                <entity-update value-field="userParty"/>
                <!-- set company ownership (Own itself)-->
                <entity-find-one entity-name="mantle.party.Party"
                        value-field="companyParty" for-update="true">
                    <field-map field-name="partyId" from="companyPartyId"/></entity-find-one>
                <set field="companyParty.ownerPartyId" from="companyPartyId"/>
                <entity-update value-field="companyParty"/>
                <!-- load demo data -->
                <script>ec.user.loginUser(username, newPassword)</script>
                <if condition="demoData == 'true'">
                    <service-call name="growerp.100.PartyServices100.load#DefaultData"
                        in-map="[companyPartyId: companyPartyId,
                                currencyId: currencyId,
                                classificationId: classificationId,
                                userPartyId: userAccount.partyId]"/></if>
                <!-- return company Data -->
                <service-call name="growerp.100.PartyServices100.get#Company"
                    out-map="authenticate"/>
                <!-- return user data -->
                <service-call name="growerp.100.PartyServices100.get#User"
                    in-map="userPartyId: userPartyId" out-map="authenticate"/>
                </if>
        </actions>
    </service>
    <service verb="verifyAndGet" noun="ProductStore">
        <in-parameters>
            <parameter name="companyPartyId" required="true"/>
            <parameter name="classificationId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="productStore"/>
            <parameter name="partyClassification"/>
        </out-parameters>
        <actions>
            <!-- verify classification -->
            <entity-find-one entity-name="mantle.party.PartyClassification"
                    value-field="classification">
                <field-map field-name="partyClassificationId" from="classificationId"/>
            </entity-find-one>
            <if condition="!classification">
                <return error="true" message="classificationId: $classificationId invalid"/>
            </if>
            <!-- verify party classification application-->
            <entity-find-one entity-name="mantle.party.PartyClassificationAndAppl"
                    value-field="partyClassification">
                <field-map field-name="partyId" from="companyPartyId"/>
                <field-map field-name="partyClassificationId" from="classificationId"/>
                <field-map field-name="classificationTypeEnumId" value="PcltMobileApp"/>
            </entity-find-one>
            <if condition="!partyClassification">
                <service-call name="create#mantle.party.PartyClassificationAppl"
                    in-map="[partyId: companyPartyId, partyClassificationId: classificationId,
                            classificationTypeEnumId: 'PcltMobileApp']" out-map="context" />
            </if>
            <!-- get productStore with classification(appname) -->
            <entity-find entity-name="mantle.product.store.ProductStore" list="stores">
                <econdition field-name="organizationPartyId" from="companyPartyId"/>
                <econdition field-name="storeDomain" from="classificationId"/>
            </entity-find>
            <if condition="stores">
                <set field="productStore" from="stores[0]"/>
                <return/>
            </if>
            <!-- create inventory facility if not there yet-->
            <entity-find entity-name="mantle.facility.Facility" list="facilities">
                <econdition field-name="ownerPartyId" from="companyPartyId"/>
            </entity-find>
            <if condition="facilities">
                <set field="facilityId" from="facilities[0].facilityId"/>
                <else>
                    <service-call name="create#mantle.facility.Facility"
                    in-map="[ownerPartyId: companyPartyId, facilityTypeEnumId: 'FcTpWarehouse',
                        facilityName: 'Inventory', assetAllowOtherOwner: 'N']"
                    out-map="context"/>
                </else>
            </if>
            <!-- create map for productStore -->
            <set field="inMap" from="[
                organizationPartyId: companyPartyId,
                storeDomain: classificationId,
                inventoryFacilityId: facilityId,
                ]"/>
            <if condition="classificationId == 'AppAdmin'">
                <set field="inMap" from="inMap + [
                requireInventory: 'N',
                reservationOrderEnumId:'AsResOrdNoRes',
                ]"/>
            </if>
            <if condition="classificationId == 'AppHotel'">
                <set field="inMap" from="inMap + [
                requireInventory: 'N',
                reservationOrderEnumId:'AsResOrdNoRes',
                ]"/>
            </if>
            <!-- create productStore -->
            <service-call name="create#mantle.product.store.ProductStore"
                out-map="context" in-map="inMap" />
            <!-- create root category if required -->
            <entity-find list="catgs"
                entity-name="mantle.product.category.ProductCategory">
                <econdition field-name="ownerPartyId" from="companyPartyId"/>
                <econdition field-name="productCategoryTypeEnumId" value="PctRoot"/>
            </entity-find>
            <if condition="catgs">
                <set field="rootProductCategoryId" from="catgs[0].productCategoryId"/>
                <else>
                    <service-call name="create#mantle.product.category.ProductCategory" out-map="context" 
                        in-map="[ownerPartyId: companyPartyId, productCategoryTypeEnumId: 'PctRoot',
                            categoryName: 'Root category for: ' + classificationId]" />
                    <set field="rootProductCategoryId" from="productCategoryId"/>
                </else>
            </if>
            <!-- connect to productstore -->
            <service-call name="create#mantle.product.store.ProductStoreCategory" 
                in-map="[productCategoryId: rootProductCategoryId,
                    storeCategoryTypeEnumId: 'PsctBrowseRoot',
                    productStoreId: productStoreId,
                    fromDate: fromDate]" />
            <entity-find entity-name="mantle.product.store.ProductStore" list="stores">
                <econdition field-name="organizationPartyId" from="companyPartyId"/>
                <econdition field-name="storeDomain" from="classificationId"/>
            </entity-find>
            <set field="productStore" from="stores[0]"/>
            <!-- hotel app not using categories but need one for products -->
            <entity-find list="categories" limit="1"
                    entity-name="mantle.product.category.ProductCategory">
                <econdition field-name="ownerPartyId" from="ownerPartyId"/>
                <econdition  field-name="categoryName" value="Room Types"/>
            </entity-find>
            <!-- already exist? -->
            <if condition="classificationId == 'AppHotel' &amp;&amp; !categories">
                <service-call name="create#mantle.product.category.ProductCategory"
                in-map="[categoryName: 'Room Types',
                    description: 'Dummy category to connect the room types',
                    productCategoryTypeEnumId: 'PctCatalog',
                    ownerPartyId: companyPartyId]"
                out-map="context"/>
                <service-call 
                    name="create#mantle.product.category.ProductCategoryRollup"
                    in-map="[parentProductCategoryId: rootProductCategoryId,
                            productCategoryId: productCategoryId]"/>
            </if>
        </actions>
    </service>

    <!--internal service used in register to run async-->
    <service verb="load" noun="DefaultData" transaction-timeout="3600">
        <!-- not reachable outside -->
        <in-parameters>
            <parameter name="companyPartyId" required="true"/>
            <parameter name="userPartyId" required="true"/>
            <parameter name="currencyId"/>
            <parameter name="classificationId"/>
            <parameter name="counterMax" default="1" type="Integer"/>
        </in-parameters>
        <actions>
            <!--script>sleep(3000)</script--><!-- wait for registration above to commit for async-->
            <entity-find entity-name="mantle.product.category.ProductCategory" list="rootList">
                <econdition field-name="productCategoryTypeEnumId" value="PctRoot"/>
                <econdition field-name="ownerPartyId" from="companyPartyId"/></entity-find>
            <if condition="!rootList">
                <return error="true" message="Root category not found for companyId: $companyPartyId"/></if>
            <set field="rootProductCategoryId" from="rootList[0].productCategoryId"/>

            <set field="companyCount" from="companyPartyId.substring(3,6)"/>
           
            <set field="users" from= "[
                [ firstName: 'James-a', lastName: 'Smith', emailAddress: 'james@example.com',
                    locale: 'EN', username: 'james', userGroupId: 'GROWERP_M_ADMIN' ,
                    image: 'demoFaces/1_m.jpg'],
                [ firstName: 'John-e', lastName: 'Williams', emailAddress: 'john@example.com',
                    locale: 'EN', username: 'john', userGroupId: 'GROWERP_M_EMPLOYEE',
                    image: 'demoFaces/2_m.jpg' ],
                [ firstName: 'Robert-c', lastName: 'Johnson', emailAddress: 'robert@example.com',
                    locale: 'EN', username: 'robert', userGroupId: 'GROWERP_M_CUSTOMER',
                    image: 'demoFaces/3_m.jpg', companyName: 'Trust Fund-c'],
                [ firstName: 'Michael-l', lastName: 'Brown', emailAddress: 'michael@example.com',
                    locale: 'EN', username: 'michael', userGroupId: 'GROWERP_M_LEAD',
                    image: 'demoFaces/4_m.jpg', companyName: 'Academic Advantage-l'],
                [ firstName: 'William-s', lastName: 'Jones', emailAddress: 'william@example.com',
                    locale: 'EN', username: 'william', userGroupId: 'GROWERP_M_SUPPLIER',
                    image: 'demoFaces/5_m.jpg', companyName: 'Gables Tutoring And Test Prep-s'],

                [ firstName: 'David-a', lastName: 'Miller', emailAddress: 'david@example.com',
                    locale: 'EN', username: 'david', userGroupId: 'GROWERP_M_ADMIN',
                    image: 'demoFaces/6_m.jpg'],
                [ firstName: 'Mary-e', lastName: 'Davis', emailAddress: 'Mary@example.com',
                    locale: 'EN', username: 'mary', userGroupId: 'GROWERP_M_EMPLOYEE',
                    image: 'demoFaces/1_f.jpg' ],
                [ firstName: 'Linda-c', lastName: 'Garcia', emailAddress: 'linda@example.com',
                    locale: 'EN', username: 'linda', userGroupId: 'GROWERP_M_CUSTOMER',
                    image: 'demoFaces/2_f.jpg', companyName: 'Miami Learning Center-c'],
                [ firstName: 'Barbara-l', lastName: 'Rodriguez', emailAddress: 'Barbara@example.com',
                    locale: 'EN', username: 'Barbara', userGroupId: 'GROWERP_M_LEAD',
                    image: 'demoFaces/3_f.jpg', companyName: 'TestMasters-l'],
                [ firstName: 'Maria-s', lastName: 'Wilson', emailAddress: 'maria@example.com',
                    locale: 'EN', username: 'maria', userGroupId: 'GROWERP_M_SUPPLIER',
                    image: 'demoFaces/4_f.jpg', companyName: 'Wavelength Suppliers-s'],
            ]"/>

            <set field="opportunities" from="[
                [ opportunityName: 'The best opportunity', description: 'the best oppr description',
                    nextStep: 'not sure yet', estAmount: 1000, estProbability: 33,
                    opportunityStageId: 'Prospecting'],
                [ opportunityName: 'The second best opportunity', description: 'the secondbest oppr description',
                    nextStep: 'not sure yet', estAmount: 5000, estProbability: 66,
                    opportunityStageId: 'Proposal']
            ]"/>

            <set field="tasks" from="[
                [ name: 'The first task' ],
                [ name: 'The second task' ],
                [ name: 'The third task' ],
                [ name: 'The fourth task' ],
                [ name: 'The fifth task' ]
            ]"/>

            <set field="nowDate" from="ec.user.nowTimestamp"/>
            <set field="counter" value="0" type="Integer"/>
            <while condition="counter++ &lt; counterMax">

                <!-- products and categories -->
                <!-- products  -->
                <set field="productsAdmin" from="[
                    [ productName: 'cola', description:'The traditional american drink', price: 1.4, image: 'cola', categoryName: 'drinks',assetTypeId: 'AsClsInventory'],
                    [ productName: 'wiskey', description:'Yes, from Scotland', price: 5.21, image: 'wiskey', categoryName: 'drinks',assetTypeId: 'AsClsInventory'],
                    [ productName: 'macaroni', description:'yes from Italy', price: 8.40, image: 'macaroni', categoryName: 'Food',assetTypeId: 'AsClsInventory'],
                    [ productName: 'hamburger', description:'Another US special', price: 6.50, image: 'hamburger', categoryName: 'Food',assetTypeId: 'AsClsInventory']
                ]"/>    

                <set field="productsHotel" from="[
                    [ productName: 'Single Room', description:'The Single bed room',
                        productTypeId: 'PtFixedAssetUse', assetClassId: 'AsClsRoom', assetTypeId: 'AstTpFixed',
                        price: 50, image: 'demoRooms/room1', categoryName: 'rooms'],
                    [ productName: 'Standard Room', description:'The Standard room',
                        productTypeId: 'PtFixedAssetUse', assetClassId: 'AsClsRoom', assetTypeId: 'AstTpFixed',
                        price: 80, image: 'demoRooms/room2', categoryName: 'rooms'],
                    [ productName: 'Deluxe Room', description:'The Deluxe room offering',
                        productTypeId: 'PtFixedAssetUse', assetClassId: 'AsClsRoom', assetTypeId: 'AstTpFixed',
                        price: 170, image: 'demoRooms/room3', categoryName: 'rooms'],
                    [ productName: 'Suite', description:'The Suite',
                        productTypeId: 'PtFixedAssetUse', assetClassId: 'AsClsRoom', assetTypeId: 'AstTpFixed',
                        price: 360, image: 'demoRooms/room4', categoryName: 'rooms'],
                    [ productName: 'Appartment', description:'The living,  two bedroom appartment',
                        productTypeId: 'PtFixedAssetUse', assetClassId: 'AsClsRoom', assetTypeId: 'AstTpFixed',
                        price: 460, image: 'demoRooms/room5', categoryName: 'rooms'],
                ]"/>  
                <if condition="classificationId == 'AppAdmin'"><set field="productsIn" from="productsAdmin"/></if>
                <if condition="classificationId == 'AppHotel'"><set field="productsIn" from="productsHotel"/></if>
                <!-- for hotel just create a one count list -->
                <if condition="classificationId == 'AppAdmin' || (classificationId == 'AppHotel' &amp;&amp; counter == 1)">
                    <iterate list="productsIn" entry="el">
                        <entity-find entity-name="mantle.product.category.ProductCategory" list="categories">
                            <econdition field-name="categoryName" from="el.categoryName + counter"/>
                            <econdition field-name="ownerPartyId" from="companyPartyId"/>
                        </entity-find>
                        <if condition="categories">
                            <set field="productCategoryId" from="categories[0].productCategoryId"/>
                            <else>
                                <service-call name="create#mantle.product.category.ProductCategory"
                                    in-map="[categoryName: el.categoryName + (classificationId != 'AppHotel'? counter : ''),
                                        description: el.categoryName,
                                        productCategoryTypeEnumId: 'PctCatalog',
                                        ownerPartyId: companyPartyId]"
                                    out-map="context"/>
                                <service-call 
                                    name="create#mantle.product.category.ProductCategoryRollup"
                                    in-map="[parentProductCategoryId: rootProductCategoryId,
                                            productCategoryId: productCategoryId]"/>
                                <service-call name="create#ProductCategoryContent" in-map="[
                                    productCategoryId: productCategoryId,
                                    categoryContentTypeEnumId: 'PcctImageThumbNail',
                                    contentLocation: 'dbresource://GrowERP/images/' +
                                        el.image + 'Small.png']" />
                                <service-call name="create#ProductCategoryContent" in-map="[
                                    productCategoryId: productCategoryId,
                                    categoryContentTypeEnumId: 'PcctImageMedium',
                                    contentLocation: 'dbresource://GrowERP/images/' +
                                        el.image + 'Medium.png']" />
                            </else>
                        </if>
                        <service-call name="create#mantle.product.Product" in-map="[
                            productTypeEnumId: el.productTypeId,
                            assetClassEnumId: el.assetClassId,
                            assetTypeEnumId: el.assetTypeId,
                            productName: el.productName + (classificationId != 'AppHotel'? counter : ''),
                            description: el.description,
                            ownerPartyId: companyPartyId,
                            ]" out-map="context" />
                        <service-call
                            name="create#mantle.product.category.ProductCategoryMember"
                            in-map="[productId: productId, productCategoryId: productCategoryId, fromDate: fromDate]"/>
                        <service-call name="create#mantle.product.ProductPrice"
                            in-map="[productId: productId, priceTypeEnumId: 'PptList',
                            priceUomId: currencyId, price: el.price,
                            fromDate: ec.user.nowTimestamp,
                            pricePurposeEnumId: 'PppPurchase']"/>
                        <service-call name="create#ProductContent" in-map="[
                            productId: productId,
                            productContentTypeEnumId: 'PcntImageSmall',
                            contentLocation: 'dbresource://GrowERP/images/' +
                                el.image + 'Small.png']" />
                        <service-call name="create#ProductContent" in-map="[
                            productId: productId,
                            productContentTypeEnumId: 'PcntImageMedium',
                            contentLocation: 'dbresource://GrowERP/images/' +
                                el.image + 'Medium.png']" />
                    </iterate>

                    <!-- assets -->
                    <entity-find entity-name="mantle.product.store.ProductStore" list="stores">
                        <econdition field-name="organizationPartyId" from="companyPartyId"/>
                        <econdition field-name="storeDomain" from="classificationId"/>
                    </entity-find>
                    <set field="assetsHotel" from="[
                        [ assetName: '01', productName: 'Single Room'],
                        [ assetName: '02', productName: 'Single Room'],
                        [ assetName: '03', productName: 'Single Room'],
                        [ assetName: '04', productName: 'Standard Room'],                
                        [ assetName: '05', productName: 'Standard Room'],                
                        [ assetName: '06', productName: 'Standard Room'],                
                        [ assetName: '07', productName: 'Deluxe Room'],                
                        [ assetName: '08', productName: 'Deluxe Room'],                
                        [ assetName: '09', productName: 'Suite'],                
                        [ assetName: '10', productName: 'Suite'],                
                        [ assetName: '11', productName: 'Appartment'],                
                        ]"/>
                    <set field="assetsAdmin" from="[
                        [ assetName: '01', productName: 'wiskey'],
                        [ assetName: '02', productName: 'wiskey'],
                        [ assetName: '03', productName: 'wiskey'],
                        [ assetName: '04', productName: 'macaroni'],
                        [ assetName: '05', productName: 'macaroni'],
                        [ assetName: '06', productName: 'macaroni'],
                        [ assetName: '07', productName: 'hamburger'],
                        [ assetName: '08', productName: 'hamburger'],
                        [ assetName: '09', productName: 'cola'],           
                        [ assetName: '10', productName: 'cola'],
                        ]"/>
                    <if condition="classificationId == 'AppHotel'"><set field="assetsIn" from="assetsHotel"/></if>
                    <if condition="classificationId == 'AppAdmin'"><set field="assetsIn" from="assetsAdmin"/></if>

                    <!-- find warehouse -->
                    <entity-find entity-name="mantle.facility.Facility" limit="1" list="facilities">
                        <econdition field-name="ownerPartyId" from="companyPartyId"/>
                    </entity-find>

                    <set field="xLoc" value="0" type="Integer"/>
                    <iterate list="assetsIn" entry="asset">
                        <entity-find entity-name="mantle.product.Product" list="products">
                            <econdition field-name="ownerPartyId" from="companyPartyId"/>
                            <econdition field-name="productName"
                                from="asset.productName + (classificationId != 'AppHotel'? counter : '')"/>
                        </entity-find>
                        <if condition="products">
                            <set field="product" from="products[0]"/>
                            <else>
                                <log
                                    message="While creating assets, could not find product: ${asset.productName + (classificationId != 'AppHotel'? counter : '')} on asset: ${asset.assetName}"/>
                                <continue/>
                            </else>
                        </if>
                        <!-- create location -->
                            <service-call name="create#mantle.facility.FacilityLocation"
                                in-map="[facilityId: facilities[0].facilityId,
                                        description: 'loc' + xLoc++]"
                                out-map="context"/>

                        <!-- do not put fixed asset in inventory we do not want the normal reserve process to work -->
                        <service-call name="create#mantle.product.asset.Asset" in-map="
                            productId: product.productId,
                            classEnumId: product.assetClassEnumId,
                            hasQuantity: 'N',
                            quantityOnHandTotal: 1,
                            assetTypeEnumId: product.assetTypeEnumId,
                            assetName: asset.assetName,
                            ownerPartyId: companyPartyId,
                            statusId: 'AstAvailable',
                            facilityId: product.assetTypeEnumId != 'AstTpFixed'? facilities[0].facilityId : null,
                            locationSeqId: product.assetTypeEnumId != 'AstTpFixed'?  locationSeqId : null
                            "/>
                    </iterate>
                </if>

                <!-- users -->
                <iterate list="users" entry="us">
                    <set field="userIn" from="groovy.json.JsonOutput.toJson([
                        firstName: us.firstName,
                        lastName: us.lastName + counter,
                        email: us.emailAddress.substring(0,us.emailAddress.indexOf('@')) + counter + companyCount + us.emailAddress.substring(us.emailAddress.indexOf('@')),
                        locale: 'EN',
                        name: us.username + counter + companyCount,
                        userGroupId: us.userGroupId, companyName: us.companyName,
                    ])"/>
                    <service-call name="growerp.100.PartyServices100.create#User"
                            in-map="[user: userIn]" out-map="context"/>
                </iterate>

                <!-- opportunities -->
                <set field="index" value="0" type="Integer"/>
                <iterate list="opportunities" entry="opp">
                    <set field="oppIn" from="groovy.json.JsonOutput.toJson([
                        opportunityName: opp.opportunityName,
                        description: opp.description,
                        nextStep: opp.nextStep,
                        estAmount: opp.estAmount,
                        estProbability: opp.estProbability,
                        opportunityStageId: opp.opportunityStageId,
                        ownerPartyId: companyPartyId,
                        accountPartyId: index%2 == 0? userPartyId: employeeUser1,
                        leadPartyId: index%2 == 0 ? leadUser1 : leadUser2
                    ])"/>
                    <service-call name="growerp.100.CrmServices100.create#Opportunity"
                                    in-map="[opportunity: oppIn]" out-map="context"/>
                    <set field="index" from="index + 1"/>
                </iterate>

                <!-- orders -->
                <set field="ordersAdmin" from="[
                    [ quantity: 5, price: 22.1, orderName: 'first generated order', productName: 'cola'],
                    [ quantity: 2, price: 20.1, orderName: 'first generated order', productName: 'wiskey'],
                    [ quantity: 4, price: 29.11, orderName: 'first generated order', productName: 'macaroni'],
                    [ quantity: 3, price: 12.1, orderName: 'second generated order', productName: 'hamburger'],
                    [ quantity: 4, price: 10.1, orderName: 'second generated order', productName: 'macaroni'],
                    [ quantity: 5, price: 19.11, orderName: 'second generated order', productName: 'wiskey']
                    ]"/>
                <!-- set time at mid day noon -->
                <set field="nowDate" from="ec.user.nowTimestamp"/>
                <set field="nowDate" from="ec.l10n.parseTimestamp(ec.l10n.format(nowDate, 'yyyy-MM-dd') + ' 12:00:00.000', 'yyyy-MM-dd HH:mm:ss.SSS')"/>
                <set field="ordersHotel" from="[
                    [ productName: 'Single Room', quantity: 1,
                        rentalFromDate: nowDate.plus(5), 
                        rentalThruDate: nowDate.plus(8), 
                        price: 90, orderName: 'first generated Hotel order'],
                    [ productName: 'Single Room', quantity: 2,
                        rentalFromDate: nowDate.plus(10),
                        rentalThruDate: nowDate.plus(15), 
                        orderName: 'second generated Hotel order'],                    
                    [ productName: 'Single Room', quantity: 1,
                        rentalFromDate: nowDate.plus(17), quantity: 1,
                        rentalThruDate: nowDate.plus(18), 
                        price: 110, orderName: 'third generated Hotel order'],
                    [ productName: 'Deluxe Room', quantity: 1,
                        rentalFromDate: nowDate.plus(20), quantity: 1,
                        rentalThruDate: nowDate.plus(21), 
                        price: 77, orderName: 'fourth generated Hotel order'],
                    [ productName: 'Deluxe Room', quantity: 1, 
                        rentalFromDate: nowDate.plus(12), quantity: 1,
                        rentalThruDate: nowDate.plus(14), 
                            orderName: 'fifth generated Hotel order'],
                    [ productName: 'Suite', quantity: 1,
                        rentalFromDate: nowDate.plus(4), quantity: 1,
                        rentalThruDate: nowDate.plus(11), 
                        orderName: 'fifth generated Hotel order']
                    ]"/>
    
                <if condition="classificationId == 'AppAdmin'"><set field="ordersIn" from="ordersAdmin"/></if>
                <if condition="classificationId == 'AppHotel'"><set field="ordersIn" from="ordersHotel"/></if>
                <entity-find entity-name="growerp.mobile.CompanyPersonAndLoginGroup" list="customers">
                    <econdition field-name="ownerPartyId" from="companyPartyId"/>
                    <econdition field-name="userGroupId" value="GROWERP_M_CUSTOMER"/>
                </entity-find>
                <entity-find entity-name="growerp.mobile.CompanyPersonAndLoginGroup" list="suppliers">
                    <econdition field-name="ownerPartyId" from="companyPartyId"/>
                    <econdition field-name="userGroupId" value="GROWERP_M_SUPPLIER"/>
                </entity-find>
                <entity-find-one entity-name="mantle.ledger.config.PartyAcctgPreference"
                        value-field="aPref">
                    <field-map field-name="organizationPartyId" from="companyPartyId"/>
                </entity-find-one>
                <set field="index" type="Integer" value="0"/>
                <iterate list="ordersIn" entry="order">
                    <entity-find entity-name="mantle.order.OrderHeader" list="orders">
                        <econdition field-name="orderName" from="order.orderName"/>
                    </entity-find>
                    <if condition="orders">
                        <set field="orderId" from="orders.orderId"/>
                        <else>
                            <service-call name="mantle.order.OrderServices.create#Order"
                                in-map="[
                                    sales: 'true',
                                    docType: 'Order',
                                    statusId: 'OrderOpen',
                                    currencyUomId: aPref.baseCurrencyUomId,
                                    productStoreId: stores[0].productStoreId,
                                    placedDate: ec.user.nowTimestamp,
                                    customerPartyId: customers[index%2].companyPartyId,
                                    vendorPartyId: companyPartyId,
                                ]" out-map="context"/>
                            <service-call name="create#mantle.order.OrderPartParty"
                                in-map="[orderId: orderId, orderPartSeqId: orderPartSeqId,
                                    partyId: customers[index%2].userPartyId,
                                    roleTypeId: 'CustomerContactPerson']"/>
                        </else>
                    </if>
                    <entity-find entity-name="growerp.mobile.product.ProductAndPriceAndProductCategory" list="products">
                        <econdition field-name="ownerPartyId" from="companyPartyId"/>
                        <econdition field-name="productName" operator="like" value="${order.productName}%"/>
                        <date-filter from-field-name="productFromDate" thru-field-name="productThruDate"/>
                    </entity-find>
                    <service-call
                        name="mantle.order.OrderServices.add#OrderProductQuantity"
                        in-map="context + [productId: products[0].productId,
                                            itemTypeEnumId: 'ItemRental',
                                            description: order.productName,
                                            unitAmount: order.price ?: products[0].price,
                                            requiredByDate: order.reservationDate,
                                            quantity: order.quantity]"
                        out-map="context"/>
                    <while condition="order.quantity--">
                        <service-call name="create#growerp.product.AssetRental"
                            in-map="[ productId: products[0].productId,
                            orderId: orderId, orderItemSeqId: orderItemSeqId,
                            rentalFromDate: order.rentalFromDate, rentalThruDate: order.rentalThruDate
                            ]"
                        />
                    </while>
                    <set field="order.orderId" from="orderId"/>
                    <service-call in-map="[order: [orderId: orderId, statusId:'OrderPlaced']]"
                        name="growerp.100.FinDocServices100.update#Order"/>
                    <set field="index" from="index + 1"/>
                </iterate>

                <!-- tasks -->
                <entity-find entity-name="growerp.mobile.CompanyPersonAndLoginGroup" list="employees">
                    <econdition field-name="ownerPartyId" from="companyPartyId"/>
                    <econdition field-name="userGroupId" value="GROWERP_M_EMPLOYEE"/>
                </entity-find>
                <set field="index" value="0" type="Integer"/>
                <iterate list="tasks" entry="task">
                    <!-- add task -->
                    <set field="taskIn" from="groovy.json.JsonOutput.toJson([
                        name: task.name
                    ])"/>
                    <service-call name="growerp.100.TaskServices100.create#Task"
                                    in-map="[task: taskIn]" out-map="context"/>
                    <!-- time entry -->
                    <set field="teIn" from="groovy.json.JsonOutput.toJson([
                        taskId: task.taskId,
                        partyId: employees[0].userPartyId,
                        hours: index,
                        date: nowDate.plus(1),
                    ])"/>
                    <service-call name="growerp.100.TaskServices100.create#TimeEntry"
                                    in-map="[timeEntry: teIn]" out-map="context"/>
                    <set field="teIn" from="groovy.json.JsonOutput.toJson([
                        taskId: task.taskId,
                        partyId: ec.user.userAccount.partyId,
                        hours: index,
                        date: nowDate.plus(3),
                    ])"/>
                    <service-call name="growerp.100.TaskServices100.create#TimeEntry"
                                    in-map="[timeEntry: teIn]" out-map="context"/>
                    <set field="index" from="index + 1"/>
                </iterate>

            </while>
        </actions>
    </service>

</services>