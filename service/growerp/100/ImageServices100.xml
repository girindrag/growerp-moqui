<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domaicrn Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">


    <service verb="upload" noun="Image">
        <in-parameters>
            <parameter name="type" required="true"/>
            <parameter name="id" required="true"/>
            <parameter name="file" type="org.apache.commons.fileupload.FileItem"/>
            <parameter name="base64"/>
        </in-parameters>
        <actions>
            <service-call name="growerp.100.CommonServices100.get#RelatedCompanyPartyId" out-map="context"/>
            <set field="pagePath" value="/${type}/${id}/"/>
            <set field="contentLocation" value="dbresource://C${ownerPartyId}/images${pagePath}"/>
            <log message="===uploading file of size ${base64.size()} to location: ${contentLocation}"/>
            <set field="ec" from="context.ec"/>
            <set field="attachmentReferenceLarge"
                from="ec.resource.getLocationReference(contentLocation + 'large')"/>
            <set field="attachmentReferenceMedium"
                from="ec.resource.getLocationReference(contentLocation + 'medium')"/>
            <set field="attachmentReferenceSmall"
                from="ec.resource.getLocationReference(contentLocation + 'small')"/>
            <script><![CDATA[
                import static java.awt.RenderingHints.*
                import java.awt.image.BufferedImage
                import javax.imageio.ImageIO
                import java.io.*

                int fileSize
                // store uploaded image to large format
                if (file) {
                    fileSize = file.getSize()
                    org.apache.commons.fileupload.FileItem attachmentFile = context.file
                    InputStream fileStream = attachmentFile.getInputStream()
                    attachmentReferenceLarge.putStream(fileStream)
                    fileStream.close()
                }
                if (base64) {
                    byte[] base64Decoded = Base64.getMimeDecoder().decode(base64)
                    if (base64Decoded == null || base64Decoded.size() == 0) {
                        logger.error("Could not read uploaded base64 file")
                        return
                    } else {
                        fileSize = base64Decoded.size()
                        fileStream = new ByteArrayInputStream(base64Decoded);
                        attachmentReferenceLarge.putStream(fileStream)
                        fileStream.close()
                    }
                } 
                //convert large image to medium format
                attachmentReferenceLarge = 
                    ec.resource.getLocationReference(contentLocation + 'large')
                fileStreamLarge = attachmentReferenceLarge.openStream()
                BufferedImage img = ImageIO.read(fileStreamLarge);
                def scale = 5000 / fileSize
                int newWidth = img.width * scale
                int newHeight = img.height * scale
                ByteArrayOutputStream os = new ByteArrayOutputStream();
                new BufferedImage( newWidth, newHeight, img.type ).with { i ->
                    createGraphics().with {
                        setRenderingHint( KEY_INTERPOLATION, VALUE_INTERPOLATION_BICUBIC )
                        drawImage( img, 0, 0, newWidth, newHeight, null )
                        dispose()
                    }
                    ImageIO.write( i, 'png', os )
                }
                InputStream is = new ByteArrayInputStream(os.toByteArray());
                attachmentReferenceMedium.putStream(is)
                is.close()
                fileStreamLarge.close()
                
                //convert large image to small format
                fileStreamLarge = attachmentReferenceLarge.openStream()
                img = ImageIO.read(fileStreamLarge);
                scale =2000 / fileSize
                newWidth = img.width * scale
                newHeight = img.height * scale
                os = new ByteArrayOutputStream();
                new BufferedImage( newWidth, newHeight, img.type ).with { i ->
                    createGraphics().with {
                        setRenderingHint( KEY_INTERPOLATION, VALUE_INTERPOLATION_BICUBIC )
                        drawImage( img, 0, 0, newWidth, newHeight, null )
                        dispose()
                    }
                    ImageIO.write( i, 'png', os )
                }
                is = new ByteArrayInputStream(os.toByteArray());
                attachmentReferenceSmall.putStream(is)
                is.close()
                fileStreamLarge.close()
                ]]></script>
                <if condition="type == 'user'  || type == 'company'">
                    <entity-delete-by-condition entity-name="mantle.party.PartyContent">
                        <econdition field-name="partyId" from="id"/>
                    </entity-delete-by-condition>
                    <service-call name="create#mantle.party.PartyContent" in-map="[
                        partyId: id, partyContentTypeEnumId: 'PcntImageSmall',
                        contentLocation: contentLocation + 'small']" />
                    <service-call name="create#mantle.party.PartyContent" in-map="[
                        partyId: id, partyContentTypeEnumId: 'PcntImageMedium',
                        contentLocation: contentLocation + 'medium']" />
                    <service-call name="create#mantle.party.PartyContent" in-map="[
                        partyId: id, partyContentTypeEnumId: 'PcntImageLarge',
                        contentLocation: contentLocation + 'large']" />
                </if>
                <if condition="type == 'product'">
                    <entity-delete-by-condition entity-name="mantle.product.ProductContent">
                        <econdition field-name="productId" from="id"/>
                    </entity-delete-by-condition>
                    <service-call name="create#mantle.product.ProductContent" in-map="[
                        productId: id, productContentTypeEnumId: 'PcntImageSmall',
                        contentLocation: contentLocation + 'small']" />
                    <service-call name="create#mantle.product.ProductContent" in-map="[
                        productId: id, productContentTypeEnumId: 'PcntImageMedium',
                        contentLocation: contentLocation + 'medium']" />
                    <service-call name="create#mantle.product.ProductContent" in-map="[
                        productId: id, productContentTypeEnumId: 'PcntImageLarge',
                        contentLocation: contentLocation + 'large']" />
                </if>
                <if condition="type == 'category'">
                    <entity-delete-by-condition entity-name="mantle.product.category.ProductCategoryContent">
                        <econdition field-name="productCategoryId" from="id"/>
                    </entity-delete-by-condition>
                    <service-call name="create#mantle.product.category.ProductCategoryContent" in-map="[
                        productCategoryId: id, categoryContentTypeEnumId: 'PcctImageThumbNail',
                        contentLocation: contentLocation + 'small']" />
                    <service-call name="create#mantle.product.category.ProductCategoryContent" in-map="[
                        productCategoryId: id, categoryContentTypeEnumId: 'PcctImageMedium',
                        contentLocation: contentLocation + 'medium']" />
                    <service-call name="create#mantle.product.category.ProductCategoryContent" in-map="[
                        productCategoryId: id, categoryContentTypeEnumId: 'PcctImageLarge',
                        contentLocation: contentLocation + 'large']" />
                </if>
                <if condition="type == 'area'">
                    <entity-delete-by-condition entity-name="mantle.product.category.ProductCategoryContent">
                        <econdition field-name="accommodationAreaId" from="id"/>
                    </entity-delete-by-condition>
                    <service-call name="create#growerp.mobile.location.AccommodationAreaContent" in-map="[
                        accommodationAreaId: id, accommodationAreaContentTypeEnumId: 'AactImageThumbNail',
                        contentLocation: contentLocation + 'small']" />
                    <service-call name="create#growerp.mobile.location.AccommodationAreaContent" in-map="[
                        accommodationAreaId: id, accommodationAreaContentTypeEnumId: 'AactImageMedium',
                        contentLocation: contentLocation + 'medium']" />
                    <service-call name="create#growerp.mobile.location.AccommodationAreaContent" in-map="[
                        accommodationAreaId: id, accommodationAreaContentTypeEnumId: 'AactImageLarge',
                        contentLocation: contentLocation + 'large']" />
                    </if>
                <log message="Uploaded ${contentLocation}"/>
            </actions>
    </service>

    <service verb="download" noun="Image">
        <description>
            download an image from the content store
        </description>
        <in-parameters>
            <parameter name="contentLocation" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="imageFile" default-value=""/>
        </out-parameters>
        <actions>
            <set field="resourceReference" from="ec.resource.getLocationReference(contentLocation)"/>
            <if condition="!resourceReference || !resourceReference.getExists()">
                <log level="info" message="Could not find resource at [${contentLocation}]"/>
            <else>
                <set field="inputStream" from="resourceReference.openStream()"/>
                <set field="docBytes" from="org.apache.commons.io.IOUtils.toByteArray(inputStream)"/>
                <set field="imageFile" from="org.apache.commons.codec.binary.Base64.encodeBase64String(docBytes)"/>
                </else>
            </if>
        </actions>
    </service>

    <service verb="update" noun="Image">
        <description>
            update an image send as base64 as part of a model update =====experimental!======
        </description>
        <in-parameters>
            <parameter name="contentLocation" required="true"/>
            <parameter name="imageFile"/>
        </in-parameters>
        <actions>
            <script>byte[] base64Decoded = Base64.getMimeDecoder().decode(imageFile)</script>
            <if condition="base64Decoded == null || base64Decoded.size() == 0">
                <return error="true" message="No valid base64 decoded image file found"/></if>
            <set field="resourceReference" from="ec.resource.getLocationReference(contentLocation)"/>
            <if condition="!resourceReference || !resourceReference.getExists()">
                <log level="info" message="Could not find resource at [${contentLocation}]"/>
            <else>
                <script>
                    fileStream = new ByteArrayInputStream(base64Decoded);
                    try { resourceReference.putStream(fileStream) } finally { fileStream.close() }
                </script>
                </else>
            </if>


            <!--script>byte[] base64Decoded = Base64.getMimeDecoder().decode(contentFile)</script>
            <if condition="base64Decoded == null || base64Decoded.size() == 0">
                <return error="true" message="No valid base64 decoded image file found"/></if>
            <set field="docRr" from="ec.resource.getLocationReference(contentLocation)"/>
            <script>
                fileStream = new ByteArrayInputStream(base64Decoded);
                try { docRr.putStream(fileStream) } finally { fileStream.close() }
            </script-->

        </actions>
    </service>

</services>
