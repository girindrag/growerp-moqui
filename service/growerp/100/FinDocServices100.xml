<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domaicrn Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <service verb="convert" noun="StatusId">
        <in-parameters>
            <parameter name="docType" required="true"/>
            <parameter name="sales" type="Boolean"/>
            <parameter name="statusId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="convertedStatusId"/>
        </out-parameters>
        <actions>
            <!-- task status -->
            <if condition="docType == 'task'">
                <set field="taskStatusValues" from="[
                'WeApproved': 'Approved',
                'WeCancelled': 'Cancelled',
                'WeClosed': 'Closed',
                'WeComplete': 'Complete',
                'WeInPlanning': 'In Planning',
                'WeInProgress': 'In Progress',
                'WeOnHold': 'On Hold',
                'Approved': 'WeApproved',
                'Cancelled': 'WeCancelled',
                'Closed': 'WeClosed',
                'Complete': 'WeComplete',
                'In Planning': 'WeInPlanning',
                'In Progress': 'WeInProgress',
                'On Hold': 'WeOnHold'
                ]"/>
                <set field="convertedStatusId" from="taskStatusValues[statusId]"/>
            </if>
            <!-- Product status and classEnumId translation -->
            <if condition="docType == 'product'">
                <set field="productTypeValues" from="[
                'PtService': 'Service',
                'PtAsset': 'Physical Good',
                'PtFixedAssetUse': 'Rental',
                'Service': 'PtService',
                'Physical Good': 'PtAsset',
                'Rental': 'PtFixedAssetUse',
                ]"/>
                <set field="convertedStatusId" from="productTypeValues[statusId]"/>
            </if>
            <if condition="docType == 'asset'">
                <set field="assetStatusValues" from="[
                AstAvailable: 'Available',
                Available: 'AstAvailable',
                AstDeactivated: 'Deactivated',
                Deactivated: 'AstDeactivated',
                'In Use': 'AstInUse',
                'AstInUse': 'In Use',
                'Hotel Room': 'AsClsRoom',
                'Restaurant Table': 'AsClsTable',
                'Restaurant Table Area': 'AsClsTableArea',
                'AsClsRoom': 'Hotel Room',
                'AsClsTable': 'Restaurant Table',
                'AsClsTableArea': 'Restaurant Table Area',
                ]"/>
                <set field="convertedStatusId" from="assetStatusValues[statusId]"/>
            </if>
            <if condition="docType == 'Order'">
                <set field="orderStatusValues" from="[
                    OrderOpen: 'FinDocPrep',
                    FinDocPrep: 'OrderOpen',
                    OrderPlaced: 'FinDocCreated',
                    FinDocCreated:'OrderPlaced',
                    OrderApproved: 'FinDocApproved',
                    FinDocApproved: 'OrderApproved',
                    OrderCompleted: 'FinDocCompleted',
                    FinDocCompleted: 'OrderCompleted',
                    OrderCancelled: 'FinDocCancelled',
                    FinDocCancelled:'OrderCancelled'
                ]"/>
                <set field="convertedStatusId" from="orderStatusValues[statusId]"/>
            </if>
            <if condition="docType == 'Shipment'">
                <set field="orderStatusValues" from="[
                    ShipInput: 'FinDocPrep',
                    FinDocPrep: 'ShipInput',
                    ShipScheduled: 'FinDocCreated',
                    FinDocCreated:'ShipScheduled',
                    ShipPacked: 'FinDocApproved',
                    FinDocApproved: 'ShipPacked',
                    ShipShipped: 'FinDocCompleted',
                    FinDocCompleted: 'ShipShipped',
                    ShipCancelled: 'FinDocCancelled',
                    FinDocCancelled:'ShipCancelled'
                ]"/>
                <set field="convertedStatusId" from="orderStatusValues[statusId]"/>
            </if>
            <if condition="docType == 'Invoice'">
                <if condition="sales == true">
                    <set field="invoiceStatusValues" from="[
                        InvoiceInProcess: 'FinDocPrep',
                        FinDocPrep: 'InvoiceInProcess',
                        InvoiceFinalized: 'FinDocCreated',
                        FinDocCreated: 'InvoiceFinalized',
                        InvoiceSent: 'FinDocApproved',
                        FinDocApproved: 'InvoiceSent',
                        InvoicePmtRecvd: 'FinDocCompleted',
                        FinDocCompleted: 'InvoicePmtRecvd',
                        InvoiceCancelled: 'FinDocCancelled',
                        FinDocCancelled: 'InvoiceCancelled'
                        ]"/>
                    <else>
                        <set field="invoiceStatusValues" from="[
                            InvoiceIncoming: 'FinDocPrep',
                            FinDocPrep: 'InvoiceIncoming',
                            InvoiceReceived: 'FinDocCreated',
                            FinDocCreated: 'InvoiceReceived',
                            InvoiceApproved: 'FinDocApproved',
                            FinDocApproved: 'InvoiceApproved',
                            InvoicePmtSent: 'FinDocCompleted',
                            InvoiceBilledThrough: 'FinDocCompleted',
                            FinDocCompleted: 'InvoicePmtSent',
                            InvoiceCancelled: 'FinDocCancelled',
                            FinDocCancelled: 'InvoiceCancelled'
                            ]"/>
                    </else>
                </if>
                <set field="convertedStatusId" from="invoiceStatusValues[statusId]"/>
            </if>
            <if condition="docType == 'Payment'">
                    <set field="paymentStatusValues" from="[
                        PmntProposed: 'FinDocPrep',
                        FinDocPrep: 'PmntProposed',
                        PmntPromised: 'FinDocCreated',
                        FinDocCreated: 'PmntPromised',
                        PmntAuthorized: 'FinDocApproved',
                        FinDocApproved: 'PmntAuthorized',
                        PmntDelivered: 'FinDocCompleted',
                        FinDocCompleted: 'PmntDelivered',
                        PmntConfirmed: 'FinDocCompleted',
                        PmntCancelled: 'FinDocCancelled',
                        FinDocCancelled: 'PmntCancelled'
                    ]"/>
                <set field="convertedStatusId" from="paymentStatusValues[statusId]"/>
            </if>
            <if condition="docType == 'Transaction'">
                <set field="transactionStatusValues" from="[
                        NotPosted: 'FinDocPrep',
                        FinDocPrep: 'NotPosted',
                        Posted: 'FinDocCompleted',
                        FinDocCompleted: 'Posted',
                    ]"/>
                <set field="convertedStatusId" from="transactionStatusValues[statusId]"/>
            </if>
        </actions>
    </service>

    <service verb="get" noun="FinDoc">
        <description>
            Get order information by order, item and party
        </description>
        <in-parameters>
            <parameter name="finDocId"/><!-- depending on type can be invoice/payment/order -->
            <parameter name="sales" type="Boolean" required="true"/>
            <parameter name="docType" required="true"/>
            <parameter name="open" type="Boolean" default-value="true"/>
            <parameter name="startDate"><description>Format should be YYYY-MM-DD</description></parameter>
            <parameter name="start" default-value="0" type="Integer"/>
            <parameter name="limit" default-value="10" type="Integer"/>
            <parameter name="search" default="null"/>
            <parameter name="customerCompanyPartyId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="finDocs" type="List" default="[]"/>
            <parameter name="finDoc" type="Map" default="[:]"/>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"/>
            <if condition="startDate">
                <set field="tsDate"
                    from="ec.l10n.parseTimestamp(ec.l10n.format(startDate, 'yyyy-MM-dd')
                        + ' 23:59:59.999', 'yyyy-MM-dd HH:mm:ss.SSS')"/>
            </if>
            <if condition="search != null">
                <set field="search" value="%${search}%"/></if>

            <set field="finDocOut" from="[:]"/>
            <set field="finDocs" from="[]"/>
            <set field="finDocItems" from="[]"/>

            <if condition="sales == true">
                <set field="vendorPartyId" from="companyPartyId"/>
            <else>
                <set field="customerPartyId" from="companyPartyId"/></else></if>
            <set field="current" value="0" type="Integer"/>
            <!-- order -->
            <if condition="docType == 'Order'">
                <if condition="search">
                    <entity-find list="items" offset="start" limit="limit"
                            entity-name="growerp.order.OrderHeaderPartItemPartiesAndReservation">
                            <econdition field-name="vendorPartyId" from="vendorPartyId"
                                ignore-if-empty="true"/>
                            <econdition field-name="customerPartyId" from="customerPartyId"
                                ignore-if-empty="true"/>
                            <econditions combine="or">
                                <econdition field-name="orderId" ignore-case="true"
                                    operator="like" from="search"/>
                                <econdition field-name="vendorCompanyName" ignore-case="true"
                                    operator="like" from="search"/>
                                <econdition field-name="vendorLastName" ignore-case="true"
                                    operator="like" from="search"/>
                                <econdition field-name="customerCompanyName" ignore-case="true"
                                    operator="like" from="search"/>
                                <econdition field-name="customerLastName" ignore-case="true"
                                    operator="like" from="search"/>
                            </econditions>
                            <order-by field-name="orderPlacedDate"/>
                        <!--use-iterator/-->
                    </entity-find>
                <else><if condition="customerCompanyPartyId"><!-- by customer for ecommerce -->
                    <entity-find list="items" offset="start" limit="limit"
                            entity-name="growerp.order.OrderHeaderPartItemPartiesAndReservation">
                        <econdition field-name="customerPartyId" from="customerCompanyPartyId"/>
                        <use-iterator/>
                    </entity-find>
                <else><if condition="finDocId"><!-- single document -->
                    <entity-find list="items"
                            entity-name="growerp.order.OrderHeaderPartItemPartiesAndReservation">
                        <econdition field-name="orderId" from="finDocId"/>
                        <econditions combine="or">
                            <econdition field-name="vendorPartyId" from="ownerPartyId"
                                ignore-if-empty="true"/>
                            <econdition field-name="customerPartyId" from="ownerPartyId"
                                ignore-if-empty="true"/>
                        </econditions>
                        <order-by field-name="orderItemSeqId"/>
                    </entity-find>
                <else><!-- multiple documents -->
                    <set field="statusList"
                        from="['OrderOpen','OrderPlaced','OrderApproved']"/> <!-- OrderCompleted OrderCancelled' -->
                    <if condition="open == true &amp;&amp; !finDocId &amp;&amp; !search">
                        <set field="status" from="statusList"/>
                    </if>
                    <entity-find offset="start" limit="limit" list="items"
                            entity-name="growerp.order.OrderHeaderPartItemPartiesAndReservation">
                        <econdition field-name="vendorPartyId" from="vendorPartyId"
                            ignore-if-empty="true"/>
                        <econdition field-name="customerPartyId" from="customerPartyId"
                            ignore-if-empty="true"/>
                        <econdition field-name="statusId" operator="in" from="status"
                            ignore-if-empty="true"/>
                        <econdition field-name="placedDate" operator="less-equals"
                            from="tsDate" ignore-if-empty="true"/>
                        <order-by field-name="rentalFromDate"/>
                        <order-by field-name="orderId"/>
                        <order-by field-name="orderItemSeqId"/>
                        <!--use-iterator/-->
                    </entity-find>
                    </else></if></else></if></else>
                </if>
                <set field="lastItem" from="null"/>
                <iterate entry="item" list="items">
                    <!-- new orderId, so add last order to the list-->
                    <if condition="lastItem &amp;&amp; lastItem.orderId != item.orderId">
                        <set field="finDocOut.items" from="finDocItems"/> 
                        <script>finDocs.add(finDocOut)</script>
                        <if condition="current++ == limit"><break/></if>
                    </if>
                    <!-- first order -->
                    <if condition="!lastItem || lastItem.orderId != item.orderId">
                        <if condition="!sales">
                            <set field="userOut" from="[
                                            companyPartyId: item.vendorPartyId,
                                            companyName: item.vendorCompanyName,
                                            partyId: item.vendorUserPartyId,
                                            firstName: item.vendorFirstName,
                                            lastName: item.vendorLastName,
                                            email: item.vendorEmail
                                        ]"/>
                            <else>
                                <set field="userOut" from="[
                                            companyPartyId: item.customerPartyId,
                                            companyName: item.customerCompanyName,
                                            partyId: item.customerUserPartyId,
                                            firstName: item.customerFirstName,
                                            lastName: item.customerLastName,
                                            email: item.customerEmail
                                        ]"/>
                            </else>
                        </if>
                        <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                            in-map="[sales: sales, docType: docType, statusId: item.statusId]" out-map="context"/>
                        <set field="finDocOut" from="[
                            orderId: item.orderId,
                            paymentId: item.paymentId,
                            description: item.orderName,
                            statusId: convertedStatusId,
                            creationDate: item.entryDate
                                ? item.entryDate.toString().substring(0,19) + 'Z': null,
                            placedDate: item.placedDate
                                ? item.entryDate.toString().substring(0,19) + 'Z' : null,
                            sales: sales,
                            docType: docType,
                            otherUser: userOut,
                            grandTotal: item.grandTotal ? item.grandTotal.toString(): null,
                            ]"/>
                        <set field="finDocItems" from="[]"/>
                    </if>
                    <set field="finDocItem" from="[
                        itemSeqId: item.orderItemSeqId,
                        productId: item.productId,
                        itemTypeId: item.itemTypeId,
                        itemTypeName: item.itemTypeName,
                        description: item.description,
                        quantity: item.quantity.toString(),
                        price: item.unitAmount.toString(),
                        assetId: item.assetId,
                        assetName: item.assetName,
                        rentalFromDate: item.rentalFromDate
                            ?  ec.l10n.format(item.rentalFromDate,'yyyy-MM-dd') : null,
                        rentalThruDate: item.rentalThruDate
                            ? ec.l10n.format(item.rentalThruDate,'yyyy-MM-dd') : null,
                        ]"/>
                    <script>finDocItems.add(finDocItem)</script>
                    <set field="lastItem" from="item"/>
                </iterate>
                <if condition="lastItem">
                    <set field="finDocOut.items" from="finDocItems"/>
                    <script>finDocs.add(finDocOut)</script>
                </if>
            </if>
            <!-- invoice -->
            <if condition="docType == 'Invoice'">
                <set field="openStatusList"
                    from="['InvoiceInProcess', 'InvoiceFinalized', 'InvoiceApproved']"/>
                <if condition="!sales">
                    <set field="openStatusList"
                        from="['InvoiceIncoming','InvoiceReceived', 'InvoiceApproved']"/>
                </if>
                <if condition="finDocId">
                    <entity-find
                            entity-name="growerp.account.InvoiceItemsAndParties" list="items">
                        <econdition field-name="invoiceId" from="finDocId"/>
                        <econditions combine="or">
                            <econdition field-name="fromPartyId" from="ownerPartyId"/>
                            <econdition field-name="toPartyId" from="ownerPartyId"/>
                        </econditions>
                        <order-by field-name="invoiceItemSeqId"/>
                    </entity-find>
                    <if condition="!items">
                        <return error="false" message="Invoice: $finDocId not found!"/>
                    </if>
                    <else><!-- invoice list -->
                        <if condition="open == true &amp;&amp; !finDocId &amp;&amp; !search">
                            <set field="statusList" from="openStatusList"/></if>
                        <entity-find offset="start" limit="limit" 
                                entity-name="growerp.account.InvoiceItemsAndParties" list="items">
                            <econdition field-name="toPartyId"
                                from="customerPartyId" ignore-if-empty="true"/>
                            <econdition field-name="fromPartyId"
                                from="vendorPartyId" ignore-if-empty="true"/>
                            <econdition field-name="statusId" operator="in"
                                from="statusList" ignore-if-empty="true"/>
                            <econdition field-name="invoiceDate" operator="less-equals"
                                from="tsDate" ignore-if-empty="true"/>
                            <econditions combine="or">
                                <econdition field-name="invoiceId" ignore-case="true"
                                    operator="like" from="search" ignore-if-empty="true"/>
                                <econdition field-name="orderId" ignore-case="true"
                                    operator="like" from="search" ignore-if-empty="true"/>
                            </econditions>
                            <order-by field-name="invoiceId,invoiceItemSeqId"/>
                            <!--use-iterator/-->
                        </entity-find>                            
                    </else>
                </if>
                <set field="lastItem" from="null"/>
                <iterate entry="item" list="items">
                    <if condition="lastItem &amp;&amp; lastItem.invoiceId != item.invoiceId">
                        <set field="finDocOut.items" from="finDocItems"/> 
                        <script>finDocs.add(finDocOut)</script>
                        <if condition="current++ == limit"><break/></if>
                    </if>
                    <if condition="!lastItem || lastItem.invoiceId != item.invoiceId">
                        <if condition="!sales">
                            <set field="userOut" from="[
                                            companyPartyId: item.vendorPartyId,
                                            companyName: item.vendorCompanyName,
                                            partyId: item.vendorUserPartyId,
                                            firstName: item.vendorFirstName,
                                            lastName: item.vendorLastName,
                                            email: item.vendorEmail
                                        ]"/>
                            <else>
                                <set field="userOut" from="[
                                            companyPartyId: item.customerPartyId,
                                            companyName: item.customerCompanyName,
                                            partyId: item.customerUserPartyId,
                                            firstName: item.customerFirstName,
                                            lastName: item.customerLastName,
                                            email: item.customerEmail
                                        ]"/>
                            </else>
                        </if>
                        <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                            in-map="[sales: sales, docType: docType, statusId: item.statusId]"
                            out-map="context"/>
                        <set field="finDocOut" from="[
                            docType: docType,
                            sales: sales,
                            orderId: item.orderId,
                            invoiceId: item.invoiceId,
                            description: item.invoiceName,
                            statusId: convertedStatusId,
                            creationDate: item.invoiceDate
                                ? item.invoiceDate.toString().substring(0,19) + 'Z' : null,
                            otherUser: userOut,
                            grandTotal: item.invoiceTotal
                                ? item.invoiceTotal.toString() : null,
                            ]"/>
                        <set field="finDocItems" from="[]"/>
                    </if>
                    <set field="finDocItem" from="[
                        itemSeqId: item.invoiceItemSeqId,
                        productId: item.productId,
                        itemTypeId: item.itemTypeId,
                        itemTypeName: item.itemTypeName,
                        description: item.description,
                        quantity: item.quantity ? item.quantity.toString() : null,
                        price: item.amount ? item.amount.toString() : null,
                        ]"/>
                    <script>finDocItems.add(finDocItem)</script>
                    <set field="lastItem" from="item"/>
                </iterate>
                <if condition="lastItem">
                    <set field="finDocOut.items" from="finDocItems"/>
                    <script>finDocs.add(finDocOut)</script>
                </if>
            </if>
            <!-- payment -->
            <if condition="docType == 'Payment'">
                <set field="openStatusList"
                    from="['PmntProposed','PmntPromised','PmntAuthorized']"/>
                <if condition="finDocId">
                    <entity-find
                            entity-name="growerp.order.PaymentAndInfo" list="items">
                        <econdition field-name="paymentId" from="finDocId"/>
                        <econditions combine="or">
                            <econdition field-name="fromPartyId" from="ownerPartyId"
                                ignore-if-empty="true"/>
                            <econdition field-name="toPartyId" from="ownerPartyId"
                                ignore-if-empty="true"/>
                        </econditions>
                    </entity-find>
                    <else>
                        <if condition="open == true &amp;&amp; !finDocId &amp;&amp; !search">
                            <set field="statusList" from="openStatusList"/>
                        </if>
                        <entity-find offset="start" limit="limit" 
                                entity-name="growerp.order.PaymentAndInfo" list="items">
                            <econdition field-name="toPartyId" from="vendorPartyId"
                                ignore-if-empty="true"/>
                            <econdition field-name="fromPartyId" from="customerPartyId"
                                ignore-if-empty="true"/>
                            <econdition field-name="statusId" operator="in" from="statusList"
                                ignore-if-empty="true"/>
                            <econdition field-name="paymentDate" operator="less-equals"
                                from="tsDate" ignore-if-empty="true"/>
                            <econditions combine="or">
                                <econdition field-name="paymentId" ignore-case="true"
                                    operator="like" from="search" ignore-if-empty="true"/>
                                <econdition field-name="invoiceId" ignore-case="true"
                                    operator="like" from="search" ignore-if-empty="true"/>
                                <econdition field-name="forInvoiceId" ignore-case="true"
                                    operator="like" from="search" ignore-if-empty="true"/>
                                <econdition field-name="orderId" ignore-case="true"
                                    operator="like" from="search" ignore-if-empty="true"/>
                            </econditions>
                            <order-by field-name="paymentId"/>
                        </entity-find>
                    </else>
                </if>
                <!-- Iterate thru item list -->
                <set field="lastItem" from="null"/>
                <set field="paymentMethod" from="[:]"/>
                <iterate entry="item" list="items">
                    <!-- new paymentId, so add last payment to the list-->
                    <if condition="lastItem &amp;&amp; lastItem.paymentId != item.paymentId">
                        <set field="finDocOut.otherUser.companyPaymentMethod" from="paymentMethod"/>
                        <script>finDocs.add(finDocOut)</script>
                        <set field="paymentMethod" from="[:]"/>
                    </if>
                    <!-- first payment record -->
                    <if condition="!lastItem || lastItem.paymentId != item.paymentId">
                        <if condition="sales">
                            <set field="userOut" from="[
                                            companyPartyId: item.vendorPartyId,
                                            companyName: item.vendorCompanyName,
                                            partyId: item.vendorUserPartyId,
                                            firstName: item.vendorFirstName,
                                            lastName: item.vendorLastName,
                                            email: item.vendorEmail,
                                            companyPaymentMethod: paymentMethod,
                                        ]"/>
                            <else>
                                <set field="userOut" from="[
                                            companyPartyId: item.customerPartyId,
                                            companyName: item.customerCompanyName,
                                            partyId: item.customerUserPartyId,
                                            firstName: item.customerFirstName,
                                            lastName: item.customerLastName,
                                            email: item.customerEmail,
                                            companyPaymentMethod: paymentMethod,
                                        ]"/>
                            </else>
                        </if>
                        <!-- glAccountId -> itemType -->
                        <if condition="item.itemTypeGlAccountId">
                            <entity-find entity-name="mantle.ledger.config.ItemTypeAndGlAccount" list="glAccounts">
                                <econdition field-name="organizationPartyId" from="companyPartyId"/>
                                <econdition field-name="glAccountId" from="item.itemTypeGlAccountId" />
                            </entity-find>
                            <if condition="glAccounts">
                                <set field="items"
                                    from="[[itemTypeId: glAccounts[0].itemTypeEnumId]]" type="List"/>
                            </if>
                        </if>
                        <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                            in-map="[sales: sales, docType: docType, statusId: item.statusId]" out-map="context"/>
                        <set field="finDocOut" from="[
                            orderId: item.orderId,
                            paymentInstrument: item.paymentInstrumentId.substring(2),
                            paymentId: item.paymentId,
                            invoiceId: item.invoiceId ? item.invoiceId : item.forInvoiceId,
                            statusId: convertedStatusId,
                            creationDate: item.effectiveDate
                                ? item.effectiveDate.toString().substring(0,19) + 'Z' : null,
                            sales: sales,
                            docType: docType,
                            otherUser: userOut,
                            grandTotal: item.amount ? item.amount.toString() : null,
                            items: items ? items : [],
                            ]"/>
                    </if>
                    <!-- payment method of 'otherParty' -->
                    <if condition="sales &amp;&amp; item.customerPaymentMethodId">
                        <set field="paymentMethodId" from="item.customerPaymentMethodId"/>
                        <set field="paymentMethodTypeId" from="item.customerPaymentMethodTypeId"/>
                    </if>
                    <if condition="!sales &amp;&amp; item.vendorPaymentMethodId">
                        <set field="paymentMethodId" from="item.vendorPaymentMethodId"/>
                        <set field="paymentMethodTypeId" from="item.vendorPaymentMethodTypeId"/>
                    </if>
                    <!-- check if credit card, then credit card info (other types to be added)-->
                    <if condition="paymentMethodId">
                        <if condition="paymentMethodTypeId == 'PmtCreditCard'">
                            <set field="paymentMethod.ccPaymentMethodId" from="paymentMethodId"/>
                            <entity-find entity-name="mantle.account.method.CreditCard" list="cCards">
                                <econdition field-name="paymentMethodId" from="paymentMethodId"/>
                            </entity-find>
                            <set field="paymentMethod.cardType" from="ec.entity.find('moqui.basic.Enumeration')
                                .condition('enumId', cCards[0].creditCardTypeEnumId).one().description"/>
                            <set field="nrLength" from="cCards[0].cardNumber.length()"/>
                            <set field="cardNumberHidden" value="${cardType}**********${cCards[0].cardNumber.substring(nrLength-4,nrLength)} ${cCards[0].expireDate}"/>
                            <set field="paymentMethod.ccDescription" from="cardNumberHidden"/>
                        </if>
                    </if>
                    <set field="lastItem" from="item"/>
                </iterate>
                <if condition="lastItem">
                    <set field="finDocOut.otherUser.companyPaymentMethod" from="paymentMethod"/>
                    <script>finDocs.add(finDocOut)</script>
                </if>
            </if>
            <if condition="docType == 'Shipment'">
                <set field="openStatusList"
                    from="['ShipInput','ShipScheduled','ShipPicked',
                            'ShipPacked','ShipShipped']"/>
                <if condition="finDocId">
                    <entity-find
                            entity-name="growerp.warehouse.ShipmentAndPartiesAndWarehouse" list="items">
                        <econdition field-name="shipmentId" from="finDocId"/>
                        <econditions combine="or">
                            <econdition field-name="fromPartyId" from="ownerPartyId"
                                ignore-if-empty="true"/>
                            <econdition field-name="toPartyId" from="ownerPartyId"
                                ignore-if-empty="true"/>
                        </econditions>
                    </entity-find>
                    <else>
                        <if condition="open == true &amp;&amp; !finDocId &amp;&amp; !search">
                            <set field="status" from="openStatusList"/></if>
                        <entity-find offset="start" limit="limit" 
                            entity-name="growerp.warehouse.ShipmentAndPartiesAndWarehouse" list="items">
                            <econdition field-name="toPartyId" from="customerPartyId"
                                ignore-if-empty="true"/>
                            <econdition field-name="fromPartyId" from="vendorPartyId"
                                ignore-if-empty="true"/>
                            <econdition field-name="statusId" operator="in"
                                from="status" ignore-if-empty="true"/>
                            <econdition field-name="entryDate" operator="less-equals"
                                from="tsDate" ignore-if-empty="true"/>
                            <econditions combine="or">
                                <econdition field-name="shipmentId" ignore-case="true"
                                    operator="like" from="search" ignore-if-empty="true"/>
                                <econdition field-name="orderId" ignore-case="true"
                                    operator="like" from="search" ignore-if-empty="true"/>
                            </econditions>
                            <order-by field-name="shipmentId"/>
                        </entity-find>
                    </else>
                </if>
                <set field="lastItem" from="null"/>
                <iterate entry="item" list="items">
                    <if condition="lastItem &amp;&amp; lastItem.shipmentId != item.shipmentId">
                        <set field="finDocOut.items" from="finDocItems"/> 
                        <script>finDocs.add(finDocOut)</script>
                        <if condition="current++ == limit"><break/></if>
                    </if>
                    <if condition="!lastItem || lastItem.shipmentId != item.shipmentId">
                        <if condition="!sales">
                            <set field="userOut" from="[
                                            companyPartyId: item.vendorPartyId,
                                            companyName: item.vendorCompanyName,
                                            partyId: item.vendorUserPartyId,
                                            firstName: item.vendorFirstName,
                                            lastName: item.vendorLastName,
                                            email: item.vendorEmail
                                        ]"/>
                            <else>
                                <set field="userOut" from="[
                                            companyPartyId: item.customerPartyId,
                                            companyName: item.customerCompanyName,
                                            partyId: item.customerUserPartyId,
                                            firstName: item.customerFirstName,
                                            lastName: item.customerLastName,
                                            email: item.customerEmail
                                        ]"/>
                            </else>
                        </if>
                        <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                            in-map="[sales: sales, docType: docType, statusId: item.statusId]" out-map="context"/>
                        <set field="finDocOut" from="[
                            docType: docType,
                            sales: sales,
                            orderId: item.orderId,
                            shipmentId: item.shipmentId,
                            statusId: convertedStatusId,
                            creationDate: item.entryDate 
                                ? item.entryDate.toString().substring(0,19) + 'Z' : null,
                            otherUser: userOut,
                            ]"/>
                        <set field="finDocItems" from="[]"/>
                    </if>
                    <set field="location" from="[
                        locationId: item.locationId,
                        locationName: item.locationName                        
                        ]"/>
                    <set field="asset" from="[
                        assetId: item.assetId,
                        assetName: item.assetName,
                        receivedDate: item.receivedDate 
                            ? item.receivedDate.toString().substring(0,19) + 'Z' : null,
                        location: location
                        ]"/>
                    <set field="finDocItem" from="[
                        productId: item.productId,
                        quantity: item.quantity ? item.quantity.toString() : null,
                        description: item.itemDescription,
                        asset: asset
                        ]"/>
                    <script>finDocItems.add(finDocItem)</script>
                    <set field="lastItem" from="item"/>
                </iterate>
                <if condition="lastItem">
                    <set field="finDocOut.items" from="finDocItems"/>
                    <script>finDocs.add(finDocOut)</script>
                </if>
            </if>
            <if condition="docType == 'Transaction'">
                <if condition="finDocId">
                    <entity-find  offset="start" list="entries"
                        entity-name="growerp.account.AcctgTransAndEntryAndCompany">
                        <econdition field-name="organizationPartyId" from="ownerPartyId"/>
                        <econdition field-name="transactionId" from="finDocId"/>
                    </entity-find>
                    <else>
                        <entity-find  offset="start" limit="limit*2" list="items"
                                entity-name="growerp.account.AcctgTransAndEntryAndCompany">
                            <econdition field-name="ownerPartyId" from="companyPartyId"/>
                            <econditions combine="or">
                                <econdition field-name="shipmentId" ignore-case="true"
                                    operator="like" from="search" ignore-if-empty="true"/>
                                <econdition field-name="invoiceId" ignore-case="true"
                                    operator="like" from="search" ignore-if-empty="true"/>
                                <econdition field-name="paymentId" ignore-case="true"
                                    operator="like" from="search" ignore-if-empty="true"/>
                                <econdition field-name="transactionId" ignore-case="true"
                                    operator="like" from="search" ignore-if-empty="true"/>
                                <econdition field-name="otherCompanyPartyId" ignore-case="true"
                                    operator="like" from="search" ignore-if-empty="true"/>
                            </econditions>
                            <order-by field-name="-transactionId"/>
                            <order-by field-name="entryId"/>
                            <use-iterator/>
                        </entity-find>
                    </else>
                </if>
                <set field="lastItem" from="null"/>
                <iterate entry="item" list="items">
                    <if condition="lastItem &amp;&amp; lastItem.transactionId != item.transactionId">
                        <set field="finDocOut.items" from="finDocItems"/> 
                        <script>finDocs.add(finDocOut)</script>
                    </if>
                    <if condition="!lastItem || lastItem.transactionId != item.transactionId">
                        <set field="userOut" from="[
                            companyPartyId: item.otherCompanyPartyId,
                            companyName: item.otherCompanyName,
                        ]"/>
                        <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                            in-map="[docType: 'Transaction', 
                                statusId: item.isPosted == 'Y'? 'Posted' : 'NotPosted']" out-map="context"/>
                        <set field="finDocOut" from="[
                            docType: 'Transaction',
                            sales: sales,
                            paymentId: item.paymentId,
                            invoiceId: item.invoiceId,
                            shipmentId: item.shipmentId,
                            transactionId: item.transactionId,
                            statusId: convertedStatusId,
                            creationDate: item.transactionDate 
                                ? item.transactionDate.toString().substring(0,19) + 'Z' : null,
                            otherUser: userOut,
                        ]"/>
                        <set field="finDocItems" from="[]"/>
                    </if>
                    <set field="finDocItem" from="[
                            itemSeqId: item.entryId,
                            price: item.debitCreditFlag == 'D'
                                ? item.amount.toString() : (item.amount * -1).toString(),
                            itemTypeId: item.typeId,
                            glAccountId: item.glAccountId,
                            productId: item.productId,
                        ]"/>
                    <script>finDocItems.add(finDocItem)</script>
                    <set field="lastItem" from="item"/>
                </iterate>
                <if condition="lastItem">
                    <set field="finDocOut.items" from="finDocItems"/>
                    <script>finDocs.add(finDocOut)</script>
                </if>
            </if>
            <if condition="finDocId">
                <set field="finDoc" from="finDocOut"/>
                <set field="finDocs" from="[]"/>
            </if>
        </actions>
    </service>

    <service verb="create" noun="FinDoc">
        <description>Create a financial document either order, invoice or payment</description>
        <in-parameters>
            <parameter name="finDoc" type="String"/>
        </in-parameters>
        <out-parameters>
            <parameter name="finDoc" type="Map"></parameter>
        </out-parameters>
        <actions>
            <script>Object finDocIn = new groovy.json.JsonSlurper().parseText(finDoc)</script>
            <set field="finDoc" from="[:]"/>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"/>
            <if condition="!finDocIn.otherUser || !finDocIn.otherUser.companyPartyId">
                <return error="true" message="Other user required with valid companyPartyId"/>
            </if>
            <service-call name="growerp.100.FinDocServices100.convert#StatusId"  out-map="context"
                in-map="[sales: finDocIn?.sales, docType: finDocIn.docType, statusId: finDocIn.statusId]"/>
            <set field="finDocIn.statusId" from="convertedStatusId"/>
            <if condition="finDocIn.docType == 'Order'">
                <service-call name="growerp.100.FinDocServices100.create#Order"
                    in-map="[order: finDocIn]" out-map="context"/>
                <set field="finDocId" from="orderId"/>
                <else-if condition="finDocIn.docType == 'Invoice'">
                    <service-call name="growerp.100.FinDocServices100.create#Invoice"
                        in-map="[invoice: finDocIn]" out-map="context"/>
                    <set field="finDocId" from="invoiceId"/>
                </else-if>
                <else-if condition="finDocIn.docType == 'Payment'">
                    <service-call name="growerp.100.FinDocServices100.create#Payment"
                        in-map="[payment: finDocIn]" out-map="context"/>
                    <set field="finDocId" from="paymentId"/>
                </else-if>
                <else>
                    <return error="true" message="Document ${finDocIn.docType} not supported yet...."/>
                </else>
            </if>
            <service-call name="growerp.100.FinDocServices100.get#FinDoc" out-map="context"
                in-map="[finDocId: finDocId, docType: finDocIn.docType, sales: finDocIn.sales]"/>
        </actions>
    </service>

    <service verb="create" noun="Order">
        <description> Create an order for the users company</description>
        <in-parameters>
            <parameter name="order" required="true" type="Map"/></in-parameters>
        <out-parameters>
            <parameter name="orderId"/></out-parameters>
        <actions>
             <service-call out-map="context" in-map="[wantOwner: true]"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"/>
            <if condition="order.sales == true"><!-- inside this order object this field is NOT a string -->
                <set field="vendorPartyId" from="companyPartyId"/>
                <set field="customerPartyId" from="order.otherUser.companyPartyId"/>
                <set field="contactRole" value="CustomerContactPerson"/>
                <else>
                    <set field="customerPartyId" from="companyPartyId"/>
                    <set field="vendorPartyId" from="order.otherUser.companyPartyId"/>
                    <set field="contactRole" value="VendorContactPerson"/>
                </else>
            </if>
            <!-- get currency -->
            <entity-find entity-name="mantle.product.store.ProductStore" list="stores">
                <econdition field-name="organizationPartyId" from="companyPartyId"/>
                <econdition field-name="storeDomain" from="order.classificationId"/>
            </entity-find>
            <set field="productStoreId" from="stores[0].productStoreId"/>
            <entity-find-one entity-name="mantle.ledger.config.PartyAcctgPreference"
                    value-field="aPref">
                <field-map field-name="organizationPartyId" from="companyPartyId"/>
            </entity-find-one>
            <set field="currencyUomId" from="aPref.baseCurrencyUomId"/>
            <!-- create order -->
            <entity-find entity-name="mantle.facility.Facility" list="facilities">
                <econdition field-name="ownerPartyId" from="companyPartyId"/>
            </entity-find>
            <if condition="order.sales == true">
                <service-call name="mantle.order.OrderServices.create#Order"
                    in-map="[productStoreId: productStoreId,
                            facilityId: facilities[0].facilityId,
                            vendorPartyId: vendorPartyId,
                            customerPartyId: customerPartyId,
                            orderName: order.description]" out-map="context"/>
                <else>
                    <service-call name="mantle.order.OrderServices.create#Order"
                    in-map="[   vendorPartyId: vendorPartyId,
                                customerPartyId: customerPartyId,
                                facilityId: facilities[0].facilityId,
                                orderName: order.description]" out-map="context"/>
                </else>
            </if>
            <!-- add vendor/customer contact person as an extra party at orderPartParty -->
            <service-call name="create#mantle.order.OrderPartParty"
                in-map="[orderId:orderId, orderPartSeqId:orderPartSeqId,
                        partyId:order.otherUser.partyId, roleTypeId: contactRole]"/>
            <!-- create items -->
            <service-call name="growerp.100.FinDocServices100.replace#OrderItems"
                    in-map="[orderId: orderId,
                             orderPartSeqId: orderPartSeqId,
                             orderItems: order.items]"/>
            <!-- update status if required -->
            <if condition="order.statusId == 'OrderPlaced'">
                <set field="order.orderId" from="orderId"/>
                <service-call name="growerp.100.FinDocServices100.update#Order"
                    in-map="[order: order]"/>
            </if>
        </actions>
    </service>

    <service verb="create" noun="Invoice">
        <description> Create an invoice for the users company</description>
        <in-parameters>
            <parameter name="invoice" required="true" type="Map"/></in-parameters>
        <out-parameters>
            <parameter name="invoiceId"/></out-parameters>
        <actions>
            <service-call out-map="context" in-map="[wantOwner: true]"
               name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"/>
               <if condition="invoice.sales == false"><!-- inside this payment object this field is NOT a string -->
                <set field="toPartyId" from="companyPartyId"/>
                <set field="fromPartyId" from="invoice.otherUser.companyPartyId"/>
                <set field="contactRole" value="VendorContactPerson"/>
                <else>
                    <set field="fromPartyId" from="companyPartyId"/>
                    <set field="toPartyId" from="invoice.otherUser.companyPartyId"/>
                    <set field="contactRole" value="CustomerContactPerson"/>
                </else>
            </if>
            <!-- get currency -->
            <entity-find entity-name="mantle.product.store.ProductStore" list="stores">
                <econdition field-name="organizationPartyId" from="companyPartyId"/>
                <econdition field-name="storeDomain" from="invoice.classificationId"/>
            </entity-find>
            <set field="productStoreId" from="stores[0].productStoreId"/>
            <entity-find-one entity-name="mantle.ledger.config.PartyAcctgPreference"
                    value-field="aPref">
                <field-map field-name="organizationPartyId" from="companyPartyId"/>
            </entity-find-one>
            <set field="currencyUomId" from="aPref.baseCurrencyUomId"/>
            <!-- create invoice -->
            <if condition="invoice.sales == true">
                <service-call name="mantle.account.InvoiceServices.create#Invoice"
                    in-map="[productStoreId: productStoreId,
                            fromPartyId: fromPartyId,
                            toPartyId: toPartyId,
                            description: invoice.description]" out-map="context"/>
                <else>
                    <service-call name="mantle.account.InvoiceServices.create#Invoice"
                    in-map="[   fromPartyId: fromPartyId,
                                toPartyId: toPartyId,
                                productStoreId: productStoreId,
                                description: invoice.description]" out-map="context"/>
                </else>
            </if>
            <!-- add vendor/customer contact person as an extra party at invoicePartParty -->
            <service-call name="create#mantle.account.invoice.InvoiceParty"
                in-map="[invoiceId:invoiceId,
                        partyId:invoice.otherUser.partyId, roleTypeId: contactRole]"/>
            <!-- create items -->
            <service-call name="growerp.100.FinDocServices100.replace#InvoiceItems"
                    in-map="[invoiceId: invoiceId,
                            invoiceItems: invoice.items]"/>
        </actions>
    </service>

    <service verb="create" noun="Payment">
        <description> Create an payment for the users company</description>
        <in-parameters>
            <parameter name="payment" required="true" type="Map"/></in-parameters>
        <out-parameters>
            <parameter name="paymentId"/></out-parameters>
        <actions>
            <service-call out-map="context" in-map="[wantOwner: true]"
               name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"/>
            <if condition="payment.sales == true"><!-- inside this payment object this field is NOT a string -->
                <set field="toPartyId" from="companyPartyId"/>
                <set field="fromPartyId" from="payment.otherUser.companyPartyId"/>
                <set field="contactRole" value="CustomerContactPerson"/>
                <else>
                    <set field="fromPartyId" from="companyPartyId"/>
                    <set field="toPartyId" from="payment.otherUser.companyPartyId"/>
                    <set field="contactRole" value="VendorContactPerson"/>
                </else>
            </if>

            <if condition="payment.otherUser.companyPaymentMethod?.ccPaymentMethodId">
                <set field="fromPaymentMethodId" from="payment.otherUser.companyPaymentMethod.ccPaymentMethodId"/>
                <set field="paymentGatewayConfigId" from="System.getProperty('paymentGatewayConfigId')"/>
            </if>
            <!-- itemtype -->
            <if condition="payment.items">
                <entity-find entity-name="mantle.ledger.config.ItemTypeAndGlAccount" list="glAccounts">
                    <econdition field-name="organizationPartyId" from="companyPartyId"/>
                    <econdition field-name="itemTypeEnumId" from="payment.items[0].itemTypeId" />
                </entity-find>
                <if condition="glAccounts">
                    <set field="itemTypeGlAccountId" from="glAccounts[0].glAccountId"/>
                </if>
            </if>
            <!-- create payment -->
            <set field="instrument" from="'Pi' + payment.paymentInstrument"/>
            <service-call name="mantle.account.PaymentServices.create#Payment"
                in-map="[
                        paymentTypeEnumId: payment.invoiceId ? 
                            'PtInvoicePayment' : 'PtDisbursement',
                        amount: payment.grandTotal,
                        paymentInstrumentEnumId: instrument,
                        effectiveDate: ec.user.nowTimestamp,
                        paymentMethodId: fromPaymentMethodId,
                        paymentGatewayConfigId: paymentGatewayConfigId,
                        toPartyId: toPartyId,
                        itemTypeGlAccountId: itemTypeGlAccountId,
                        fromPartyId: fromPartyId]" out-map="context"/>
        </actions>
    </service>

    <service verb="replace" noun="OrderItems">
        <description>first delete any orderitems(if any) and create new ones.</description>
        <in-parameters>
            <parameter name="orderId" required="true" type="String"/>
            <parameter name="orderPartSeqId" required="true" type="String"/>
            <parameter name="orderItems" required="true" type="List"/>
        </in-parameters>
        <actions>
            <entity-delete-by-condition entity-name="growerp.product.AssetRental">
                <econdition field-name="orderId"/></entity-delete-by-condition>
            <entity-delete-by-condition entity-name="mantle.order.OrderItem">
                <econdition field-name="orderId"/></entity-delete-by-condition>
            <iterate  list="orderItems" entry="item">
                <if condition="item.itemTypeId == 'ItemProduct'">
                    <service-call
                        name="mantle.order.OrderServices.add#OrderProductQuantity"
                        in-map="context + [ itemTypeId: item.itemTypeId,
                                            productId: item.productId,
                                            quantity: item.quantity,
                                            unitAmount: item.price]"
                        out-map="context"/>
                <else-if condition="item.itemTypeId == 'ItemRental'">
                    <service-call
                        name="mantle.order.OrderServices.add#OrderProductQuantity"
                        in-map="context + [ itemTypeId: item.itemTypeId,
                                            productId: item.productId,
                                            quantity: item.quantity,
                                            unitAmount: item.price]"
                        out-map="context"/>
                    <service-call name="create#growerp.product.AssetRental"
                        in-map="[   productId: item.productId,
                                    assetId: item.assetId,
                                    orderId: orderId,
                                    orderItemSeqId: orderItemSeqId,
                                    rentalFromDate: item.rentalFromDate,
                                    rentalThruDate: item.rentalThruDate,
                                ]"/>
                </else-if>
                <else>
                    <service-call name="mantle.order.OrderServices.create#OrderItem"
                        in-map="context + [itemTypeEnumId: item.itemTypeId,
                                            itemDescription: item.description,
                                            quantity: item.quantity,
                                            unitAmount: item.price]"
                        out-map="itemcreate"/>
                </else></if>
            </iterate>

        </actions>
    </service>

    <service verb="replace" noun="InvoiceItems">
        <description>first delete any invoiceitems(if any) and create new ones.</description>
        <in-parameters>
            <parameter name="invoiceId" required="true" type="String"/>
            <parameter name="invoiceItems" required="true" type="List"/>
        </in-parameters>
        <actions>
            <entity-delete-by-condition entity-name="mantle.account.invoice.InvoiceItem">
                <econdition field-name="invoiceId"/></entity-delete-by-condition>
            <iterate  list="invoiceItems" entry="item">
                <service-call
                    name="mantle.account.InvoiceServices.create#InvoiceItem"
                    in-map="context + [ itemTypeEnumId: item.itemTypeId,
                                        productId: item.productId,
                                        quantity: item.quantity,
                                        description: item.description,
                                        amount: item.price]"
                    out-map="context"/>
            </iterate>
        </actions>
    </service>

    <service verb="update" noun="FinDoc">
        <description>Update a financial document either order, invoice or payment</description>
        <in-parameters>
            <parameter name="finDoc" type="String"/>
        </in-parameters>
        <out-parameters>
            <parameter name="finDoc" type="Map"/>
        </out-parameters>
        <actions>
            <script>Object finDocIn = new groovy.json.JsonSlurper().parseText(finDoc)</script>
            <set field="finDoc" from="[:]"/>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"/>
            <service-call name="growerp.100.FinDocServices100.convert#StatusId"  out-map="context"
                in-map="[sales: finDocIn?.sales, docType: finDocIn.docType, statusId: finDocIn.statusId]"/>
            <set field="finDocIn.statusId" from="convertedStatusId"/>
            <!-- order -->
            <if condition="finDocIn.docType == 'Order'">
                <entity-find entity-name="mantle.order.OrderHeaderAndPart" list="check" limit="1">
                    <econdition field-name="orderId" from="finDocIn.orderId"/>
                    <econditions combine="or">
                        <econdition field-name="vendorPartyId" from="companyPartyId"/>
                        <econdition field-name="customerPartyId" from="companyPartyId"/>
                    </econditions>
                </entity-find>
                <if condition="!check"><return message="Update Order ${finDocIn.orderId} not found!"/></if>
                <service-call name="growerp.100.FinDocServices100.update#Order"
                    in-map="[order: finDocIn]"/>
                <set field="inMap" from="[finDocId: finDocIn.orderId, 
                                            docType: 'Order', sales: finDocIn.sales]"/>
            <!-- invoice -->
            <else-if condition="finDocIn.docType == 'Invoice'">
                <entity-find entity-name="mantle.account.invoice.Invoice" list="check" limit="1">
                    <econdition field-name="invoiceId" from="finDocIn.invoiceId"/>
                    <econditions combine="or">
                        <econdition field-name="fromPartyId" from="companyPartyId"/>
                        <econdition field-name="toPartyId" from="companyPartyId"/>
                    </econditions>
                </entity-find>
                <if condition="!check"><return message="Update Invoice ${finDocIn.invoiceId} not found!"/></if>
                <service-call name="growerp.100.FinDocServices100.update#Invoice"
                    in-map="[invoice: finDocIn]"/>
                <set field="inMap" from="[finDocId: finDocIn.invoiceId,
                            docType: 'Invoice', sales: finDocIn.sales]"/>
            </else-if>
            <!-- payment -->
            <else-if condition="finDocIn.docType == 'Payment'">
                <entity-find entity-name="mantle.account.payment.Payment" list="check" limit="1">
                    <econdition field-name="paymentId" from="finDocIn.paymentId"/>
                    <econditions combine="or">
                        <econdition field-name="fromPartyId" from="companyPartyId"/>
                        <econdition field-name="toPartyId" from="companyPartyId"/>
                    </econditions>
                </entity-find>
                <if condition="!check"><return message="Update Payment $finDocIn.paymentId} not found!"/></if>
                <service-call name="growerp.100.FinDocServices100.update#Payment"
                    in-map="[payment: finDocIn]"/>
                <set field="inMap" from="[finDocId: finDocIn.paymentId,
                        docType: 'Payment', sales: finDocIn.sales]"/>
                </else-if>
            <else-if condition="finDocIn.docType == 'Shipment'">
                <entity-find entity-name="mantle.shipment.Shipment" list="check" limit="1">
                    <econdition field-name="shipmentId" from="finDocIn.shipmentId"/>
                    <econditions combine="or">
                        <econdition field-name="fromPartyId" from="companyPartyId"/>
                        <econdition field-name="toPartyId" from="companyPartyId"/>
                    </econditions>
                </entity-find>
                <if condition="!check"><return message="Shipment not found!"/></if>
                <if condition="finDocIn.sales == true &amp;&amp; finDocIn.statusId == 'ShipPacked'">
                    <entity-find entity-name="mantle.shipment.ShipmentItemSource" list="shipmentItemSourceList">
                        <econdition field-name="shipmentId" from="finDocIn.shipmentId"/>
                    </entity-find>
                    <iterate list="shipmentItemSourceList" entry="itemSource">
                        <service-call name="mantle.shipment.ShipmentServices.pack#ShipmentItemSource"
                            in-map="[shipmentItemSourceId: itemSource.shipmentItemSourceId,
                                    quantity: itemSource.quantity]"/>
                    </iterate>
                    <iterate list="shipmentItemSourceList" entry="shipmentItemSource">
                        <if condition="shipmentItemSource.orderId &amp;&amp; shipmentItemSource.orderItemSeqId">
                            <entity-find-one entity-name="mantle.order.OrderItem" value-field="orderItem">
                                <field-map field-name="orderId" from="shipmentItemSource.orderId"/>
                                <field-map field-name="orderItemSeqId" from="shipmentItemSource.orderItemSeqId"/>
                            </entity-find-one>
                            <service-call name="mantle.order.OrderServices.checkComplete#OrderPart"
                                in-map="[orderId:orderItem.orderId, orderPartSeqId:orderItem.orderPartSeqId]"/>
                        </if>
                    </iterate>
                </if>
                <service-call name="update#mantle.shipment.Shipment" out-map="context"
                    in-map="[shipmentId: finDocIn.shipmentId, statusId: finDocIn.statusId]"/>
                <set field="inMap" from="[finDocId: finDocIn.shipmentId,
                                    docType: 'Shipment', sales: finDocIn.sales]"/>
                </else-if>
            <else>
                <return error="true" message="doctype finDocIn.docType not supported!"/>
                </else>
            </if>
            <service-call name="growerp.100.FinDocServices100.get#FinDoc"
                in-map="inMap" out-map="context"/>
        </actions>
    </service>

    <service verb="get" noun="RentalOccupancy">
        <description>Provide a list of dates which need to be blocked at input</description>
        <in-parameters>
            <parameter name="productId" required="true"/>
            <!--parameter name="nbrOfRequiredAssets" default-value="1" type="Integer"/--><!-- TODO implement -->
        </in-parameters>
        <out-parameters>
            <parameter name="rentalFullDates" type="List"/>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"/>
            <set field="nowBeginOfDay" from="java.time.ZonedDateTime.ofInstant(java.time.Instant.now(), java.time.ZoneId.systemDefault()).truncatedTo(java.time.temporal.ChronoUnit.DAYS)"/>
            <set field="nowBeginOfNextDay" from="java.sql.Timestamp.from(nowBeginOfDay.plusDays(1).toInstant())"/>
            <!-- get active rentals -->
            <entity-find entity-name="growerp.product.ProductAndAssetRental" list="rentals">
                <econdition field-name="ownerPartyId" ignore-if-empty="true"/>
                <econdition field-name="productId" from="productId"/>
                <econdition field-name="rentalThruDate" operator="greater-equals" from="Timestamp.valueOf(nowBeginOfNextDay.toLocalDateTime())"/>
            </entity-find>
            <!-- gather dates which have rentals of this product -->
            <set field="dates" from="[]"/>
            <iterate list="rentals" entry="rental">
                <!-- convert date to begin of day -->
                <set field="rentalFromDate" from="Timestamp.valueOf(rental.rentalFromDate.toLocalDateTime().atZone(java.time.ZoneId.systemDefault()).truncatedTo(java.time.temporal.ChronoUnit.DAYS).toLocalDateTime())"/>
                <!-- fromdate in the past? set to today-->
                <if condition="rentalFromDate &lt; Timestamp.valueOf(nowBeginOfDay.toLocalDateTime())">
                    <set field="rentalFromdate" from="Timestamp.valueOf(nowBeginOfDay.toLocalDateTime())"/></if>
                <while condition="rentalFromDate &lt; rental.rentalThruDate">
                    <set field="rentalDate" from="[d: rentalFromDate.toString().substring(0,10), n:1]"/>
                    <script>
                        int index = dates.findIndexOf{it.d == rentalDate.d};
                        if (index != -1)
                            dates[index].n++
                        else
                            dates.add(rentalDate);
                    </script>
                    <!-- add a day to timestamp -->
                    <set field="rentalFromDate" from="Timestamp.valueOf(rentalFromDate.toLocalDateTime().atZone(java.time.ZoneId.systemDefault()).plusDays(1).toLocalDateTime())"/>
                </while>
            </iterate>
            <!-- get available number of assets for this product -->
            <entity-find-count entity-name="mantle.product.asset.Asset" count-field="nbrOfAssets">
                <econdition field-name="ownerPartyId" ignore-if-empty="true"/>
                <econdition field-name="productId" from="productId"/></entity-find-count>
                <set field="rentalFullDates" from="[]"/>
            <!-- get the dates where the availabe assets are used -->
            <iterate list="dates" entry="date">
                <if condition="date.n &gt;= nbrOfAssets">
                    <script>rentalFullDates.add(date.d)</script>
                </if>
            </iterate>
    </actions>
    </service>    

    <service verb="get" noun="AssetsAvailableForProduct">
        <in-parameters>
            <parameter name="productId" required="true"/>
            <parameter name="fromDate" type="Timestamp" required="true"/>
            <parameter name="thruDate" type="Timestamp" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="availableAssetIds" type="List"/>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"/>
            <entity-find entity-name="mantle.product.asset.Asset" list="assets">
                <econdition field-name="ownerPartyId" ignore-if-empty="true"/>
                <econdition field-name="productId" from="productId"/>
            </entity-find>
            <set field="availableAssetIds" from="[]"/>
            <iterate list="assets" entry="asset">
                <entity-find-count entity-name="growerp.product.ProductAndAssetRental"
                     count-field="nbrUsed" cache="false">
                    <econdition field-name="productId" from="productId"/>
                    <econdition field-name="assetId" from="asset.assetId"/>
                    <econdition field-name="ownerPartyId" ignore-if-empty="true"/>
                    <econditions combine="or">
                        <econditions combine="and"><!--order fromdate within -->
                            <econdition field-name="rentalFromDate"
                                operator="less-equals" from="fromDate"/>
                            <econdition field-name="rentalThruDate"
                                operator="greater-equals" from="fromDate"/>
                        </econditions>
                        <econditions combine="and"><!-- order thruDate within -->
                            <econdition field-name="rentalFromDate"
                                operator="less-equals" from="thruDate"/>
                            <econdition field-name="rentalThruDate"
                                operator="greater-equals" from="thruDate"/>
                        </econditions>
                        <econditions combine="and"><!-- both outside -->
                            <econdition field-name="rentalFromDate"
                                operator="greater-equals" from="fromDate"/>
                            <econdition field-name="rentalThruDate"
                                operator="less-equals" from="thruDate"/>
                        </econditions>
                    </econditions>
                </entity-find-count>
                <if condition="nbrUsed == 0">
                    <script>availableAssetIds.add(asset.assetId)</script>
                </if>
            </iterate>
        </actions>
    </service>    

    <service verb="update" noun="Order">
            <description> Update the order by re-creating only in the 'OrderOpen' status'.</description>
        <in-parameters>
            <!-- order has model of client -->
            <parameter name="order" required="true" type="Map"/></in-parameters>
        <actions>
            <!-- status sequence:
                OrderOpen -> OrderPlaced -> orderApproved -> OrderCompleted
            -->
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"/>
            <set field="orderId" from="order.orderId"/>
            <entity-find entity-name="OrderHeaderPartItemPartiesAndReservation" list="items">
                <econdition field-name="orderId"/>
                <econditions combine="or">
                    <econdition field-name="vendorPartyId" from="companyPartyId"/>
                    <econdition field-name="customerPartyId" from="companyPartyId"/>
                </econditions>
                <order-by field-name="orderItemSeqId"/>
            </entity-find>
            <if condition="!items"><return error="true" message="Order not found: $orderId"/></if>
            <set field="paymentId" from="items[0].paymentId"/>
            <set field="invoiceId" from="items[0].invoiceId"/>
            <set field="orderPartSeqId" value="01"/>
            <!-- orderheader -->
            <if condition="order.description &amp;&amp; items[0].orderName != order.description">
                <entity-find-one entity-name="mantle.order.OrderHeader" value-field="orderHeader">
                    <field-map field-name="orderId" from="order.orderId"/>
                </entity-find-one>
                <set field="orderHeader.orderName" from="order.description"/>
                <entity-update value-field="orderHeader"/>
            </if>
            <if condition="order.otherUser">
                <if condition="order.sales == true"><!-- quotes on true NOT required -->
                    <set field="customerPartyId" from="order.otherUser.companyPartyId"/>
                    <set field="contactRole" value="CustomerContactPerson"/>
                    <else>
                        <set field="vendorPartyId" from="order.otherUser.companyPartyId"/>
                        <set field="contactRole" value="VendorContactPerson"/>
                    </else>
                </if>
                <!-- update either vendor or customer -->
                <entity-find entity-name="mantle.order.OrderPart" list="parts" for-update="true" limit="1">
                    <econdition field-name="vendorPartyId" from="vendorPartyId" ignore-if-empty="true"/>
                    <econdition field-name="customerPartyId" from="customerPartyId" ignore-if-empty="true"/>
                    <econdition field-name="orderId"/>
                </entity-find>
                <if condition="order.sales == true"><!-- quotes on true NOT required -->
                    <set field="parts[0].customerPartyId" from="customerPartyId"/>
                    <else>
                        <set field="parts[0].vendorPartyId" from="vendorPartyId"/>
                    </else>
                </if>
                <entity-update value-field="parts[0]"/>
                <!-- contact person (add if missing)-->
                <entity-find entity-name="mantle.order.OrderPartParty" list="parties" for-update="true">
                    <econdition field-name="orderId"/>
                    <econdition field-name="orderPartSeqId" from="parts[0].orderPartSeqId"/>
                    <econdition field-name="roleTypeId" from="contactRole"/>
                </entity-find>
                <if condition="!parties">
                    <service-call name="create#mantle.order.OrderPartParty"
                    in-map="[orderId:orderId, orderPartSeqId:orderPartSeqId,
                            partyId:order.otherUser.partyId, roleTypeId: contactRole]"/>
                    <else>
                        <if condition="parties[0].partyId != order.otherUser.partyId">
                            <entity-delete value-field="parties[0]"/>
                            <service-call name="create#mantle.order.OrderPartParty"
                                in-map="[orderId:orderId, orderPartSeqId:orderPartSeqId,
                                    partyId:order.otherUser.partyId, roleTypeId: contactRole]"/>
                        </if>
                    </else>
                </if>
            </if>
            <!-- handle status changes -->
            <if condition="order.statusId &amp;&amp; order.statusId != items[0].statusId">
                <if condition="order.statusId == 'OrderPlaced'">
                    <service-call in-map="context" out-map="context"
                        name="mantle.order.OrderServices.place#Order"/>
                    <!-- assign asset when rental order (one item per order only)-->
                    <if condition="items[0].rentalFromDate &amp;&amp;
                                        items[0].rentalThruDate">
                        <service-call
                            name="growerp.100.FinDocServices100.get#AssetsAvailableForProduct"
                            in-map="productId: items[0].productId,
                                    fromDate: items[0].rentalFromDate,
                                    thruDate: items[0].rentalThruDate"
                            out-map="context"/>
                        <if condition="availableAssetIds.size() &lt; items.size()">
                            <return error="true" message="not enough assets available for this date: required ${items.size()} available: ${availableAssetIds.size()}"/>
                        </if>
                        <set field="index" value="0" type="Integer"/>
                        <iterate list="items" entry="item">
                            <!-- when items replaced assetRentalId not available -->
                            <entity-find-one entity-name="growerp.product.AssetRental" value-field="assetRental">
                                <field-map field-name="orderId" from="order.orderId"/>
                                <field-map field-name="orderItemSeqId" from="item.orderItemSeqId"/>
                            </entity-find-one>
                            <set field="assetRental.assetId" from="availableAssetIds[index++]"/>
                            <entity-update value-field="assetRental"/>
                        </iterate>
                    </if>
                </if>
                <if condition="order.statusId == 'OrderApproved'">
                    <!-- when sales order: set shipping address and method -->
                    <!-- Simplescreens orderDetail.xml line 1138 -->
                    <if  condition="order.sales == true">
                        <service-call name="mantle.party.ContactServices.get#PartyContactInfoList"
                                out-map="customerShippingInfo"
                            in-map="[partyId: order.otherUser.companyPartyId,
                                    postalContactMechPurposeId:'PostalShippingDest']"/>
                        <if condition="customerShippingInfo.postalAddressList == null">
                            <return error="true" message="Customer does not have a shipping address!"/>
                        </if>
                        <set field="postalAddress" from="customerShippingInfo.postalAddressList[0]"/>
                        <service-call name="mantle.order.OrderServices.set#OrderBillingShippingInfo"
                            in-map="[orderId: order.orderId, orderPartSeqId: orderPartSeqId,
                            shippingPostalContactMechId: postalAddress.postalContactMechId,
                            carrierAndShipmentMethod: '_NA_:ShMthPickUp']"/><!-- carrierPartyId:shipmentMethodEnumId -->
                    </if>
                    <service-call name="mantle.order.OrderServices.approve#Order"
                        in-map="[orderId: order.orderId]"/>
                    <!-- create invoice -->
                    <if condition="order.sales == true">
                        <set field="invStatusId" value="InvoiceFinalized"/>
                        <else>
                            <set field="invStatusId" value="InvoiceReceived"/>
                        </else>
                    </if>
                    <service-call in-map="context + [statusId: invStatusId]" out-map="context"
                        name="mantle.account.InvoiceServices.create#EntireOrderPartInvoice"/>
                    <!-- create payment -->
                    <set field="effectiveDate" from="ec.user.nowTimestamp"/>
                    <service-call in-map="context" out-map="context"
                        name="mantle.order.OrderServices.add#OrderPartPayment"/>
                    <entity-find-one entity-name="mantle.account.payment.Payment"
                        value-field="payment" for-update="true"/>
                    <set field="payment.statusId" value="PmntAuthorized"/>
                    <service-call
                        name="update#mantle.account.payment.Payment" in-map="payment"/>
                    <!-- create shipment  -->
                    <entity-find entity-name="mantle.facility.Facility" list="facilities" limit="1">
                        <econdition field-name="ownerPartyId" from="companyPartyId"/>
                    </entity-find>
                    <service-call in-map="[orderId: order.orderId, facilityId: facilities[0].facilityId,
                                orderPartSeqId: orderPartSeqId]" out-map="context"
                        name="mantle.shipment.ShipmentServices.create#OrderPartShipment"/>
                    <if condition="shipmentId != null">
                        <service-call name="update#mantle.shipment.Shipment" out-map="context"
                            in-map="[shipmentId: shipmentId, statusId: order.sales == true ? 'ShipScheduled' : 'ShipPacked']"/>
                        <else><!-- no shipable items so complete order alreade here -->
                            <service-call name="mantle.order.OrderServices.complete#Order"
                                in-map="[orderId: order.orderId]"/>
                        </else>
                    </if>
                </if>
                <if condition="order.statusId == 'OrderCompleted'">
                    <service-call name="mantle.order.OrderServices.complete#Order"
                        in-map="context"/>
                    <entity-find-one entity-name="mantle.account.invoice.Invoice"
                        value-field="invoice" for-update="true"/>
                    <if condition="sales == true">
                        <set field="invoice.statusId" value="InvoiceSent"/>
                        <else>
                            <set field="invoice.statusId" value="InvoiceReceived"/>
                        </else>
                    </if>
                    <service-call name="update#mantle.account.invoice.Invoice" in-map="invoice"/>
                </if>
                <if condition="order.statusId == 'OrderCancelled'">
                    <service-call name="mantle.order.OrderServices.cancel#Order"
                        in-map="context"/>
                </if>
                <else><!-- only update items when no status changes -->
                    <!-- delete and recreate all orderitems -->
                    <if condition="order.items &amp;&amp; order.items.size() &gt; 0">
                        <service-call name="growerp.100.FinDocServices100.replace#OrderItems"
                                in-map="[orderId: orderId,
                                         orderPartSeqId: orderPartSeqId,
                                         orderItems: order.items]"/>
                    </if>
                </else>
            </if>
        </actions>
    </service>

    <service verb="update" noun="Invoice">
        <description> Update the invoice only in the 'InvoiceInProcess' status'.</description>
    <in-parameters>
        <!-- invoice has model of client -->
        <parameter name="invoice" required="true" type="Map"/></in-parameters>
    <actions>
        <!-- status sequence:
        sls    InvoiceInProcess -> InvoiceFinalized -> InvoiceSent -> InvoicePmtRecvd
        pur    InvoiceIncoming -> Invoicereceived -> InvoiceApproved -> -> InvoicePmtSent
        -->
        <service-call out-map="context"
            name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"/>
        <set field="invoiceId" from="invoice.invoiceId"/>
        <entity-find entity-name="InvoiceItemsAndParties" list="items">
            <econdition field-name="invoiceId"/>
            <econditions combine="or">
                <econdition field-name="fromPartyId" from="companyPartyId"/>
                <econdition field-name="toPartyId" from="companyPartyId"/>
            </econditions>
            <order-by field-name="invoiceItemSeqId"/>
        </entity-find>
        <if condition="!items">
            <return message="Could not find Invoice ${invoice.invoiceId}}"/></if>
        <entity-find-one entity-name="mantle.account.invoice.Invoice"
            value-field="invoiceHeader" for-update="true">                
            <field-map field-name="invoiceId" from="invoice.invoiceId"/>
        </entity-find-one>
        <!-- desription change -->
        <if condition="invoice.description &amp;&amp; 
                items[0].invoiceName != invoice.description">
            <set field="invoiceHeader.description" from="invoice.description"/>
        </if>
        <!-- party changes -->
        <if condition="invoice.sales &amp;&amp;
                invoice.otherUser.companyPartyId != items[0].toPartyId">
            <set field="invoiceHeader.toPartyId" from="invoice.otherUser.companyPartyId"/>
        </if>
        <if condition="!invoice.sales &amp;&amp;
                invoice.otherUser.companyPartyId != items[0].fromPartyId">
            <set field="invoiceHeader.fromPartyId" from="invoice.otherUser.companyPartyId"/>
        </if>
        <entity-update value-field="invoiceHeader"/>
        <!-- handle status changes -->
        <if condition="invoice.statusId &amp;&amp; invoice.statusId != items[0].statusId">
            <service-call name="update#mantle.account.invoice.Invoice"
                in-map="[invoiceId: invoice.invoiceId, statusId: invoice.statusId]"/>
            <if condition="invoice.statusId == 'InvoiceApproved' ||
                            invoice.statusId == 'InvoiceSent'">
                <!-- create payment for approved/sent invoices -->
                <service-call
                    name="mantle.account.PaymentServices.create#InvoicePayment"
                    in-map="[invoiceId: invoice.invoiceId, statusId: 'PmntProposed',
                        effectiveDate: ec.user.nowTimestamp]"
                    out-map="context"/>
            </if>
            <else><!-- only update items when no status changes -->
                <if condition="items[0].statusId != 'InvoiceInProcess' &amp;&amp;
                        items[0].statusId != 'InvoiceIncoming'">
                    <return message="invoice status wrong: ${items[0].statusId}, cannot update"/>
                </if>
                <!-- delete and recreate all invoice items -->
                <if condition="invoice.items &amp;&amp; invoice.items.size() &gt; 0">
                    <service-call name="growerp.100.FinDocServices100.replace#InvoiceItems"
                        in-map="[invoiceId: invoice.invoiceId,
                                invoiceItems: invoice.items]"/>
                </if>
            </else>
        </if>
    </actions>
</service>

<service verb="update" noun="Payment">
    <in-parameters>
        <parameter name="payment" required="true" type="Map"/>
    </in-parameters>
    <actions>
        <entity-find-one entity-name="mantle.account.payment.Payment"
                value-field="paymentOld" for-update="true">
            <field-map field-name="paymentId" from="payment.paymentId"/>
        </entity-find-one>
        <if condition="payment.sales &amp;&amp; payment.otherUser.companyPartyId != paymentOld.fromPartyId">
            <set field="paymentOld.fromPartyId" from="payment.otherUser.companyPartyId"/>
        </if>
        <if condition="!payment.sales &amp;&amp; payment.otherUser.companyPartyId != paymentOld.toPartyId">
            <set field="paymentOld.toPartyId" from="payment.otherUser.companyPartyId"/>
        </if>
        <set field="paymentOld.amount" from="payment.grandTotal"/>
        <if condition="payment.items">
            <entity-find entity-name="mantle.ledger.config.ItemTypeAndGlAccount" list="glAccounts">
                <econdition field-name="organizationPartyId" from="companyPartyId"/>
                <econdition field-name="itemTypeEnumId" from="payment.items[0].itemTypeId" />
            </entity-find>
            <if condition="glaccounts &amp;&amp; glAccounts[0].glAccountId != paymentOld.itemTypeGlAccountId">
                <set field="paymentOld.itemTypeGlAccountId" from="glAccounts[0].glAccountId"/>
            </if>
        </if>
        <!-- payment instrument -->
        <set field="paymentOld.paymentInstrumentEnumId" from="'Pi' + payment.paymentInstrument"/>
        <!-- finally update -->
        <entity-update value-field="paymentOld"/>
        <!-- status updates -->
        <entity-find entity-name="mantle.order.OrderItemBilling"
                limit="1" list="invoices">
            <econdition field-name="orderId" from="payment.orderId"/>
        </entity-find>
        <if condition="invoices">
            <service-call
                name="mantle.account.PaymentServices.send#PromisedPayment"
                in-map="[invoiceId: invoices[0].invoiceId,
                                    paymentId: payment.paymentId]"/>
            <else>
                <!--other status go to next one -->
                <service-call name="update#mantle.account.payment.Payment"
                    in-map="[paymentId: payment.paymentId,
                            statusId: payment.statusId]"/>
            </else>
        </if>
        <entity-find 
            entity-name="mantle.ledger.transaction.AcctgTransAndEntry"
            list="entries">
            <econdition field-name="paymentId" from="paymentOld.paymentId"/>
        </entity-find>
        <if condition="entries">
            <iterate list="entries" entry="entry">
                <if condition="entry.glAccountId == null">
                    <service-call name="update#mantle.ledger.transaction.AcctgTransEntry"
                        in-map="[acctgTransId: entry.acctgTransId,
                            acctgTransEntrySeqId: entry.acctgTransEntrySeqId,
                            glAccountId: paymentOld.itemTypeGlAccountId]"/>
                </if>
            </iterate>
            <service-call name="mantle.ledger.LedgerServices.post#AcctgTrans"
                in-map="[acctgTransId: entries[0].acctgTransId]"/>
            <service-call name="update#mantle.account.payment.Payment"
                in-map="[paymentId: paymentOld.paymentId, statusId: 'PmntConfirmed']"/>
        </if>          
    </actions>
</service>

<service verb="receive" noun="Shipment">
            <description> Receive an incoming shipment either purchase or return.
                        copied from receive#EntireShipment and then modified"
            </description>
        <in-parameters>
            <parameter name="finDoc" format="String"/></in-parameters>
        <out-parameters>
            <parameter name="finDoc" type="Map"/></out-parameters>
        <actions>
            <set field="nowDate" from="ec.user.nowTimestamp.toString().substring(0,10)"/>
            <script>Object finDocIn = new groovy.json.JsonSlurper().parseText(finDoc)</script>
            <set field="finDoc" from="[:]"/>
            <service-call out-map="context" in-map="[wantOwner: true]"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"/>
            <entity-find list="shipmentItemDetailList"
                entity-name="mantle.shipment.ShipmentItemDetail">
                <econdition field-name="shipmentId" from="finDocIn.shipmentId"/>
                <econdition field-name="ownerPartyId" ignore-if-empty="true"/>
                <order-by field-name="productId"/>
            </entity-find>
            <entity-find entity-name="mantle.facility.Facility" list="facilities">
                <econdition field-name="ownerPartyId" from="ownerPartyId"/>
            </entity-find>
            <set field="facilityId" from="facilities[0].facilityId"/>
            <iterate list="shipmentItemDetailList" entry="sid">
                <set field="quantityRemaining"
                    from="sid.quantity - (sid.quantityAcceptedTotal ?: 0) - (sid.quantityRejectedTotal ?: 0)"/>
                <set field="finDocItem"
                    from="finDocIn.items.find {element -> element.productId == sid.productId}"/>
                <if condition="!finDocItem.location.locationSeqId"><!-- if empty create new location -->
                    <service-call name="create#mantle.facility.FacilityLocation"
                        in-map="[description: finDocItem.location.locationName ?: '${sid.pseudoId}(${nowDate})',
                                facilityId: facilityId]" out-map="context"/>
                    <set field="finDocItem.location.locationSeqId" from="locationSeqId"/>
                </if>
                <service-call name="mantle.shipment.ShipmentServices.receive#ShipmentProduct"
                    in-map="[shipmentId:finDocIn.shipmentId, productId:sid.productId, statusId:'AstAvailable',
                            quantityAccepted:quantityRemaining, facilityId: facilityId,
                            ownerPartyId: ownerPartyId,
                            locationSeqId: finDocItem.location.locationSeqId]"/>
            </iterate>
            <service-call out-map="context" in-map="[shipmentId:finDocIn.shipmentId]"
                name="mantle.shipment.ShipmentServices.deliver#Shipment"/>
            <service-call name="growerp.100.FinDocServices100.get#FinDoc"
                in-map="[finDocId: finDocIn.shipmentId, docType: 'Shipment',
                                sales: finDocIn.sales]"
                out-map="context"/>
        </actions>
    </service>
</services>
