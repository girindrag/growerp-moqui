<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domaicrn Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <service verb="get" noun="Orders">
        <description>
            Get order information by order, item, spot and party
        </description>
        <in-parameters>
            <parameter name="orderId"/>
            <parameter name="open" type="Boolean"><description>True for only open orders</description></parameter>
            <parameter name="startDate"><description>Format should be YYYY-MM-DD</description></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="orders" type="List"/>
            <parameter name="order" type="Map"/>
        </out-parameters>
        <actions>
            <set field="statusList" from="['OrderOpen','OrderPlaced','OrderApproved']"/>
            <if condition="open">
                <set field="status" from="statusList"/>
            </if>
            <if condition="startDate">
                <set field="tsDate" from="ec.l10n.parseTimestamp(ec.l10n.format(startDate, 'yyyy-MM-dd') + ' 23:59:59.999', 'yyyy-MM-dd HH:mm:ss.SSS')"/>
            </if>
            <service-call name="growerp.100.CommonServices100.get#RelatedCompanyPartyId" out-map="context" />
            <entity-find entity-name="growerp.order.OrderHeaderAndPartAndItem" list="items">
                <econdition field-name="orderId" ignore-if-empty="true"/>
                <econditions combine="or">
                    <econdition field-name="vendorPartyId" from="ownerPartyId"/>
                    <econdition field-name="customerPartyId" from="ownerPartyId"/>
                    </econditions>
                <econdition field-name="statusId" operator="in" from="status" ignore-if-empty="true"/>
                <econdition field-name="placedDate" operator="less-equals" from="tsDate" ignore-if-empty="true"/>
                <order-by field-name="orderId"/>
                <order-by field-name="orderItemSeqId"/>
                </entity-find>
            <set field="lastItem" from="null"/>
            <if condition="!orderId">
                <set field="orders" from="[]"/>
            </if>
            <set field="orderItems" from="[]"/>
            <iterate entry="item" list="items">
                <if condition="lastItem &amp;&amp; lastItem.orderId != item.orderId">
                    <log message="====$ownerPartyId=====${lastItem?.vendorPartyId}=====${lastItem?.customerPartyId}"/>
                    <if condition="lastItem.customerPartyId == ownerPartyId">
                       <set field="otherPartyId" from="lastItem.vendorPartyId"/>
                       <else>
                            <set field="otherPartyId" from="lastItem.customerPartyId"/>
                        </else>
                    </if>
                    <entity-find entity-name="moqui.security.UserAccount" list="others">
                        <econdition field-name="partyId" from="otherPartyId"/>
                    </entity-find>
                    <entity-find-one entity-name="mantle.party.Person" value-field="person">
                        <field-map field-name="partyId" from="otherPartyId"/>
                    </entity-find-one>
                    <set field="orderOut" from="[
                        orderId: lastItem.orderId,
                        orderStatusId: lastItem.statusId,
                        placedDate: lastItem.placedDate.toString().substring(0,19) + 'Z',
                        customerPartyId: lastItem.customerPartyId,
                        supplierPartyId: lastItem.vendorPartyId,
                        firstName: person?.firstName,
                        lastName: person?.lastName,
                        email: others[0]?.emailAddress,
                        grandTotal: lastItem.grandTotal.toString(),
                        invoiceId: lastItem.invoiceId,
                        paymentId: lastItem.paymentId,
                        orderItems: orderItems
                        ]"/>
                    <script>orders.add(orderOut)</script>
                    <set field="orderItems" from="[]"/>
                </if>
                <set field="orderItem" from="[
                    orderItemSeqId: item.orderItemSeqId,
                    productId: item.productId,
                    description: item.itemDescription,
                    quantity: item.quantity.toString(),
                    price: item.unitAmount.toString(),
                    fromDate: null,
                    thruDate: null
                    ]"/>
                <script>orderItems.add(orderItem)</script>
                <set field="lastItem" from="item"/>
            </iterate>
            <if condition="lastItem">
                <log message="====$ownerPartyId=====${lastItem.vendorPartyId}=====${lastItem.customerPartyId}"/>
                <if condition="lastItem.customerPartyId == ownerPartyId">
                    <set field="otherPartyId" from="lastItem.vendorPartyId"/>
                    <else>
                     <set field="otherPartyId" from="lastItem.customerPartyId"/>
                    </else>
                 </if>
                 <entity-find entity-name="moqui.security.UserAccount" list="others">
                     <econdition field-name="partyId" from="otherPartyId"/>
                 </entity-find>
                 <entity-find-one entity-name="mantle.party.Person" value-field="person">
                     <field-map field-name="partyId" from="otherPartyId"/>
                 </entity-find-one>
                <set field="orderOut" from="[
                    orderId: lastItem.orderId,
                    orderStatusId: lastItem.statusId,
                    placedDate: lastItem.placedDate.toString().substring(0,19) + 'Z',
                    customerPartyId: lastItem.customerPartyId,
                    supplierPartyId: lastItem.vendorPartyId,
                    firstName: person?.firstName,
                    lastName: person?.lastName,
                    email: others[0]?.emailAddress,
                    grandTotal: lastItem.grandTotal.toString(),
                    invoiceId: lastItem.invoiceId,
                    paymentId: lastItem.paymentId,
                    orderItems: orderItems
                    ]"/>
                <if condition="orderId">
                    <set field="order" from="orderOut"/>
                    <else>
                        <script>orders.add(orderOut)</script>
                    </else>
                </if>
            </if>
            <!--if condition="orderId">
                <log message="==== open order send: ${order}"/>
                <else>
                    <log message="==== open orders send: ${orders.size()}"/>
                </else>
            </if-->
        </actions></service>


    <service verb="create" noun="Order">
        <description> Create an order for the users company</description>
        <in-parameters>
            <parameter name="order" required="true" type="String"/></in-parameters>
        <out-parameters>
            <parameter name="order"/></out-parameters>
        <actions>
            <script>
                Object order = new groovy.json.JsonSlurper().parseText(order).order
            </script>
            <service-call name="growerp.100.PartyServices100.get#Company"
                out-map="context"/>
            <if condition="order.supplierPartyid != ownerPartyId &amp;&amp; order.customerPartyId != ownerPartyId">
                <return error="true" message="Either customer or supplier Partyid should be the owner company?"/>
            </if>
            <entity-find entity-name="mantle.product.store.ProductStore" list="stores">
                <econdition field-name="organizationPartyId" from="company.partyId"/>
            </entity-find>
            <set field="productStoreId" from="stores[0].productStoreId"/>
            <set field="currencyUomId" from="company.currency"/>
            <set field="customerPartyId" from="order.customerPartyId"/>
            <set field="placedDate" from="ec.user.nowTimestamp"/>
            <set field="vendorPartyId" from="order.supplierPartyId"/>
            <service-call name="mantle.order.OrderServices.create#Order"
                in-map="context" out-map="context"/>
            <iterate entry="item" list="order.orderItems">
                <service-call
                    name="mantle.order.OrderServices.add#OrderProductQuantity"
                    in-map="context + [productId: item.productId,
                                        quantity: item.quantity,
                                        unitAmount: item.price,
                                        currencyUomId: currencyId]"
                    out-map="itemcreate"/>
            </iterate>
            <service-call name="growerp.100.OrderServices100.getOrders"
                in-map="[orderId: orderId]" out-map="context"/>
        </actions>
    </service>

    <service verb="update" noun="Order">
        <description> Update the order, curently just the status.</description>
        <in-parameters>
            <parameter name="order" required="true" type="String"/></in-parameters>
        <out-parameters>
            <parameter name="order"/></out-parameters>
        <actions>
            <!-- status sequence:
                OrderOpen -> (OrderPlaced) -> orderApproved -> OrderCompleted
            -->
            <script>
                Object order = new groovy.json.JsonSlurper().parseText(order).order
            </script>
            <service-call out-map="context"
                name="growerp.mobile.MobilePartyServices.get#RelatedCompanyPartyId"/>
            <set field="orderId" from="order.orderId"/>
            <entity-find entity-name="OrderHeaderAndPartAndItem" list="items">
                <econdition field-name="orderId" from="order.orderId"/>
                <econdition field-name="vendorPartyId" from="ownerPartyId"/>
                <order-by field-name="orderItemSeqId"/>
            </entity-find>
            <if condition="!items"><return error="true" message="Order not found"/></if>
            <set field="paymentId" from="items[0].paymentId"/>
            <set field="invoiceId" from="items[0].invoiceId"/>
            <set field="orderPartSeqId" value="01"/>
            <!-- handle status changes -->
            <if condition="order.orderStatusId != items[0].statusId">
                <if condition="order.orderStatusId == 'OrderPlaced'">
                    <log message="====order place"/>
                    <service-call in-map="context" out-map="context"
                        name="mantle.order.OrderServices.place#Order"/>
                    <set field="statusId" from="null"/>
                    <log message="====create invoice"/>
                    <service-call in-map="context" out-map="context"
                        name="mantle.account.InvoiceServices.create#EntireOrderPartInvoice"/>
                    <log message="====create payment"/>
                    <service-call name="mantle.order.OrderServices.add#OrderPartPayment"
                        in-map="context + [paymentGatewayConfigId: 'PaypalDemo']"
                        out-map="context"/>
                    <log message="====authorize moqui payment"/>      
                    <entity-find-one entity-name="mantle.account.payment.Payment"
                        value-field="payment" for-update="true"/>
                    <set field="payment.statusId" value="PmntAuthorized"/>
                    <service-call name="update#mantle.account.payment.Payment" in-map="payment"/>
                    <log message="====Paypal authorize payment"/>      
                    <service-call name="mantle.account.PaymentServices.authorize#SinglePayment">
                        <field-map field-name="paymentGatewayConfigId" value="PaypalDemo"/>
                        <field-map field-name="paymentId"/>
                    </service-call>
                </if>
                <if condition="order.orderStatusId == 'OrderApproved'">
                    <log message="====order approve"/>
                    <service-call name="mantle.order.OrderServices.approve#Order"
                        in-map="context"/>
                    <log message="====finalize moqui invoice"/>      
                    <entity-find-one entity-name="mantle.account.invoice.Invoice"
                        value-field="invoice" for-update="true"/>
                    <set field="invoice.statusId" value="InvoiceFinalized"/>
                    <service-call name="update#mantle.account.invoice.Invoice" in-map="invoice"/>
                    <log message="====capture payment"/>      
                    <service-call name="mantle.account.PaymentServices.capture#SinglePayment">
                        <field-map field-name="paymentGatewayConfigId" value="PaypalDemo"/>
                        <field-map field-name="paymentId"/>
                    </service-call>
                    <log message="====order send payment"/>      
                    <service-call name="mantle.account.PaymentServices.send#PromisedPayment">
                        <field-map field-name="invoiceId"/>
                        <field-map field-name="paymentId"/>
                    </service-call>
                </if>
                <if condition="order.orderStatusId == 'OrderCompleted'">
                    <log message="====order complete"/>
                    <service-call name="mantle.order.OrderServices.complete#Order"
                        in-map="context"/>
                </if>
                <if condition="order.orderStatusId == 'OrderCancelled'">
                </if>
            </if>
            <service-call name="growerp.100.OrderServices100.getOrders"
                in-map="[orderId: order.orderId]" out-map="context"/>
        </actions>
    </service>
</services>
