<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domaicrn Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

<!-- category related-->
    <service verb="get" noun="CategoriesAndProducts">
        <description>
            Get table data for data entry product categories and products
        </description>
        <in-parameters>
            <parameter name="companyPartyId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="categories" type="List"/>
            <parameter name="products" type="List"/>
        </out-parameters>
        <actions>
            <service-call name="growerp.100.CatgProdServices100.get#ProductCategories"
                in-map="[companyPartyId: companyPartyId]" out-map="context"/>
            <service-call name="growerp.100.CatgProdServices100.get#Products"
                in-map="[companyPartyId: companyPartyId]" out-map="context"/>
        </actions>
    </service>

    <service verb="get" noun="Products">
        <description> get a single, or all products (will page lateron</description>
        <in-parameters>
            <parameter name="companyPartyId"/>
            <parameter name="productId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="product" type="Map"/>
            <parameter name="products" type="List"/>
        </out-parameters>
        <actions>
            <service-call
                name="growerp.100.CommonServices100.get#RelatedCompanyPartyId"
                 out-map="context"/>
            <entity-find
                    entity-name="growerp.mobile.product.ProductAndPriceAndProductCategory"
                        list="productList">
                <econdition field-name="ownerPartyId" from="ownerPartyId?:companyPartyId"/>
                <econdition field-name="productId" ignore-if-empty="true"/>
            </entity-find>
            <if condition="!productId">
                <set field="contentTypeId" value="PcntImageSmall"/>
                <set field="products" from="[]"/>
                <else>
                    <set field="contentTypeId" value="PcntImageMedium"/>
                </else>
            </if>
            <iterate entry="product" list="productList">
                <entity-find entity-name="mantle.product.ProductContent" list="contents">
                    <econdition field-name="productId" from="product.productId"/>
                    <econdition field-name="productContentTypeEnumId" from="contentTypeId"/>
                </entity-find>
                <if condition="contents">
                    <service-call name="growerp.100.ImageServices100.download#Image"
                        in-map="[contentLocation: contents[0].contentLocation]" out-map="context"/></if>
                <set field="productOut" from="[
                    productId: product.productId,
                    productName: product.productName?:'?',
                    description: product.description,
                    price: product.price.toString(),
                    categoryId: product.productCategoryId,
                    categoryName: product.categoryName,
                    image: imageFile? imageFile : null]"/>
                <if condition="productId">
                    <set field="product" from="productOut"/>
                    <else>
                        <script>products.add(productOut)</script>
                    </else>
                </if>
            </iterate>
            <if condition="products &amp;&amp; !productId">
                <script>products.sort{a, b -> 
                    a.productName.compareToIgnoreCase(b.productName) } </script>
            </if>
        </actions>
    </service>

    <service verb="create" noun="Product">
        <description> Create a Product with a price in a category</description>
        <in-parameters>
            <parameter name="product" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="product"/>
        </out-parameters>
        <actions>
            <script> // convert JSON data
                import groovy.json.JsonSlurper
                JsonSlurper slurper = new JsonSlurper()
                Object productIn = new JsonSlurper().parseText(product).product</script>
            <service-call name="growerp.100.PartyServices100.get#Company" out-map="context"/>
            <set field="ownerPartyId" from="company.partyId"/>
            <set field="quantityUomId" value="OTH_ea"/>
            <service-call name="create#mantle.product.Product" in-map="[
                productName: productIn.productName,
                description: productIn.description,
                ownerPartyId: company.partyId,
                productTypeEnumId: 'PtAsset',
                assetTypeEnumId: 'AstTpInventory',
                assetClassEnumId: 'AsClsInventoryFin']" out-map="context" />
            <service-call name="create#mantle.product.ProductPrice" 
                in-map="[productId: productId, priceTypeEnumId: 'PptList',
                priceUomId: company.currencyId, price: productIn.price,
                fromDate: ec.user.nowTimestamp,
                pricePurposeEnumId: 'PppPurchase']"/>
            <set field="fromDate" from="ec.user.nowTimestamp"/>
            <set field="productCategoryId" from="productIn.categoryId"/>
            <service-call name="create#mantle.product.category.ProductCategoryMember"
                in-map="context"/>
            <if condition="productIn.image">
                <service-call name="growerp.100.ImageServices100.upload#Image"
                    in-map="[type: 'product', id: productId,
                        base64: productIn.image]"/>
            </if>
            <service-call name="growerp.100.CatgProdServices100.get#Products"
                in-map="[productId: productId]" out-map="context"/>
        </actions>
    </service>

    <service verb="update" noun="Product">
        <description> Update an existing Product</description>
        <in-parameters>
            <parameter name="product" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="product"/>
        </out-parameters>
        <actions>
            <script> // convert JSON data
                import groovy.json.JsonSlurper
                JsonSlurper slurper = new JsonSlurper()
                Object productIn = new JsonSlurper().parseText(product).product</script>
            <if condition="!productIn.productId"><return error="true" message="ProductId required"/></if>
            <service-call name="growerp.100.CommonServices100.get#RelatedCompanyPartyId"
                out-map="context"/>
            <entity-find-one value-field="product" entity-name="mantle.product.Product" for-update="true">
                <field-map field-name="productId" from="productIn.productId"/>
                <field-map field-name="ownerPartyId"/></entity-find-one>
            <if condition="!product"><return error="true" message="product ${productIn.productId} not found!}"/></if>
            <if condition="productIn.productName &amp;&amp; product.productName != productIn.productName">
                <set field="product.productName" from="productIn.productName"/>
                <entity-update value-field="product"/></if>
            <entity-find entity-name="ProductAndPriceAndProductCategory" list="products">
                <econdition field-name="productId" from="productIn.productId"/>
                <econdition field-name="ownerPartyId"/></entity-find>
            <if condition="price &amp;&amp; products[0].price != price">
                <entity-find-one value-field="productPrice" entity-name="mantle.product.ProductPrice" for-update="true">
                    <field-map field-name="productPriceId" from="products[0].productPriceId"/></entity-find-one>
                <set field="productPrice.thruDate" from="ec.user.nowTimestamp"/>
                <entity-update value-field="productPrice"/>
                <service-call name="create#mantle.product.ProductPrice"
                    in-map="[   productId: productIn.productId,
                                priceTypeEnumId: 'PptCurrent',
                                price: price,
                                currencyUomId: company.currency,
                                quantityUomId: 'OTH_ea',
                                priceUomId: 'OTH_ea']"/>
            </if>
            <if condition="productCategoryId &amp;&amp; 
                    products[0].productCategoryId != productCategoryId">
                <entity-find-one value-field="member" 
                        entity-name="mantle.product.category.ProductCategoryMember" for-update="true">
                    <field-map field-name="productId" from="productIn.productId"/>
                    <field-map field-name="productCategoryId" from="products[0].productCategoryId"/>
                    <field-map field-name="fromDate" from="products[0].fromDate"/></entity-find-one>
                <set field="member.thruDate" from="ec.user.nowTimestamp"/>
                <entity-update value-field="member"/>
                <service-call name="create#mantle.product.category.ProductCategoryMember"
                    in-map="[   productId: productIn.productId,
                                productCategoryId: productCategoryId,
                                fromDate: ec.user.nowTimestamp]"/>
            </if>
            <!-- update image -->
            <if condition="productIn.image">
                <service-call name="growerp.100.ImageServices100.upload#Image"
                    in-map="[type: 'product', id: productIn.productId,
                        base64: productIn.image]"/>
            </if>
            <service-call name="growerp.100.CatgProdServices100.get#Products"
                in-map="[productId: productIn.productId]" out-map="context"/>
            </actions>
    </service>

    <service verb="delete" noun="Product">
        <description> Delete a Product </description>
        <in-parameters>
            <parameter name="productId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="productId"/>
        </out-parameters>
        <actions>
            <service-call name="growerp.mobile.MobilePartyServices.get#RelatedCompanyPartyId" out-map="context"/>
            <entity-find-one value-field="product" entity-name="mantle.product.Product" for-update="true">
                <field-map field-name="productId"/><field-map field-name="ownerPartyId"/> </entity-find-one>
            <set field="product.salesDiscontinuationDate" from="ec.user.nowTimestamp"/>
            <entity-update value-field="product"/>
        </actions>
    </service>

    <service verb="get" noun="ProductCategories">
        <description> get a single or all categories to group products by drinks , salads, deserts etc</description>
        <in-parameters>
            <parameter name="companyPartyId"/>
            <parameter name="categoryId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="category" type="Map"/>
            <parameter name="categories" type="List"/>
        </out-parameters>
        <actions>
            <service-call name="growerp.100.CommonServices100.get#RelatedCompanyPartyId" out-map="context"/>
            <entity-find entity-name="mantle.product.category.ProductCategory" list="rootList">
                <econdition field-name="ownerPartyId" from="ownerPartyId?:companyPartyId"/>
                <econdition field-name="productCategoryTypeEnumId" value="PctRoot"/></entity-find>
            <if condition="rootList">
                <set field="parentProductCategoryId" from="rootList[0].productCategoryId"/>
            <else><return error="true" message="Category root not found for company: ${ownerPartyId}"/></else></if>
            <entity-find entity-name="growerp.mobile.party.category.ProductCategoryParentsAndChild" list="groups">
                <date-filter/>
                <econdition field-name="ownerPartyId" from="ownerPartyId?:companyPartyId"/>
                <econdition field-name="parentProductCategoryId"/>
                <econdition field-name="productCategoryId" from="categoryId" ignore-if-empty="true"/></entity-find>
            <if condition="!categoryId">
                <set field="categories" from="[]"/></if>
            <iterate entry="group" list="groups">
                <entity-find entity-name="mantle.product.category.ProductCategoryContent" list="contents">
                    <econdition field-name="productCategoryId" from="group.productCategoryId"/>
                    <econdition field-name="categoryContentTypeEnumId"
                        from="categoryId? 'PcctImageMedium' : 'PcctImageThumbNail'" />
                </entity-find>
                <if condition="contents">
                    <service-call name="growerp.100.ImageServices100.download#Image"
                        in-map="[contentLocation: contents[0].contentLocation]" out-map="context"/></if>
                <entity-find-count entity-name="growerp.mobile.product.ProductAndPriceAndProductCategory" count-field="nbrOfProducts">
                    <econdition field-name="ownerPartyId"/>
                    <econdition field-name="productCategoryId" from="group.productCategoryId"/></entity-find-count>
                <set field="groupOut" from="[
                    categoryId: group.productCategoryId,
                    categoryName: group.categoryName,
                    description: group.description,
                    image: imageFile,
                    nbrOfProducts: nbrOfProducts
                    ]"/>
                <if condition="categoryId">
                    <set field="category" from="groupOut"/>
                    <else>
                        <script>categories.add(groupOut)</script>
                    </else>
                </if>
            </iterate>
            <if condition="categories &amp;&amp; !categoryId">
                <script>categories.sort{a, b -> 
                    a.categoryName.compareToIgnoreCase(b.categoryName) } </script>
            </if>
        </actions>
    </service>

    <service verb="create" noun="ProductCategory">
        <description> Create a category to group products by drinks , 
                                            salads, deserts etc</description>
        <in-parameters>
            <parameter name="category" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="category"/>
        </out-parameters>
        <actions>
            <script> // convert JSON data
                import groovy.json.JsonSlurper
                JsonSlurper slurper = new JsonSlurper()
                Object categoryIn = new JsonSlurper().parseText(category).category</script>
            <service-call out-map="context"
                name="growerp.100.CommonServices100.get#RelatedCompanyPartyId"/>
            <entity-find
                entity-name="mantle.product.category.ProductCategory" list="rootList">
                <econdition field-name="ownerPartyId"/></entity-find>
            <if condition="rootList">
                <set field="rootProductCategoryId" from="rootList[0].productCategoryId"/>
                <else>
                    <return error="true"
                        message="Root category could not be found for compant: ${ownerPartyId}"/>
                </else></if>
            <service-call name="create#mantle.product.category.ProductCategory"
                in-map="[categoryName: categoryIn.categoryName,
                    description: categoryIn.description,
                    ownerPartyId: ownerPartyId]" out-map="context"/>
            <service-call
                name="create#mantle.product.category.ProductCategoryRollup"
                    in-map="[parentProductCategoryId: rootProductCategoryId,
                        productCategoryId: productCategoryId]"/>
            <if condition="categoryIn.image">
                <service-call name="growerp.100.ImageServices100.upload#Image"
                    in-map="[type: 'category',
                        id: productCategoryId, base64: categoryIn.image]"/>
            </if>
            <service-call name="growerp.100.CatgProdServices100.get#ProductCategories"
                in-map="[categoryId: productCategoryId]" out-map="context"/>
            </actions>
    </service>

    <service verb="update" noun="ProductCategory">
        <description> Update a category to group products by drinks , salads, deserts etc</description>
        <in-parameters>
            <parameter name="category" required="true"/>
        </in-parameters>
        <out-parameters><parameter name="category"/></out-parameters>
        <actions>
            <script> // convert JSON data
                import groovy.json.JsonSlurper
                JsonSlurper slurper = new JsonSlurper()
                Object categoryIn = new JsonSlurper().parseText(category).category</script>
            <service-call name="growerp.100.CommonServices100.get#RelatedCompanyPartyId" out-map="context"/>
            <entity-find-one value-field="productCategory" entity-name="mantle.product.category.ProductCategory" for-update="true">
                <field-map field-name="productCategoryId" from="categoryIn.categoryId"/>
                <field-map field-name="ownerPartyId"/></entity-find-one>
            <if condition="categoryIn.categoryName">
                <set field="productCategory.categoryName" from="categoryIn.categoryName"/></if>
            <if condition="categoryIn.preparationAreaId">
                <set field="productCategory.preparationAreaId" from="categoryIn.preparationAreaId"/></if>
            <entity-update value-field="productCategory"/>
            <!-- update image -->
            <if condition="categoryIn.image">
                <service-call name="growerp.100.ImageServices100.upload#Image"
                    in-map="[type: 'category', id: categoryIn.categoryId, base64: categoryIn.image]"/>
            </if>
            <service-call name="growerp.100.CatgProdServices100.get#ProductCategories"
                in-map="[categoryId: categoryIn.categoryId]" out-map="context"/>
        </actions>
    </service>

    <service verb="delete" noun="ProductCategory">
        <description> delete a category to group products by drinks , salads, deserts etc</description>
        <in-parameters><parameter name="categoryId"/></in-parameters>
        <out-parameters><parameter name="categoryId"/></out-parameters>
        <actions>
            <service-call name="growerp.mobile.MobilePartyServices.get#RelatedCompanyPartyId" out-map="context"/>
            <entity-find-one value-field="productCategory" entity-name="mantle.product.category.ProductCategory">
                <field-map field-name="productCategoryId" from="categoryId"/><field-map field-name="ownerPartyId"/></entity-find-one>
            <entity-find-count count-field="nbrOfProducts" entity-name="mantle.product.category.ProductCategoryMemberProduct">
                <econdition field-name="productCategoryId" from="categoryId"/>
                    <econditions combine="or">
                        <econdition field-name="salesDiscontinuationDate" from="null"/>
                        <econdition field-name="salesDiscontinuationDate" operator="greater" from="ec.user.nowTimestamp"/>
                </econditions><date-filter/></entity-find-count>
            <if condition="nbrOfProducts">
                <return error="true" message="Cannot delete category, ${nbrOfProducts} products still related to it....!"/></if>
            <!-- disable category in categoryRollUp entity -->
            <entity-find entity-name="mantle.product.category.ProductCategory" list="rootList">
                <econdition field-name="ownerPartyId"/></entity-find>
             <entity-find entity-name="mantle.product.category.ProductCategoryRollup" list="rollUpList" for-update="true">
                <econdition field-name="productCategoryId" from="categoryId"/>
                <econdition field-name="parentProductCategoryId" from="rootList[0].productCategoryId"/>
                <date-filter/>
            </entity-find>
            <if condition="rollUpList">
                <set field="rollUpList[0].thruDate" from="ec.user.nowTimestamp"/>
                <entity-update value-field="rollUpList[0]"/>
            <else>
                <return error="true" message="could not find rollup for category: ${productCategoryId}"/></else></if>
        </actions>
    </service>
    
</services>