<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domaicrn Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <service verb="get" noun="Products" authenticate="false">
        <description> get a single, or all products</description>
        <in-parameters>
            <parameter name="companyPartyId"/>
            <parameter name="categoryId"/>
            <parameter name="productId"/>
            <parameter name="productTypeId"/>
            <parameter name="assetClassId"/>
            <parameter name="start" default-value="0" type="Integer"/>
            <parameter name="limit" default-value="10" type="Integer"/>
            <parameter name="filter" default="null"/>
            <parameter name="search" default="null"/>
        </in-parameters>
        <out-parameters>
            <parameter name="product" type="Map"/>
            <parameter name="products" type="List"/>
            <parameter name="count" type="Integer"/>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"/>
            <if condition="!companyPartyId">
                <!-- if not provided and not logged in use the one which was first created -->
                <entity-find entity-name="mantle.party.Organization" list="parties" limit="1">
                    <order-by field-name="partyId"/></entity-find>
                <set field="companyPartyId" from="parties[0].partyId"/>
                <log message="Using first allocated companyPartyId"/></if>
            <if condition="categoryId == '###first one###'">
                <!-- for ecommerce startup we only need products in the first alphabetical category
                    but do not know which one that is -->
                <entity-find
                    entity-name="mantle.product.category.ProductCategory" list="catList" limit="1">
                    <econdition field-name="ownerPartyId" from="companyPartyId"/>
                    <econdition field-name="productCategoryTypeEnumId" operator="not-equals" value="PctRoot"/>
                    <order-by field-name="categoryName"/>
                </entity-find>
                <set field="categoryId" from="catList[0].productCategoryId"/>
                </if>
            <if condition="filter != null">
                <set field="filter" value="%${filter}%"/></if>
            <if condition="search != null">
                <set field="search" value="%${search}%"/></if>
            <!-- convert AssetClassId -->
            <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                in-map="[docType: 'asset', statusId: assetClassId]" out-map="assetClass"/>
            <!-- convert ProductTypeId -->
            <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                in-map="[docType: 'product', statusId: productTypeId]" out-map="productType"/>
            <!-- get products -->
            <entity-find offset="start" limit="limit"
                    entity-name="growerp.mobile.product.ProductAndPriceAndProductCategory"
                        list="productList">
                        <econdition field-name="ownerPartyId" ignore-if-empty="true"/>
                        <econdition field-name="productTypeEnumId"
                            from="productType.convertedStatusId" ignore-if-empty="true"/>
                        <econdition field-name="assetClassEnumId"
                            from="assetClass.convertedStatusId" ignore-if-empty="true"/>
                        <econdition field-name="categoryId" ignore-if-empty="true"/>
                        <econdition field-name="productId" operator="is-not-null"/>
                        <econdition field-name="productId" ignore-if-empty="true"/>
                        <econditions combine="or">
                            <econdition field-name="pseudoId" operator="like"
                                from="filter" ignore-if-empty="true" ignore-case="true"/>
                            <econdition field-name="productId" operator="like"
                                from="filter" ignore-if-empty="true" ignore-case="true"/>
                            <econdition field-name="productName" operator="like"
                                from="filter" ignore-if-empty="true" ignore-case="true"/>
                        </econditions>
                        <econditions combine="or">
                            <econdition field-name="productId" ignore-case="true"
                                operator="like" from="search" ignore-if-empty="true"/>
                            <econdition field-name="productName" ignore-case="true"
                                operator="like" from="search" ignore-if-empty="true"/>
                            <econdition field-name="description" ignore-case="true"
                                operator="like" from="search" ignore-if-empty="true"/>
                        </econditions>
                        <date-filter from-field-name="productFromDate"
                            thru-field-name="productThruDate" ignore="productId"/>
                        <date-filter/><!-- price thrudate-->
                        <order-by field-name="productName"/>
                    </entity-find>
            <if condition="!productId">
                <set field="contentTypeId" value="PcntImageSmall"/>
                <set field="products" from="[]"/>
                <else>
                    <set field="contentTypeId" value="PcntImageMedium"/>
                </else>
            </if>
            <!-- create product list -->
            <iterate entry="product" list="productList">
                <if condition="filter != null">
                    <script>
                        products.add([
                        productId: product.productId,
                        pseudoId: product.pseudoId,
                        productName: product.productName,
                        price: product.price ? product.price.toString() : '',
                        ])
                    </script>
                    <continue/>
                </if>
                <!-- assets totalled by quantityOnHand -->
                <entity-find entity-name="growerp.mobile.asset.ProductAssetSummary"  list="assetCount">
                    <econdition field-name="productId" from="product.productId"/>
                    <econdition field-name="ownerPartyId" ignore-if-empty="true"/>
                    <econdition field-name="statusId" operator="not-equals" value="AstDeactivated"/>
                    <!--econdition field-name="classEnumId" from="product.assetClassEnumId" ignore-if-empty="true"/>
                    <econdition field-name="assetTypeEnumId" from="product.assetTypeEnumId" ignore-if-empty="true"/-->
                </entity-find>
                <entity-find entity-name="mantle.product.ProductContent" list="contents">
                    <econdition field-name="productId" from="product.productId"/>
                    <econdition field-name="productContentTypeEnumId" from="contentTypeId"/>
                </entity-find>
                <if condition="contents">
                    <service-call name="growerp.100.ImageServices100.download#Image"
                        in-map="[contentLocation: contents[0].contentLocation]" out-map="context"/></if>
                <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                    in-map="[docType: 'product', statusId: product.productTypeEnumId]" out-map="prodConvert"/>
                <set field="productOut" from="[
                    productId: product.productId,
                    pseudoId: product.pseudoId,
                    productName: product.productName ?: '',
                    productTypeId: prodConvert.convertedStatusId,
                    assetClassId: product.assetClassEnumId,
                    description: product.description?:'',
                    price: product.price ? product.price.toString() : '',
                    category: [categoryId: product.categoryId, categoryName: product.categoryName],
                    useWarehouse: product.requireInventory == 'Y' ? true : false,
                    assetCount: assetCount ? assetCount[0].totalAssets : null,
                    image: imageFile]"/>
                <if condition="productId">
                    <set field="product" from="productOut"/>
                    <else>
                        <set field="product" from="null"/>
                        <script>products.add(productOut)</script>
                    </else>
                </if>
            </iterate>
        </actions>
    </service>

    <service verb="create" noun="Product">
        <description> Create a Product with a price in a category</description>
        <in-parameters>
            <parameter name="product" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="product"/>
        </out-parameters>
        <actions>
            <script> // convert JSON data
                Object productIn = new groovy.json.JsonSlurper().parseText(product)</script>
            <service-call out-map="context" in-map="[wantOwner: true]"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"/>
            <set field="quantityUomId" value="OTH_ea"/>
            <!-- convert AssetClassId and product type-->
            <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                in-map="[docType: 'asset', statusId: productIn.assetClassId]" out-map="context"/>
            <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                in-map="[docType: 'product', statusId: productIn.productTypeId]" out-map="prodConvert"/>
            <!-- product -->
            <service-call name="create#mantle.product.Product" in-map="[
                productName: productIn.productName,
                description: productIn.description,
                salesIntroductionDate: ec.user.nowTimestamp,
                ownerPartyId: ownerPartyId,
                productTypeEnumId: prodConvert.convertedStatusId,
                assetTypeEnumId: 'AstTpInventory',
                requireInventory: productIn.useWarehouse == 'true' ? 'Y' : 'N',
                assetClassEnumId: convertedStatusId ? 
                    convertedStatusId : 'AsClsInventoryFin']" out-map="context"/>
            <!-- product price and currency -->
            <entity-find-one value-field="pref"
                entity-name="mantle.ledger.config.PartyAcctgPreference">
                <field-map field-name="organizationPartyId" from="ownerPartyId"/>
            </entity-find-one>
            <service-call name="create#mantle.product.ProductPrice" 
                in-map="[productId: productId, priceTypeEnumId: 'PptList',
                priceUomId: pref.baseCurrencyUomId, price: productIn.price,
                quantityUomId: 'OTH_ea',
                fromDate: ec.user.nowTimestamp,
                pricePurposeEnumId: 'PppPurchase']"/>
            <!-- if category missing (AppHotel) use the first one of this company -->
            <if condition="productIn.category.categoryId">
                <set field="productCategoryId" from="productIn.category.categoryId"/>
                <else>
                    <entity-find list="categories" limit="1"
                        entity-name="mantle.product.category.ProductCategory">
                        <econdition field-name="ownerPartyId" ignore-if-empty="true"/>
                        <econdition field-name="productCategoryTypeEnumId" value="PctCatalog"/>
                    </entity-find>
                    <if condition="!categories">
                        <return error="true" message="No 'first' category found for company: $ownerPartyId"/>
                    </if>
                    <set field="productCategoryId" from="categories[0].productCategoryId"/>
                </else>
            </if>
            <!-- connect to category -->
            <service-call name="create#mantle.product.category.ProductCategoryMember"
                in-map="[productCategoryId: productCategoryId,
                            productId: productId,
                            fromDate: ec.user.nowTimestamp]"/>
            <!-- product Image -->
            <if condition="productIn.image">
                <service-call name="growerp.100.ImageServices100.upload#Image"
                    in-map="[type: 'product', id: productId,
                        base64: productIn.image]"/>
            </if>
            <!-- return created product -->
            <service-call name="growerp.100.CatgProdServices100.get#Products"
                in-map="[productId: productId]" out-map="context"/>
        </actions>
    </service>

    <service verb="update" noun="Product">
        <description> Update an existing Product</description>
        <in-parameters>
            <parameter name="product" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="product"/>
        </out-parameters>
        <actions>
            <script> // convert JSON data
                Object productIn = new groovy.json.JsonSlurper().parseText(product)</script>
            <if condition="!productIn.productId"><return error="true" message="ProductId required"/></if>
            <!-- for update no owner needed in single company use -->
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"/>
            <entity-find list="prods" entity-name="mantle.product.Product" for-update="true" limit="1">
                <econdition field-name="productId" from="productIn.productId"/>
                <econdition field-name="ownerPartyId" ignore-if-empty="true"/></entity-find>
            <set field="product" from="prods[0]"/>
            <if condition="!product"><return error="true" message="product ${productIn.productId} not found!}"/></if>
            <set field="requireInventory" from="productIn.useWarehouse == 'true' ? 'Y' : 'N'"/>
            <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                in-map="[docType: 'product', statusId: productIn.productTypeId]" out-map="prodConvert"/>
            <if condition="(productIn.productName &amp;&amp; product.productName != productIn.productName)
                || (productIn.description &amp;&amp; product.description != productIn.description)
                || (prodConvert.convertedStatusId &amp;&amp;
                    product.productTypeEnumId != prodConvert.convertedStatusId)
                || (productIn.useWarehouse &amp;&amp; product.requireInventory != requireInventory)">
                <set field="product.productName" from="productIn.productName"/>
                <set field="product.description" from="productIn.description"/>
                <set field="product.productTypeEnumId" from="prodConvert.convertedStatusId"/>
                <set field="product.requireInventory" from="requireInventory"/>
                <entity-update value-field="product"/></if>
           <entity-find entity-name="growerp.mobile.product.ProductAndPriceAndProductCategory" list="products">
                <econdition field-name="productId" from="productIn.productId"/>
                <econdition field-name="ownerPartyId" ignore-if-empty="true"/>
                <date-filter from-field-name="productFromDate" thru-field-name="productThruDate"/>
                </entity-find>
            <if condition="products[0].price != productIn.price">
                <entity-find-one value-field="productPrice" entity-name="mantle.product.ProductPrice" for-update="true">
                    <field-map field-name="productPriceId" from="products[0].productPriceId"/></entity-find-one>
                <set field="productPrice.thruDate" from="ec.user.nowTimestamp"/>
                <entity-update value-field="productPrice"/>
                <service-call name="create#mantle.product.ProductPrice"
                    in-map="[   productId: productIn.productId,
                                priceTypeEnumId: 'PptList',
                                price: productIn.price,
                                quantityUomId: 'OTH_ea',
                                pricePurposeEnumId: 'PppPurchase',
                                priceUomId: products[0].priceUomId]"/>
            </if>
            <if condition="products[0].categoryId != productIn.category.categoryId">
                <entity-find-one value-field="member" 
                        entity-name="mantle.product.category.ProductCategoryMember" for-update="true">
                    <field-map field-name="productId" from="productIn.productId"/>
                    <field-map field-name="productCategoryId" from="products[0].categoryId"/>
                    <field-map field-name="fromDate" from="products[0].fromDate"/></entity-find-one>
                <set field="member.thruDate" from="ec.user.nowTimestamp"/>
                <entity-update value-field="member"/>
                <service-call name="create#mantle.product.category.ProductCategoryMember"
                    in-map="[   productId: productIn.productId,
                                productCategoryId: productIn.category.categoryId,
                                fromDate: ec.user.nowTimestamp]"/>
            </if>
            <!-- update image -->
            <if condition="productIn.image">
                <service-call name="growerp.100.ImageServices100.upload#Image"
                    in-map="[type: 'product', id: productIn.productId,
                        base64: productIn.image]"/>
            </if>
            <service-call name="growerp.100.CatgProdServices100.get#Products"
                in-map="[productId: productIn.productId]" out-map="context"/>
            </actions>
    </service>

    <service verb="delete" noun="Product">
        <description> Delete a Product </description>
        <in-parameters>
            <parameter name="product" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="product"/>
        </out-parameters>
        <actions>
            <script> // convert JSON data
                Object productIn = new groovy.json.JsonSlurper().parseText(product)</script>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"/>
            <entity-find list="prods" entity-name="mantle.product.Product" for-update="true" limit="1">
                <econdition field-name="productId" from="productIn.productId"/>
                <econdition field-name="ownerPartyId" ignore-if-empty="true"/></entity-find>
            <set field="prods[0].salesDiscontinuationDate" from="ec.user.nowTimestamp"/>
            <entity-update value-field="prods[0]"/>
            <service-call name="growerp.100.CatgProdServices100.get#Products"
                in-map="[productId: productIn.productId]" out-map="context"/>
        </actions>
    </service>

    <service verb="get" noun="Assets">
        <description> get a single, or all assets</description>
        <in-parameters>
            <parameter name="companyPartyId"/>
            <parameter name="productId"/>
            <parameter name="assetId"/>
            <parameter name="assetClassId"/>
            <parameter name="start" default-value="0" type="Integer"/>
            <parameter name="limit" default-value="20" type="Integer"/>
            <parameter name="filter" default="null"/>
            <parameter name="search" default="null"/>
        </in-parameters>
        <out-parameters>
            <parameter name="asset" type="Map" default="[]"/>
            <parameter name="assets" type="List"/>
        </out-parameters>
        <actions>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"/>
            <if condition="filter != null">
               <set field="filter" value="%${filter}%"/></if>
            <if condition="search != null">
                <set field="search" value="%${search}%"/></if>
            <if condition="!assetId"><!--single asset always show, list only active assets-->
                <set field="activated" value="AstDeactivated"/></if>
            <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                in-map="[docType: 'asset', statusId: assetClassId]" out-map="assetClass"/>
            <entity-find offset="start" limit="limit" list="assetList"
                entity-name="mantle.product.asset.AssetAndProduct">
                <econdition field-name="assetId" ignore-if-empty="true"/>
                <econdition field-name="statusId"
                    operator="not-equals" from="activated" ignore-if-empty="true"/>
                <econdition field-name="classEnumId"
                    from="assetClass.convertedStatusId" ignore-if-empty="true"/>
                <econdition field-name="ownerPartyId" ignore-if-empty="true"/>
                <econdition field-name="productId" ignore-if-empty="true"/>
                <econdition field-name="assetName" operator="like" ignore-case="true"
                    from="filter" ignore-if-empty="true"/>
                <econditions combine="or">
                    <econdition field-name="assetId" ignore-case="true"
                        operator="like" from="search" ignore-if-empty="true"/>
                    <econdition field-name="assetName" ignore-case="true"
                        operator="like" from="search" ignore-if-empty="true"/>
                    <econdition field-name="productName" ignore-case="true"
                        operator="like" from="search" ignore-if-empty="true"/>
                </econditions>
                <order-by field-name="assetName"/>
            </entity-find>
            <if condition="!assetId">
                <set field="assets" from="[]"/></if>
            <if condition="assetList">
                <iterate entry="item" list="assetList">
                <if condition="filter != null">
                    <script>
                        assets.add([
                            assetId: item.assetId,
                            assetName: item.assetName,
                            receivedDate: item.receivedDate,
                            productName: item.productName,
                            productId: item.productId
                                ])
                    </script>
                    <continue/>
                </if>
                <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                    in-map="[docType: 'asset', statusId: item.statusId]" out-map="status"/>
                <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                    in-map="[docType: 'asset', statusId: item.classEnumId]" out-map="assetClass"/>
                <set field="assetOut" from="[
                    assetId: item.assetId,
                    statusId: status.convertedStatusId,
                    assetTypeId: item.assetTypeEnumId,
                    assetClassId: assetClass.convertedStatusId,
                    assetName: item.assetName,
                    quantityOnHand: item.quantityOnHandTotal? item.quantityOnHandTotal.toString() : '0',
                    availableToPromise: item.availableToPromiseTotal? item.availableToPromiseTotal.toString() : '0',
                    receivedDate: item.receivedDate ? item.receivedDate.toString().substring(0,19) + 'Z' : null,
                    expectedEndOfLifeDate: item.expectedEndOfLife ? item.expectedEndOfLife.toString().substring(0,19) + 'Z' : null,
                    product: [productId: item.productId, pseudoId: item.pseudoId,
                    productName: item.productName],
                    ]"/>
                <if condition="assetId">
                    <set field="asset" from="assetOut"/>
                    <else>
                        <script>assets.add(assetOut)</script>
                    </else>
                </if>
            </iterate></if>
        </actions>
    </service>

    <service verb="create" noun="Asset">
        <description> Create a Asset </description>
        <in-parameters>
            <parameter name="asset" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="asset"/>
        </out-parameters>
        <actions>
            <script> // convert JSON data
                Object assetIn = new groovy.json.JsonSlurper().parseText(asset)</script>
            <service-call out-map="context" in-map="[wantOwner: true]"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"/>
            <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                in-map="[docType: 'asset', statusId: assetIn.statusId]" out-map="status"/>
            <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                in-map="[docType: 'asset', statusId: assetIn.assetClassId]" out-map="assetClass"/>
            <service-call name="create#mantle.product.asset.Asset"
                in-map="[
                    classEnumId: assetClass.convertedStatusId,
                    assetName: assetIn.assetName,
                    productId: assetIn.product.productId,
                    ownerPartyId: ownerPartyId,
                    statusId: status.convertedStatusId,
                    quantityOnHandTotal: assetIn.quantityOnHand,
                    assetTypeEnumId: 'AstTpFixed']"
                out-map="context" />
            <service-call name="growerp.100.CatgProdServices100.get#Assets"
                in-map="[assetId: assetId]" out-map="context"/>
        </actions>
    </service>

    <service verb="update" noun="Asset">
        <description> Update an existing Asset</description>
        <in-parameters>
            <parameter name="asset" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="asset"/>
        </out-parameters>
        <actions>
            <script> // convert JSON data
                Object assetIn = new groovy.json.JsonSlurper().parseText(asset)</script>
            <!-- for update no owner needed in single company use -->
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"/>
            <entity-find list="assets" limit="1"
                    entity-name="mantle.product.asset.Asset" for-update="true">
                <econdition field-name="assetId" from="assetIn.assetId"/>
                <econdition field-name="ownerPartyId" ignore-if-empty="true"/></entity-find>
            <set field="assetOld" from="assets[0]"/>    
            <if condition="!assetOld"><return error="true" message="asset ${assetIn.assetId} not found!}"/></if>
            <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                in-map="[docType: 'asset', statusId: assetIn.statusId]" out-map="status"/>
            <service-call name="growerp.100.FinDocServices100.convert#StatusId"
                in-map="[docType: 'asset', statusId: assetIn.assetClassId]" out-map="assetClass"/>
            <if condition=" assetOld.assetName != assetIn.assetName || 
                            assetOld.quantityOnHandTotal != assetIn.quantityOnHand ||
                            assetOld.statusId != status.convertedStatusId ||
                            assetOld.classEnumId != assetClass.convertedStatusId ||
                            assetOld.productId != assetIn.product.productId">
                <set field="assetOld.assetName" from="assetIn.assetName"/>
                <set field="assetOld.quantityOnHandTotal" from="assetIn.quantityOnHand"/>
                <set field="assetOld.statusId" from="status.convertedStatusId"/>
                <set field="assetOld.classEnumId" from="assetClass.convertedStatusId"/>
                <set field="assetOld.productId" from="assetIn.product.productId"/>
                <entity-update value-field="assetOld"/></if>
            <service-call name="growerp.100.CatgProdServices100.get#Assets"
                in-map="[assetId: assetIn.assetId]" out-map="context"/>
            </actions>
    </service>

    <service verb="delete" noun="Asset">
        <description> Delete a Asset </description>
        <in-parameters>
            <parameter name="asset" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="asset"/>
        </out-parameters>
        <actions>
            <script> // convert JSON data
                Object assetIn = new groovy.json.JsonSlurper().parseText(asset)</script>
            <service-call  out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"/>
            <entity-find list="assets" limit="1"
                    entity-name="mantle.product.asset.Asset" for-update="true">
                <econdition field-name="assetId" from="assetIn.assetId"/>
                <econdition field-name="ownerPartyId" ignore-if-empty="true"/></entity-find>
            <set field="assets[0].statusId" value="AstDeactivated"/>
            <entity-update value-field="assets[0]"/>
            <service-call name="growerp.100.CatgProdServices100.get#Assets"
                in-map="[assetId: assetIn.assetId]" out-map="context"/>
        </actions>
    </service>
    
    <service verb="get" noun="ProductCategories" authenticate="false">
        <description> get a single or all categories to group products by drinks , salads, deserts etc</description>
        <in-parameters>
            <parameter name="companyPartyId"/>
            <parameter name="categoryId"/>
            <parameter name="start" default-value="0" type="Integer"/>
            <parameter name="limit" default-value="20" type="Integer"/>
            <parameter name="filter" default="null"/>
            <parameter name="search" default="null"/>
            <parameter name="classificationId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="category" type="Map"/>
            <parameter name="categories" type="List"/>
        </out-parameters>
        <actions>
            <if condition="!companyPartyId">
                <service-call  out-map="context"
                    name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"/>
            </if>
            <if condition="!companyPartyId">
                <!-- if not provided and not logged in use the one which was first created -->
                <entity-find entity-name="mantle.party.Organization" list="parties" limit="1">
                    <order-by field-name="partyId"/></entity-find>
                <set field="companyPartyId" from="parties[0].partyId"/>
            <log message="Using first allocated companyPartyId"/></if>
            <!-- get root category from productStore can be different per app classification-->
            <service-call  name="growerp.100.PartyServices100.verifyAndGet#ProductStore"
                in-map="[companyPartyId: companyPartyId, classificationId: classificationId]"
                out-map="context"/>
            <entity-find entity-name="mantle.product.store.ProductStoreCategory" list="rootList">
                <econdition field-name="productStoreId" from="productStore.productStoreId"/>
            </entity-find>
            <if condition="rootList">
                <set field="parentProductCategoryId" from="rootList[0].productCategoryId"/>
            <else><return error="true"
                message="Category root not found for company: ${companyPartyId}"/></else></if>
            <if condition="filter != null">
                <set field="filter" value="%${filter}%"/></if>
            <if condition="search != null">
                <set field="search" value="%${search}%"/></if>
            <entity-find  offset="start" limit="limit" list="groups"
                entity-name="growerp.mobile.party.category.ProductCategoryParentsAndChild">
                <econdition field-name="ownerPartyId" ignore-if-empty="true"/>
                <econdition field-name="parentProductCategoryId"/>
                <econdition field-name="productCategoryId"
                    from="categoryId" ignore-if-empty="true"/>
                <econdition field-name="categoryName" operator="like"
                    from="filter" ignore-if-empty="true" ignore-case="true"/>
                <econditions combine="or">
                    <econdition field-name="productCategoryId" ignore-case="true"
                        operator="like" from="search" ignore-if-empty="true"/>
                    <econdition field-name="categoryName" ignore-case="true"
                        operator="like" from="search" ignore-if-empty="true"/>
                    <econdition field-name="description" ignore-case="true"
                        operator="like" from="search" ignore-if-empty="true"/>
                </econditions>
                <date-filter ignore="categoryId"/>
                <order-by field-name="categoryName"/>
            </entity-find>
            <if condition="!categoryId">
                <set field="categories" from="[]"/></if>
            <iterate entry="group" list="groups">
                <if condition="filter != null">
                    <script>
                        categories.add([
                            categoryId: group.productCategoryId,
                            categoryName: group.categoryName,
                                ])
                    </script>
                    <continue/>
                </if>
                <entity-find entity-name="mantle.product.category.ProductCategoryContent" list="contents">
                    <econdition field-name="productCategoryId" from="group.productCategoryId"/>
                    <econdition field-name="categoryContentTypeEnumId"
                        from="categoryId? 'PcctImageMedium' : 'PcctImageThumbNail'" />
                </entity-find>
                <if condition="contents">
                    <service-call name="growerp.100.ImageServices100.download#Image"
                        in-map="[contentLocation: contents[0].contentLocation]" out-map="context"/>
                    <else>
                        <set field="imageFile" from="null"/>
                    </else>
                </if>
                <entity-find-count entity-name="growerp.mobile.product.ProductAndPriceAndProductCategory" count-field="nbrOfProducts">
                    <econdition field-name="ownerPartyId" ignore-if-empty="true"/>
                    <econdition field-name="categoryId" from="group.productCategoryId"/>
                    <date-filter from-field-name="productFromDate" thru-field-name="productThruDate"/>                
                </entity-find-count>
                <set field="groupOut" from="[
                    categoryId: group.productCategoryId,
                    categoryName: group.categoryName,
                    description: group.description,
                    image: imageFile,
                    nbrOfProducts: nbrOfProducts
                    ]"/>
                <if condition="categoryId">
                    <set field="category" from="groupOut"/>
                    <else>
                        <script>categories.add(groupOut)</script>
                    </else>
                </if>
            </iterate>
            <if condition="categories &amp;&amp; !categoryId">
                <script>categories.sort{a, b -> 
                    a.categoryName.compareToIgnoreCase(b.categoryName) } </script>
            </if>
        </actions>
    </service>

    <service verb="create" noun="ProductCategory">
        <description> Create a category to group products by drinks , 
                                            salads, deserts etc</description>
        <in-parameters>
            <parameter name="category" required="true"/>
            <parameter name="classificationId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="category"/>
        </out-parameters>
        <actions>
            <script> // convert JSON data
                Object categoryIn = new groovy.json.JsonSlurper().parseText(category)</script>
            <service-call out-map="context" in-map="[wantOwner: true]"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"/>
            <service-call  name="growerp.100.PartyServices100.verifyAndGet#ProductStore"
                in-map="[companyPartyId: companyPartyId, classificationId: classificationId]"
                out-map="context"/>
            <entity-find entity-name="mantle.product.store.ProductStoreCategory" list="rootList">
                <econdition field-name="productStoreId" from="productStore.productStoreId"/>
            </entity-find>
            <if condition="rootList">
                <set field="rootProductCategoryId" from="rootList[0].productCategoryId"/>
                <else>
                    <return error="true"
                        message="Root category could not be found for compant: ${ownerPartyId}"/>
                </else></if>
            <service-call name="create#mantle.product.category.ProductCategory"
                in-map="[categoryName: categoryIn.categoryName,
                    description: categoryIn.description,
                    productCategoryTypeEnumId: 'PctCatalog',
                    ownerPartyId: ownerPartyId]" out-map="context"/>
            <service-call
                name="create#mantle.product.category.ProductCategoryRollup"
                    in-map="[parentProductCategoryId: rootProductCategoryId,
                        productCategoryId: productCategoryId]"/>
            <if condition="categoryIn.image">
                <service-call name="growerp.100.ImageServices100.upload#Image"
                    in-map="[type: 'category',
                        id: productCategoryId, base64: categoryIn.image]"/>
            </if>
            <service-call name="growerp.100.CatgProdServices100.get#ProductCategories"
                in-map="[categoryId: productCategoryId, classificationId: classificationId ]" out-map="context"/>
            </actions>
    </service>

    <service verb="update" noun="ProductCategory">
        <description> Update a category to group products by drinks , salads, deserts etc</description>
        <in-parameters>
            <parameter name="category" required="true"/>
            <parameter name="classificationId" required="true"/>
        </in-parameters>
        <out-parameters><parameter name="category"/></out-parameters>
        <actions>
            <script> // convert JSON data
                Object categoryIn = new groovy.json.JsonSlurper().parseText(category)</script>
            <service-call  out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"/>
            <entity-find for-update="true"  list="productCategories" limit="1"
                entity-name="mantle.product.category.ProductCategory">
                <econdition field-name="productCategoryId" from="categoryIn.categoryId"/>
                <econdition field-name="ownerPartyId" ignore-if-empty="true"/></entity-find>
            <set field="productCategory" from="productCategories[0]"/>
            <if condition="categoryIn.categoryName">
                <set field="productCategory.categoryName" from="categoryIn.categoryName"/></if>
            <if condition="categoryIn.description">
                <set field="productCategory.description" from="categoryIn.description"/></if>
            <if condition="categoryIn.preparationAreaId">
                <set field="productCategory.preparationAreaId" from="categoryIn.preparationAreaId"/></if>
            <entity-update value-field="productCategory"/>
            <!-- update image -->
            <if condition="categoryIn.image">
                <service-call name="growerp.100.ImageServices100.upload#Image"
                    in-map="[type: 'category', id: categoryIn.categoryId, base64: categoryIn.image]"/>
            </if>
            <!-- return category information -->
            <service-call name="growerp.100.CatgProdServices100.get#ProductCategories"
                in-map="[categoryId: categoryIn.categoryId,
                        classificationId: classificationId ]" out-map="context"/>
        </actions>
    </service>

    <service verb="delete" noun="ProductCategory">
        <description> delete a category to group products</description>
        <in-parameters>
            <parameter name="category" required="true"/>
            <parameter name="classificationId" required="true"/>
        </in-parameters>
        <out-parameters><parameter name="category"/></out-parameters>
        <actions>
            <script> // convert JSON data
                Object categoryIn = new groovy.json.JsonSlurper().parseText(category)</script>
            <service-call out-map="context"
                name="growerp.100.GeneralServices100.get#RelatedCompanyAndOwner"/>
            <entity-find list="productCategories"
                    entity-name="mantle.product.category.ProductCategory" limit="1">
                <econdition field-name="productCategoryId" from="categoryIn.categoryId"/>
                <econdition field-name="ownerPartyId" ignore-if-empty="true"/></entity-find>
            <set field="productCategory" from="productCategories[0]"/>
            <entity-find-count count-field="nbrOfProducts"
                    entity-name="mantle.product.category.ProductCategoryMemberProduct">
                <econdition field-name="productCategoryId" from="categoryIn.categoryId"/>
                <econditions combine="or">
                    <econdition field-name="salesDiscontinuationDate"
                        operator="is-null"/>
                    <econdition field-name="salesDiscontinuationDate"
                        operator="greater" from="ec.user.nowTimestamp"/>
                </econditions>
                <date-filter/></entity-find-count>
            <if condition="nbrOfProducts">
                <return error="true"
                    message="Cannot delete category, ${nbrOfProducts} products still related to it....!"/></if>
            <!-- disable category in categoryRollUp entity -->
            <if condition="singleCompany"><set field="ownerPartyId" from="singleCompany"/></if>
            <entity-find entity-name="mantle.product.category.ProductCategory" list="rootList">
                <econdition field-name="ownerPartyId"/></entity-find>
            <entity-find entity-name="mantle.product.category.ProductCategoryRollup" 
                    list="rollUpList" for-update="true" limit="1">
                <econdition field-name="productCategoryId" from="categoryIn.categoryId"/>
                <econdition field-name="parentProductCategoryId" from="rootList[0].productCategoryId"/>
                <date-filter/>
            </entity-find>
            <if condition="rollUpList">
                <set field="rollUpList[0].thruDate" from="ec.user.nowTimestamp"/>
                <entity-update value-field="rollUpList[0]"/>
            <else>
                <return error="true"
                    message="could not find rollup for category: ${categoryIn.categoryId}"/></else></if>
            <service-call name="growerp.100.CatgProdServices100.get#ProductCategories"
                in-map="[categoryId: categoryIn.categoryId,
                        classificationId: classificationId ]" out-map="context"/>
        </actions>
    </service>

</services>